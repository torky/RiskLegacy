//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Risk Shadow
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_Bank {
    bank[13] lv_file;
    string lv_sectionPlayer;
    string lv_Win2;
    string lv_Win23;
    string lv_Win24;
    string lv_Win25;
    string lv_Win27;
    string lv_Win26;
    string lv_Win252;
    string lv_playerELO;
    string lv_playerELO1v1;
    string lv_playerCardKey;
    string lv_playerFastestWin;
    string lv_sectionSettingAchieve;
    string lv_Win2522;
    string lv_Win2523;
    string lv_Win2524;
    string lv_Win2529;
    string lv_Win2536;
    string lv_Win2537;
    string lv_Win2525;
    string lv_Win2526;
    string lv_Win2538;
    string lv_Win2527;
    string lv_Win2539;
    string lv_Win2540;
    string lv_Win2541;
    string lv_Win2542;
    string lv_Win2528;
    string lv_Win2530;
    string lv_Win2532;
    string lv_Win2533;
    string lv_Win2534;
    string lv_Win2531;
    string lv_Win2535;
    string lv_sectionRanking;
    string lv_Win22;
    string[501] lv_iDList;
    int[501] lv_iDStatus;
    int lv_iDListMax;
    string[501] lv_iDFlagImage;
    string[501] lv_iDFlagTexture;
};

struct gs_GameSettings {
    int lv_incomePeriod;
    int lv_bounty;
    int lv_territorialDistribution;
    int lv_victoryCondition;
    int lv_conscripts;
    int lv_alliance;
    int lv_cards;
    int lv_visibility;
    int lv_anonymous;
};

struct gs_GameInfo {
    int lv_turnVictoryPercentageLowers;
    playergroup lv_hideFlag;
    unitgroup lv_flagGroup;
    int lv_maxBases;
    int lv_maxCountries;
    int lv_maxPlayers;
    int lv_minPlayersRanked;
    playergroup lv_playingPlayers;
    bool lv_newbInGame;
    bool lv_deathAnimation;
    int lv_battlenetRegion;
    int[16] lv_regionalDefaultSettings;
    timer lv_timer;
    int lv_turns;
    playergroup lv_startingPlayers;
    playergroup lv_winParty;
    bool lv_gameOver;
    bool lv_gameStarted;
    int lv_gameNotificationAmount;
    int lv_gameTeamNotificationAmount;
    int lv_mode;
    int lv_currentTime;
    int lv_incomePeriod;
    int lv_bounty;
    fixed lv_bountyValue;
    int lv_conscripts;
    int lv_alliance;
    int lv_victoryConditionType;
    int lv_turnsAccumulatedTillPercentDecrease;
    int lv_victoryConditionPercentage;
    fixed lv_victoryConditionPercentageRanked;
    int lv_teamVictoryConditionPercentage;
    int lv_territorialDistribution;
    int lv_card;
    int lv_ranked;
    int lv_ranked1v1;
    int lv_visibility;
    int lv_anonymous;
    string[26] lv_unitType;
    string[2][26] lv_unitType_Priorization;
    unitgroup lv_allCountries;
    unitgroup lv_notBarracks;
    unitgroup lv_allArmy;
};

struct gs_Country {
    string lv_name;
    int lv_income;
    unitgroup lv_bases;
    unit lv_spawnStructure;
    unitgroup lv_spawnGroup;
    point lv_spawnPoint;
    int lv_spawnLimit;
    int lv_spawnEachRound;
    int lv_owner;
    int lv_region;
    int lv_incomeGroup;
    string lv_flagTexture;
    string lv_flagImage;
    bool lv_illegibleStartingCountry;
    bool lv_singleBaseCountry;
};

struct gs_Base {
    unit lv_flag;
    unit lv_defender;
    unit lv_circle;
    unit lv_base;
    point lv_position;
    int lv_owner;
};

struct gs_Player {
    int lv_statusValue;
    string lv_statusString;
    string lv_statusImage;
    bool lv_configCard;
    color lv_currentColour;
    int lv_currentColour2;
    color lv_defaultColour;
    int lv_income_Current;
    int lv_income_Previous;
    int lv_bases;
    int lv_countries;
    fixed lv_bounty;
    int lv_homeCountry;
    bool lv_showHideNationality;
    int lv_team;
    string lv_flagImage;
    string lv_flagTexture;
    int lv_iDStatus;
    int lv_numberOfTrainedUnits;
    bool lv_over30;
    bool lv_used2ndChance;
    string lv_name;
    text lv_nickname;
    int lv_points;
    int lv_win;
    bool lv_playedTutorial;
    int lv_loses;
    int lv_killed;
    int lv_lost;
    int lv_tempLost;
    int lv_tempKilled;
    int lv_fastestWin;
    int lv_kills;
    int lv_deaths;
    int lv_cardKey;
    int lv_currentELO;
    int lv_currentELO1v1;
    int lv_currentELObackup;
    int lv_currentELObackup1v1;
    bool lv_hackerDetect;
    int lv_mainName;
    int[2] lv_itemName;
    fixed lv_eloTransform;
    int lv_winningELO;
    int lv_winningELO1v1;
    int lv_losingELO;
};

struct gs_CustomSetting {
    timer lv_countdownTimer;
    int lv_dialog;
    int lv_dialog_Item_CountdownTimer;
    int[11] lv_dialog_Item_Description;
    int[11][6] lv_dialog_Item_CheckBox;
    int[11][11] lv_dialog_Item_Label;
    int[11] lv_dialog_Item_Header;
    int[11][11] lv_dialog_Item_Votes;
    string[11] lv_string_Header;
    string[11] lv_string_Description;
    string[11][11] lv_string_Value;
    string[11][11] lv_string_Value_tooltip;
    int[11][11] lv_settings_Vote;
    bool[11][11] lv_settings_Optional;
    string[11] lv_settingsString;
    string[11] lv_settingsValue;
    bool[13] lv_playerCheck;
    int[11] lv_valueDefault;
    int[11] lv_valueSelected;
    int lv_column_IncomePeriod;
    int lv_column_Bounty;
    int lv_column_TerritorialDistribution;
    int lv_column_VictoryCondition;
    int lv_column_Conscripts;
    int lv_column_Alliance;
    int lv_column_Cards;
    int lv_column_Visibility;
    int lv_column_Anonymous;
    int lv_column_Ranked;
};

struct gs_Chat {
    int[13] lv_dialog;
    int[13][13] lv_dialogItem;
    int lv_chatToggle;
    int[13] lv_maxLength;
    bool[13] lv_chatAllToggle;
    int lv_emoticonMax;
    string[78] lv_emoticonText;
    string[78] lv_emoticonIcon;
    int[9][13] lv_creationTime;
    fixed lv_startFade;
    fixed lv_startDuration;
    text[13] lv_chatLog;
    playergroup[13] lv_mutedPlayers;
    int[13] lv_allyChat;
};

struct gs_Scoreboard {
    int lv_dialog;
    int lv_background;
    int lv_kill;
    int lv_death;
    int[21][21] lv_items;
    string lv_image;
    int[13] lv_getPlayerIDviaRow;
    int[13] lv_getRowIDViaPlayer;
    int lv_getNotificationRow;
    int lv_minimize;
    int lv_maxRow;
    string[7] lv_strings;
    int lv_columns;
    int[9] lv_columsDistance;
    int[13][11] lv_columnWidth;
    int lv_columnWidthTotal;
    int lv_flag;
    int lv_username;
    int lv_alliance;
    int lv_income;
    int lv_kills;
    int lv_losses;
    int lv_status;
};

struct gs_CurrencyBar {
    int[13] lv_dialog;
    int[13] lv_items;
    string lv_image;
    int lv_limit;
    int lv_length;
    int lv_height;
    int lv_xPlacement;
    int lv_yPlacement;
};

struct gs_InfoPanel {
    int[11] lv_mainMenuButtons;
    int lv_backgroundDialog;
};

struct gs_Profile {
    int lv_main;
    int[5] lv_mainDI;
    int lv_statsMain;
    int[13] lv_playerBarImg;
    int[13] lv_playerBarLblKills;
    int[13] lv_playerBarLblDeaths;
    int[13] lv_playerBarLblKilled;
    int[13] lv_playerBarLblLost;
    int[13] lv_playerBarLblWins;
    int[13] lv_playerBarLblLosses;
    int[13][4] lv_playerBarBorder;
    int[13] lv_playerButton;
    int[13] lv_playerSelectionDI;
    int[13] lv_playerProfile;
    int[6][13] lv_playerProfileDI;
    int[13] lv_achieveProfile;
    int[7][13] lv_achieveVictoryDI;
    int[7][13] lv_achieveKillsDI;
    int[7][13] lv_achieveOtherDI;
    int[15][13] lv_achieveUnitValue;
    int[13] lv_achieveDonateValue;
    int[13] lv_achieveWait;
    int[13] lv_settingsProfile;
    int[7][13] lv_settingsProfileDI;
    int[7][13] lv_settingsProfileValue;
};

struct gs_Log {
    int lv_main;
    int[3] lv_mainDI;
    int lv_mapMain;
    int[4] lv_mapDI;
    int[13] lv_currentMap;
    int lv_minimapTurn;
    int[61] lv_minimapDialog;
    int lv_lock;
    int lv_y;
    int lv_messageMain;
    int lv_messageDI;
    int[13] lv_muteDI;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_PlayerStatus_Normal = 0;
const int ge_PlayerStatus_Banned = 1;
const int ge_PlayerStatus_Admin = 2;
const int ge_PlayerStatus_DonatorLvl1 = 3;
const int ge_PlayerStatus_DonatorLvl2 = 4;
const int ge_PlayerStatus_DonatorLvl3 = 5;
const int ge_PlayerStatus_DonatorLvl4 = 6;
const int ge_Mode__1v1 = 0;
const int ge_Mode_Quick = 1;
const int ge_Mode_Empire = 2;
const int ge_Mode_Custome = 3;
const int ge_Mode_Tutorial = 4;
const int ge_Mode_Solo = 5;
const int ge_Mode_Team = 6;
const int ge_GenericGameInformation_Time = 0;
const int ge_GenericGameInformation_Turn = 1;
const int ge_Status_Dead = 0;
const int ge_Status_Left = 1;
const int ge_Status_Active = 2;
const int ge_Status_AFKAwayfromkeyboard = 3;
const int ge_Status_Winner = 4;
const int ge_Status_Loser = 5;
const int ge_IncomePeriod__45 = 0;
const int ge_IncomePeriod__60 = 1;
const int ge_IncomePeriod__75 = 2;
const int ge_IncomePeriod__90 = 3;
const int ge_Bounty_Disabled = 0;
const int ge_Bounty_Enabled13 = 1;
const int ge_Bounty_Enabled14 = 2;
const int ge_Bounty_Enabled16 = 3;
const int ge_TerritorialDistribution_RandomAllBases = 0;
const int ge_TerritorialDistribution_Random1v1 = 1;
const int ge_TerritorialDistribution_RandomSingleBase = 2;
const int ge_TerritorialDistribution_RandomCountries = 3;
const int ge_TerritorialDistribution_RandomRegion = 4;
const int ge_VictoryCondition_Disabled = 0;
const int ge_VictoryCondition__60 = 1;
const int ge_VictoryCondition__70 = 2;
const int ge_VictoryCondition__80 = 3;
const int ge_VictoryCondition__90 = 4;
const int ge_Conscripts_Enabled = 0;
const int ge_Conscripts_Disabled = 1;
const int ge_Alliance_DisabledFFA = 0;
const int ge_Alliance_EnabledFree = 1;
const int ge_Cards_Enabled = 0;
const int ge_Cards_Disabled = 1;
const int ge_Visibility_AllVisible = 0;
const int ge_Visibility_FogofWar = 1;
const int ge_Anonymous_Enabled = 0;
const int ge_Anonymous_Disabled = 1;
const int ge_Ranked_Enabled = 0;
const int ge_Ranked_Disabled = 1;
const int ge_Spawn_Disabled = 0;
const int ge_Spawn_Enabled = 1;
const int ge_WinConditions_Disabled = 0;
const int ge_WinConditions_DeathMatch = 1;
const int ge_WinConditions_Percent = 2;
const int ge_WinConditions_Phantom = 3;
const int ge_ScoreboardColumn_Name = 0;
const int ge_ScoreboardColumn_Kills = 1;
const int ge_ScoreboardColumn_Death = 2;
const int ge_ScoreboardColumn_Income = 3;
const int ge_ScoreboardColumn_Status = 4;
const int ge_ScoreboardColumn_Time = 5;
const int ge_ScoreboardColumn_Turn = 6;
const int ge_ScoreboardColumn_Notification = 7;
const int ge_ScoreboardColumn_Gray = 8;
const int ge_ScoreboardColumn_Colour = 9;
const int ge_AchieveUnitType_Nothing = 0;
const int ge_AchieveUnitType_Marine = 1;
const int ge_AchieveUnitType_SCV = 2;
const int ge_AchieveUnitType_Medic = 3;
const int ge_AchieveUnitType_Marauder = 4;
const int ge_AchieveUnitType_Hellion = 5;
const int ge_AchieveUnitType_Tank = 6;
const int ge_AchieveUnitType_Goliath = 7;
const int ge_AchieveUnitType_Viking = 8;
const int ge_AchieveUnitType_Banshee = 9;
const int ge_AchieveUnitType_ScienceVessel = 10;
const int ge_AchieveUnitType_Battlecrusier = 11;
const int ge_AchieveUnitType_Starport = 12;
const int ge_AchieveUnitType_Barracks = 13;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
gs_Bank gv_bank;
gs_GameSettings gv_gameSettings;
gs_GameInfo gv_gameInfo;
gs_Country[113] gv_country;
int gv_maxCountr;
gs_Base[241] gv_base;
int gv_baseNumber;
bool gv_setUpCountries;
playergroup[13] gv_team;
unitgroup gv_army;
gs_Player[14] gv_player;
int[15] gv_colours;
gs_CustomSetting gv_customSetting;
timer gv_customTimer;
text gv_chatMessage;
gs_Chat gv_chat;
gs_Scoreboard gv_scoreboard;
gs_CurrencyBar gv_currencyBar;
int gv_respawnDialog;
gs_InfoPanel gv_infoPanel;
gs_Profile gv_profile;
gs_Log gv_log;
int gv_victoryPercentageDialog;
int gv_victoryPercentageItem;
int gv_headerX;
int gv_headerY;
int gv_descriptionX;
int gv_descriptionY;
int gv_countX;
int gv_checkBoxX;
int gv_valueX;
int gv_valueY;
int gv_valueSpacingY;
int gv_lastCreatedCheckBox;
bool gv_typedGG;
int[13] gv_skinKill;
int[13] gv_skinWin;
int[13] gv_skinAchieve;
int[4][7][6][13] gv_skinButton;
int[4][7][6][13] gv_skinPortrait;
int[4][7][6][13] gv_skinBorder;
int[4][7][6][13] gv_skinBorderHover;
string[4][7][6] gv_images;
string[4][7][6] gv_tooltipName;
string[4][7][6] gv_requirements;
int[6] gv_profileBars;
int[6] gv_profileBarsImage;
int[14] gv_countryGroupDialog;
int gv_countryButtonDialog;
int[14] gv_countryMinimizeStatus;
int gv_countryButtonMinimize;
int[14] gv_countryGroupBonusInc;
bool[14] gv_ownsCountryGroup;
playergroup[15] gv_teams;
int[15][16] gv_countryGroupOwners;
int[16] gv_countryGroupCount;
bool gv_teamMajority;
int[14] gv_selectedUnitDialog;
int[4][14] gv_unitVitals;
unitgroup[14] gv_selectedUnits;
unit[14] gv_selectedUnit;

void InitGlobals () {
    int init_i;
    int init_j;
    int init_k;
    int init_l;
    int init_i1;
    int init_j1;

    gv_bank.lv_sectionPlayer = "328977";
    gv_bank.lv_Win2 = "98541";
    gv_bank.lv_Win23 = "13495";
    gv_bank.lv_Win24 = "98635";
    gv_bank.lv_Win25 = "65326";
    gv_bank.lv_Win27 = "25715";
    gv_bank.lv_Win26 = "23214";
    gv_bank.lv_Win252 = "45762";
    gv_bank.lv_playerELO = "9856412";
    gv_bank.lv_playerELO1v1 = "16223";
    gv_bank.lv_playerCardKey = "126395";
    gv_bank.lv_playerFastestWin = "269664";
    gv_bank.lv_sectionSettingAchieve = "978127";
    gv_bank.lv_Win2522 = "34645";
    gv_bank.lv_Win2523 = "29474";
    gv_bank.lv_Win2524 = "42346";
    gv_bank.lv_Win2529 = "67365";
    gv_bank.lv_Win2536 = "87666";
    gv_bank.lv_Win2537 = "78865";
    gv_bank.lv_Win2525 = "62378";
    gv_bank.lv_Win2526 = "86342";
    gv_bank.lv_Win2538 = "145234";
    gv_bank.lv_Win2527 = "14366";
    gv_bank.lv_Win2539 = "124511";
    gv_bank.lv_Win2540 = "567124";
    gv_bank.lv_Win2541 = "967458";
    gv_bank.lv_Win2542 = "642783";
    gv_bank.lv_Win2528 = "04704";
    gv_bank.lv_Win2530 = "76598";
    gv_bank.lv_Win2532 = "13634";
    gv_bank.lv_Win2533 = "56756";
    gv_bank.lv_Win2534 = "87232";
    gv_bank.lv_Win2531 = "43357";
    gv_bank.lv_Win2535 = "45689";
    gv_bank.lv_sectionRanking = "973423";
    gv_bank.lv_Win22 = "78245";
    for (init_i1 = 0; init_i1 <= 500; init_i1 += 1) {
        gv_bank.lv_iDList[init_i1] = "";
    }
    for (init_i1 = 0; init_i1 <= 500; init_i1 += 1) {
        gv_bank.lv_iDStatus[init_i1] = ge_PlayerStatus_Normal;
    }
    gv_bank.lv_iDListMax = 1;
    gv_gameSettings.lv_incomePeriod = ge_IncomePeriod__45;
    gv_gameSettings.lv_bounty = ge_Bounty_Enabled14;
    gv_gameSettings.lv_territorialDistribution = ge_TerritorialDistribution_RandomAllBases;
    gv_gameSettings.lv_victoryCondition = ge_VictoryCondition__70;
    gv_gameSettings.lv_conscripts = ge_Conscripts_Enabled;
    gv_gameSettings.lv_alliance = ge_Alliance_DisabledFFA;
    gv_gameSettings.lv_cards = ge_Cards_Enabled;
    gv_gameSettings.lv_visibility = ge_Visibility_AllVisible;
    gv_gameSettings.lv_anonymous = ge_Anonymous_Disabled;
    gv_gameInfo.lv_turnVictoryPercentageLowers = 70;
    gv_gameInfo.lv_hideFlag = PlayerGroupEmpty();
    gv_gameInfo.lv_flagGroup = UnitGroupEmpty();
    gv_gameInfo.lv_maxPlayers = 12;
    gv_gameInfo.lv_minPlayersRanked = 8;
    gv_gameInfo.lv_playingPlayers = PlayerGroupEmpty();
    gv_gameInfo.lv_deathAnimation = true;
    gv_gameInfo.lv_battlenetRegion = -1;
    gv_gameInfo.lv_timer = TimerCreate();
    gv_gameInfo.lv_turns = -1;
    gv_gameInfo.lv_startingPlayers = PlayerGroupEmpty();
    gv_gameInfo.lv_winParty = PlayerGroupEmpty();
    gv_gameInfo.lv_gameNotificationAmount = 71;
    gv_gameInfo.lv_gameTeamNotificationAmount = 12;
    gv_gameInfo.lv_mode = ge_Mode_Quick;
    gv_gameInfo.lv_incomePeriod = 45;
    gv_gameInfo.lv_bounty = ge_Bounty_Enabled14;
    gv_gameInfo.lv_bountyValue = 5.0;
    gv_gameInfo.lv_conscripts = ge_Spawn_Enabled;
    gv_gameInfo.lv_alliance = ge_Alliance_DisabledFFA;
    gv_gameInfo.lv_victoryConditionType = ge_WinConditions_Percent;
    gv_gameInfo.lv_victoryConditionPercentage = 70;
    gv_gameInfo.lv_victoryConditionPercentageRanked = 70.0;
    gv_gameInfo.lv_teamVictoryConditionPercentage = 90;
    gv_gameInfo.lv_territorialDistribution = ge_TerritorialDistribution_RandomAllBases;
    gv_gameInfo.lv_card = ge_Cards_Disabled;
    gv_gameInfo.lv_ranked = ge_Ranked_Disabled;
    gv_gameInfo.lv_ranked1v1 = ge_Ranked_Disabled;
    gv_gameInfo.lv_visibility = ge_Visibility_AllVisible;
    gv_gameInfo.lv_allCountries = UnitGroupEmpty();
    gv_gameInfo.lv_notBarracks = UnitGroupEmpty();
    gv_gameInfo.lv_allArmy = UnitGroupEmpty();
    for (init_i = 0; init_i <= 112; init_i += 1) {
        gv_country[init_i].lv_name = "";
        gv_country[init_i].lv_bases = UnitGroupEmpty();
        gv_country[init_i].lv_spawnGroup = UnitGroupEmpty();
    }
    gv_maxCountr = -1;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_team[init_i] = PlayerGroupEmpty();
    }
    gv_army = UnitGroupEmpty();
    for (init_i = 0; init_i <= 13; init_i += 1) {
        gv_player[init_i].lv_statusString = "Active";
        gv_player[init_i].lv_currentColour = Color(0,0,0);
        gv_player[init_i].lv_defaultColour = Color(0,0,0);
        gv_player[init_i].lv_iDStatus = ge_PlayerStatus_Normal;
        gv_player[init_i].lv_name = "";
        gv_player[init_i].lv_nickname = StringToText("Anonymous");
        gv_player[init_i].lv_fastestWin = 999;
        gv_player[init_i].lv_cardKey = 999;
        gv_player[init_i].lv_mainName = c_invalidDialogId;
        for (init_i1 = 0; init_i1 <= 1; init_i1 += 1) {
            gv_player[init_i].lv_itemName[init_i1] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 14; init_i += 1) {
        gv_colours[init_i] = 1;
    }
    gv_customSetting.lv_countdownTimer = TimerCreate();
    gv_customSetting.lv_dialog = c_invalidDialogId;
    gv_customSetting.lv_dialog_Item_CountdownTimer = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        gv_customSetting.lv_dialog_Item_Description[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 5; init_j1 += 1) {
            gv_customSetting.lv_dialog_Item_CheckBox[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 10; init_j1 += 1) {
            gv_customSetting.lv_dialog_Item_Label[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        gv_customSetting.lv_dialog_Item_Header[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 10; init_j1 += 1) {
            gv_customSetting.lv_dialog_Item_Votes[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        gv_customSetting.lv_string_Header[init_i1] = "";
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        gv_customSetting.lv_string_Description[init_i1] = "";
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 10; init_j1 += 1) {
            gv_customSetting.lv_string_Value[init_i1][init_j1] = "";
        }
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 10; init_j1 += 1) {
            gv_customSetting.lv_string_Value_tooltip[init_i1][init_j1] = "";
        }
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 10; init_j1 += 1) {
            gv_customSetting.lv_settings_Optional[init_i1][init_j1] = true;
        }
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        gv_customSetting.lv_settingsString[init_i1] = "";
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        gv_customSetting.lv_settingsValue[init_i1] = "";
    }
    gv_customSetting.lv_column_Bounty = 1;
    gv_customSetting.lv_column_TerritorialDistribution = 2;
    gv_customSetting.lv_column_VictoryCondition = 3;
    gv_customSetting.lv_column_Conscripts = 4;
    gv_customSetting.lv_column_Alliance = 5;
    gv_customSetting.lv_column_Cards = 6;
    gv_customSetting.lv_column_Visibility = 7;
    gv_customSetting.lv_column_Anonymous = 8;
    gv_customSetting.lv_column_Ranked = 9;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_chat.lv_dialog[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 12; init_j1 += 1) {
            gv_chat.lv_dialogItem[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    gv_chat.lv_chatToggle = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_chat.lv_maxLength[init_i1] = 7;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_chat.lv_chatAllToggle[init_i1] = true;
    }
    gv_chat.lv_emoticonMax = 77;
    for (init_i1 = 0; init_i1 <= 77; init_i1 += 1) {
        gv_chat.lv_emoticonText[init_i1] = "";
    }
    for (init_i1 = 0; init_i1 <= 77; init_i1 += 1) {
        gv_chat.lv_emoticonIcon[init_i1] = "";
    }
    for (init_i1 = 0; init_i1 <= 8; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 12; init_j1 += 1) {
            gv_chat.lv_creationTime[init_i1][init_j1] = 14;
        }
    }
    gv_chat.lv_startFade = 4.0;
    gv_chat.lv_startDuration = 14.0;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_chat.lv_mutedPlayers[init_i1] = PlayerGroupEmpty();
    }
    gv_scoreboard.lv_dialog = c_invalidDialogId;
    gv_scoreboard.lv_background = c_invalidDialogControlId;
    gv_scoreboard.lv_kill = c_invalidDialogControlId;
    gv_scoreboard.lv_death = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 20; init_j1 += 1) {
            gv_scoreboard.lv_items[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    gv_scoreboard.lv_image = "Assets\\Textures\\ui_ingame_leaderboard_dropdownframe.dds";
    gv_scoreboard.lv_minimize = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        gv_scoreboard.lv_strings[init_i1] = "";
    }
    gv_scoreboard.lv_username = 1;
    gv_scoreboard.lv_alliance = 2;
    gv_scoreboard.lv_income = 3;
    gv_scoreboard.lv_kills = 4;
    gv_scoreboard.lv_losses = 5;
    gv_scoreboard.lv_status = 6;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_currencyBar.lv_dialog[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_currencyBar.lv_items[init_i1] = c_invalidDialogControlId;
    }
    gv_currencyBar.lv_image = "Assets\\Textures\\white32.dds";
    gv_currencyBar.lv_limit = 750;
    gv_currencyBar.lv_length = 500;
    gv_currencyBar.lv_height = 30;
    gv_currencyBar.lv_yPlacement = 50;
    gv_respawnDialog = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        gv_infoPanel.lv_mainMenuButtons[init_i1] = c_invalidDialogControlId;
    }
    gv_infoPanel.lv_backgroundDialog = c_invalidDialogId;
    gv_profile.lv_main = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        gv_profile.lv_mainDI[init_i1] = c_invalidDialogControlId;
    }
    gv_profile.lv_statsMain = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_profile.lv_playerBarImg[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_profile.lv_playerBarLblKills[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_profile.lv_playerBarLblDeaths[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_profile.lv_playerBarLblKilled[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_profile.lv_playerBarLblLost[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_profile.lv_playerBarLblWins[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_profile.lv_playerBarLblLosses[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 3; init_j1 += 1) {
            gv_profile.lv_playerBarBorder[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_profile.lv_playerButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_profile.lv_playerSelectionDI[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_profile.lv_playerProfile[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 12; init_j1 += 1) {
            gv_profile.lv_playerProfileDI[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_profile.lv_achieveProfile[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 12; init_j1 += 1) {
            gv_profile.lv_achieveVictoryDI[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 12; init_j1 += 1) {
            gv_profile.lv_achieveKillsDI[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 12; init_j1 += 1) {
            gv_profile.lv_achieveOtherDI[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_profile.lv_settingsProfile[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 12; init_j1 += 1) {
            gv_profile.lv_settingsProfileDI[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 12; init_j1 += 1) {
            gv_profile.lv_settingsProfileValue[init_i1][init_j1] = 1;
        }
    }
    gv_log.lv_main = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_log.lv_mainDI[init_i1] = c_invalidDialogControlId;
    }
    gv_log.lv_mapMain = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_log.lv_mapDI[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 60; init_i1 += 1) {
        gv_log.lv_minimapDialog[init_i1] = c_invalidDialogId;
    }
    gv_log.lv_lock = -1;
    gv_log.lv_y = 280;
    gv_log.lv_messageMain = c_invalidDialogId;
    gv_log.lv_messageDI = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_log.lv_muteDI[init_i1] = c_invalidDialogControlId;
    }
    gv_victoryPercentageDialog = c_invalidDialogId;
    gv_victoryPercentageItem = c_invalidDialogControlId;
    gv_headerX = 50;
    gv_headerY = 50;
    gv_descriptionX = 50;
    gv_descriptionY = 100;
    gv_countX = 50;
    gv_checkBoxX = 100;
    gv_valueX = 150;
    gv_valueY = 150;
    gv_valueSpacingY = 50;
    gv_lastCreatedCheckBox = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_skinKill[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_skinWin[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_skinAchieve[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 6; init_j += 1) {
            for (init_k = 0; init_k <= 5; init_k += 1) {
                for (init_l = 0; init_l <= 12; init_l += 1) {
                    gv_skinButton[init_i][init_j][init_k][init_l] = c_invalidDialogControlId;
                }
            }
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 6; init_j += 1) {
            for (init_k = 0; init_k <= 5; init_k += 1) {
                for (init_l = 0; init_l <= 12; init_l += 1) {
                    gv_skinPortrait[init_i][init_j][init_k][init_l] = c_invalidDialogControlId;
                }
            }
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 6; init_j += 1) {
            for (init_k = 0; init_k <= 5; init_k += 1) {
                for (init_l = 0; init_l <= 12; init_l += 1) {
                    gv_skinBorder[init_i][init_j][init_k][init_l] = c_invalidDialogControlId;
                }
            }
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 6; init_j += 1) {
            for (init_k = 0; init_k <= 5; init_k += 1) {
                for (init_l = 0; init_l <= 12; init_l += 1) {
                    gv_skinBorderHover[init_i][init_j][init_k][init_l] = c_invalidDialogControlId;
                }
            }
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 6; init_j += 1) {
            for (init_k = 0; init_k <= 5; init_k += 1) {
                gv_tooltipName[init_i][init_j][init_k] = "";
            }
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 6; init_j += 1) {
            for (init_k = 0; init_k <= 5; init_k += 1) {
                gv_requirements[init_i][init_j][init_k] = "";
            }
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_profileBars[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_profileBarsImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 13; init_i += 1) {
        gv_countryGroupDialog[init_i] = c_invalidDialogId;
    }
    gv_countryButtonDialog = c_invalidDialogId;
    gv_countryButtonMinimize = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 13; init_i += 1) {
        gv_ownsCountryGroup[init_i] = true;
    }
    for (init_i = 0; init_i <= 14; init_i += 1) {
        gv_teams[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= 14; init_i += 1) {
        for (init_j = 0; init_j <= 15; init_j += 1) {
            gv_countryGroupOwners[init_i][init_j] = 99;
        }
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_countryGroupCount[init_i] = 1;
    }
    for (init_i = 0; init_i <= 13; init_i += 1) {
        gv_selectedUnitDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 13; init_j += 1) {
            gv_unitVitals[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 13; init_i += 1) {
        gv_selectedUnits[init_i] = UnitGroupEmpty();
    }
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_PredefineCountries (int lp__23);
void gf_SetCustomSettings ();
void gf_UpdateUI (int lp_player, int lp_setting, int lp_choosenSetting);
void gf_CreateBasicVoteDialog (int lp_customValueRow);
void gf_CreateBasicVoteDialogItem (int lp_customValueRow, int lp_preset);
void gf_CreateDeathTimer ();
void gf_SetCustomValues ();
void gf_SetIncomePeriod (int lp_customValueRow);
void gf_SetBounty (int lp_customValueRow);
void gf_SetTerritorialDistibution (int lp_customValueRow);
void gf_SetVictoryCondition (int lp_customValueRow);
void gf_SetConscripts (int lp_customValueRow);
void gf_SetAllianceOption (int lp_customValueRow);
void gf_SetCard (int lp_customValueRow);
void gf_SetVisibility (int lp_customValueRow);
void gf_SetAnonymous (int lp_customValueRow);
int gf_CheckVote (int lp_setting);
void gf_ApplySetting ();
void gf_ApplyIncomePeriod (int lp_parameter);
void gf_ApplyBounty (int lp_parameter);
void gf_ApplyTerritorialDistribution (int lp_parameter);
void gf_ApplyVictoryCondition (int lp_parameter);
void gf_ApplyConscripts (int lp_parameter);
void gf_ApplyAlliance (int lp_parameter);
void gf_ApplyCards (int lp_parameter);
void gf_ApplyVisibility (int lp_parameter);
void gf_ApplyAnonymous (int lp_parameter);
void gf_ApplyRanked ();
void gf_BaseDistribution (int lp_parameter);
void gf_SetupBase (int lp_player, int lp_integer);
void gf_PingLocationofBases (int lp_playa);
void gf_RandomAllBases ();
void gf_RandomAllBases1v1 ();
void gf_RandomSingleBase ();
void gf_RandomCountries ();
void gf_RandomRegion ();
void gf_SetupBaseOwnership (int lp_player, int lp_integer);
void gf_SetupCountryOwnership (int lp_player, int lp_integer);
void gf_BankPreload ();
void gf_BankOpen ();
void gf_BankLoad (int lp_player);
void gf_BankSave (int lp_player, bool lp_leaving);
void gf_BankHackerDetected (int lp_player);
void gf_BankIDList (int lp_player);
void gf_UserConfigKeys (int lp_keyPressed);
void gf_OverlayListener (int lp_dialogItem, int lp_player);
void gf_ProfileListener (int lp_dialogItem, int lp_player);
void gf_AchievementListener2 (int lp_dialogItem, int lp_player);
void gf_AchieveWait (int lp_player);
void gf_SettingsListener (int lp_dialogItem, int lp_player);
void gf_TeamBoard_Listener (int lp_dialogItem, int lp_player);
void gf_LogListener (int lp_dialogItem, int lp_player);
void gf_Scoreboard_Listener (int lp_player, int lp_dialogItem);
void gf_OtherListener (int lp_dialogItem, int lp_player);
void gf_ResetMap ();
void gf_ChatMessage (int lp_player, text lp_message, int lp_notification);
void gf_NotificationChatManagement (int lp_player, text lp_text);
void gf_ChatManagement (int lp_player, int lp_postingPlayer, string lp_message);
void gf_ChatMessageFadeout (int lp_player, int lp_dialogItem);
void gf_InitDialogFading (int lp_dialogItem);
void gf_SkinsCreate ();
void gf_SkinsButtons (int lp_firstDimension, int lp_secondDimension, int lp_thirdDimension, int lp_fourthDimension, string lp_buttonBorder, color lp_borderColor, string lp_buttonPortrait, int lp_achievementType);
void gf_SkinsUpdateStats ();
void gf_InfoCreate ();
void gf_AchieveChangeAllUnits (int lp_player, int lp_section);
void gf_AchieveChangeUnit (int lp_player, unit lp_unit);
void gf_UpdateNewPlayers ();
void gf_CreateBarAndText (int lp_createddialog, int lp_barType, int lp_barOffSet, int lp_picked);
void gf_InfoPanelProfile ();
void gf_InfoPanelUpdateStatsAchievements (int lp_winner);
void gf_InfoPanelLog ();
void gf_InfoPanelCheckMinimapHistory ();
void gf_InfoPanelCreateMinimapHistory (int lp_integer);
void gf_MissionStatement (int lp_player);
void gf_RefreshKilledandLost ();
void gf_RefreshWinCondition ();
void gf_RefreshScoreboard (int lp_player, int lp_column, text lp_message);
void gf_RefreshSortScoreboard ();
void gf_RefreshScoreBoardColour ();
void gf_RefreshChangeScoreBoardRowColor (int lp_player, color lp_color);
void gf_RefreshSwapScoreboardRows (int lp_player1, int lp_player2);
void gf_RefreshUpdateSwappedRows (int lp_player1);
void gf_RefreshAllFlag (int lp_player, int lp_country);
void gf_RefreshScoreBoardFlag (int lp_player);
void gf_RefreshPlayerStatus (int lp_player, int lp_status);
void gf_RefreshTimeInfo (int lp_genericGameInformation);
void gf_CreateTeamDialog ();
void gf_RefreshCountryGroupIncome ();
void gf_RefreshIncome ();
void gf_RefreshAddIncome ();
void gf_RefreshConscriptManager ();
void gf_RefreshConscriptUnit (int lp_country);
void gf_RefreshNotification (int lp_player);
void gf_RefreshShowBases ();
void gf_ChangeNickName (int lp_player, text lp_text);
void gf_RandomizePlayerColour ();
void gf_SetCurrentColour (int lp_player, bool lp_boolean);
string gf_AttributeBonusString (int lp_attributeBonusIndex);
text gf_TooltipLineFunc (string lp_string1, string lp_font1, string lp_string2, string lp_font2);
void gf_RespawnTree (point lp_deadTreePosition);
void gf_BountyAddition (unit lp_dyingUnit, point lp_dyingPosition, int lp_dying, int lp_killing);
void gf_AnonymizeUnit (unit lp_unit);
void gf_AnonymizeAllUnit ();
void gf_ChangeDefender (unit lp_new, unit lp_old);
void gf_ShowHideActorForPlayerGroup (playergroup lp_players, actor lp_actor, bool lp_show);
void gf_SetNationality (int lp_player, int lp_country);
void gf_ShowHideAllFlag (int lp_player, bool lp_showHide);
void gf_ShowHideIndvFlag (bool lp_showHide, int lp_base);
void gf_RefreshIndividualFlag (int lp_player, int lp_base);
void gf_ChangeFlagsTexture (int lp_player, int lp_flag_by_country_id);
void gf_RandomimizeNationality (int lp_player, int lp_country, bool lp_boolean);
void gf_PauseAndHaloGlow (int lp_player);
void gf_VictoryPercentage (int lp_untitledParameter001);
void gf_LowerVictoryPercentage ();
void gf_BaseConquestSequence (unit lp_killing, unit lp_dying);
void gf_DefenderSettings (unit lp_new, unit lp_old, bool lp_bool);
void gf_CountryConquestSequence (int lp_capturingPlayer, int lp_losingPlayer, int lp_country);
void gf_SpawnControlGroup (int lp_killing, int lp_dead);
bool gf_ConditionsRequirementsForConquest (unit lp_killing, unit lp_dying);
bool gf_UnitTypeCondition (unit lp_unit);
bool gf_BaseReadyToBeConquered (unit lp_killing, unit lp_dying);
void gf_setCustomValueOfUnit (unit lp_unit, int lp_integer);
int gf_getIndexOfLargestInteger (int lp_setting);
bool gf_ApprovedName (string lp_string);
fixed gf_getMinimapUnitX (unit lp_unit);
fixed gf_getMinimapUnitY (unit lp_unit);
int gf_getPoints (int lp_player);
int gf_getCustomUnitValue (unit lp_unit, int lp_integer);
int gf_getNextActivePlayer (int lp_player, bool lp_bool);
playergroup gf_returnPlayerGroup (playergroup lp_playergrp, bool lp_bool_users, bool lp_bool_npc, bool lp_bool_spectators);
bool gf_PlayerMeetsCondition (int lp_player, bool lp_bool_users, bool lp_bool_npc, bool lp_bool_spectators);
unit gf_PrioritizeDefender (unit lp_attacker_Unit, fixed lp_radius);
unitgroup gf_getUnitsSortedByPrioritization (int lp_player, unitgroup lp_unitGroupParam);
unit gf_getUnitSortedByHealth (int lp_player, unitgroup lp_unitGroup);
int gf_getPriorizationValueOfUnitType (unit lp_unit);
bool gf_AnyoneElseHasNationality (int lp_player, int lp_country);
int gf_calculateELO (int lp_player, fixed lp_win, bool lp_quick);
void gf_AddUnitEntersUnitRegionEvent (trigger lp_trigger, region lp_region);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_SetupGame;
trigger gt_SetupID;
trigger gt_SetupBank;
trigger gt_SetupUnits;
trigger gt_SetupCountries;
trigger gt_SetupBases;
trigger gt_SetupUI;
trigger gt_SetupPlayer;
trigger gt_SetupScreenFade;
trigger gt_SetupGameMode;
trigger gt_GameInitialization;
trigger gt_SetupScoreboard;
trigger gt_SetupVictoryPercentageDisplay;
trigger gt_SetupCustomChatUI;
trigger gt_SetupCurrencyBar;
trigger gt_TutorialMode;
trigger gt_CheckSettings;
trigger gt_CheckNoDefender;
trigger gt_GameDialogUsed;
trigger gt_KeyUsed;
trigger gt_Menu;
trigger gt_Profile;
trigger gt_Log;
trigger gt_Cards;
trigger gt_Chat;
trigger gt_Refresh;
trigger gt_RefreshCurrencyBar;
trigger gt_PlayerLeaves;
trigger gt_unitcap;
trigger gt_UnitUnload;
trigger gt_UnitDies;
trigger gt_UnitDies2;
trigger gt_UnitTrain;
trigger gt_UnitPropertyChanges;
trigger gt_UnitSelected;
trigger gt_UnitsSelected;
trigger gt_ChangeDefender;
trigger gt_SelectHomeland;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_PredefineCountries (int lp__23) {
    // Variable Declarations
    int lv__23;

    // Automatic Variable Declarations
    int auto7873AE6B_val;

    // Variable Initialization
    lv__23 = lp__23;

    // Implementation
    auto7873AE6B_val = lv__23;
    if (auto7873AE6B_val == 0) {
        gv_country[lv__23].lv_name = "No Nationality";
        gv_country[lv__23].lv_flagTexture = "Nothing";
        gv_country[lv__23].lv_flagImage = "Assets\\Textures\\white32.dds";
    }
    else if (auto7873AE6B_val == 1) {
        gv_country[lv__23].lv_name = "Iceland";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2287);
        gv_country[lv__23].lv_flagTexture = "Iceland";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Iceland.tga";
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(174));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(923877051));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(175));
    }
    else if (auto7873AE6B_val == 2) {
        gv_country[lv__23].lv_name = "Ireland";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2289);
        gv_country[lv__23].lv_flagTexture = "Ireland";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Ireland.tga";
        gv_country[lv__23].lv_region = 1;
        gv_country[lv__23].lv_incomeGroup = 3;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(15));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(570545106));
    }
    else if (auto7873AE6B_val == 3) {
        gv_country[lv__23].lv_name = "England";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2288);
        gv_country[lv__23].lv_flagTexture = "England";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\England.tga";
        gv_country[lv__23].lv_region = 1;
        gv_country[lv__23].lv_incomeGroup = 3;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(14));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(2101162448));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(13));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1460));
    }
    else if (auto7873AE6B_val == 4) {
        gv_country[lv__23].lv_name = "Norway";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2286);
        gv_country[lv__23].lv_flagTexture = "NorwaySvalbard";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Norway.tga";
        gv_country[lv__23].lv_region = 2;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(168));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(171));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(169));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(173));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(170));
    }
    else if (auto7873AE6B_val == 5) {
        gv_country[lv__23].lv_name = "Sweden";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2285);
        gv_country[lv__23].lv_flagTexture = "Sweden";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Sweden.tga";
        gv_country[lv__23].lv_region = 2;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(167));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(165));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(164));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(163));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1810338160));
    }
    else if (auto7873AE6B_val == 6) {
        gv_country[lv__23].lv_name = "Finland";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2284);
        gv_country[lv__23].lv_flagTexture = "Finland";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Finland.tga";
        gv_country[lv__23].lv_incomeGroup = 5;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(18758739));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(158));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(161));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(588667052));
    }
    else if (auto7873AE6B_val == 7) {
        gv_country[lv__23].lv_name = "Denmark";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2298);
        gv_country[lv__23].lv_flagTexture = "Denmark";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Denmark.tga";
        gv_country[lv__23].lv_region = 3;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(141));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(142));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1193437273));
    }
    else if (auto7873AE6B_val == 8) {
        gv_country[lv__23].lv_name = "Morocco";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2248);
        gv_country[lv__23].lv_flagTexture = "Morocco";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Morocco.tga";
        gv_country[lv__23].lv_region = 4;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(185));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(113598715));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(187));
    }
    else if (auto7873AE6B_val == 9) {
        gv_country[lv__23].lv_name = "Ouargla (Algeria)";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2247);
        gv_country[lv__23].lv_flagTexture = "Algeria";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Algeria.tga";
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1656236068));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(192));
    }
    else if (auto7873AE6B_val == 10) {
        gv_country[lv__23].lv_name = "Tunisia";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2246);
        gv_country[lv__23].lv_flagTexture = "Tunisia";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Tunisia.tga";
        gv_country[lv__23].lv_region = 5;
        gv_country[lv__23].lv_incomeGroup = 1;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(181));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(180));
    }
    else if (auto7873AE6B_val == 11) {
        gv_country[lv__23].lv_name = "Tripoli (Libya)";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2245);
        gv_country[lv__23].lv_flagTexture = "Libya";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Libya.tga";
        gv_country[lv__23].lv_region = 5;
        gv_country[lv__23].lv_incomeGroup = 1;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(450980156));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(182));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(183));
    }
    else if (auto7873AE6B_val == 12) {
        gv_country[lv__23].lv_name = "Benghazi (Libya)";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2243);
        gv_country[lv__23].lv_flagTexture = "Libya";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Libya.tga";
        gv_country[lv__23].lv_region = 5;
        gv_country[lv__23].lv_incomeGroup = 1;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(89));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(90));
    }
    else if (auto7873AE6B_val == 13) {
        gv_country[lv__23].lv_name = "Corsica (France)";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2291);
        gv_country[lv__23].lv_flagTexture = "France";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\France.tga";
        gv_country[lv__23].lv_region = 6;
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_incomeGroup = 4;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(179));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(4359));
    }
    else if (auto7873AE6B_val == 14) {
        gv_country[lv__23].lv_name = "Crete (Greece)";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2244);
        gv_country[lv__23].lv_flagTexture = "Greece";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Greece.tga";
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        gv_country[lv__23].lv_region = 12;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(107));
    }
    else if (auto7873AE6B_val == 15) {
        gv_country[lv__23].lv_name = "Egypt";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2242);
        gv_country[lv__23].lv_flagTexture = "Egypt";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Egypt.tga";
        gv_country[lv__23].lv_region = 5;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(85));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(86));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(88));
        gv_country[lv__23].lv_incomeGroup = 1;
    }
    else if (auto7873AE6B_val == 16) {
        gv_country[lv__23].lv_name = "Israel";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2275);
        gv_country[lv__23].lv_flagTexture = "Israel";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Israel.tga";
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(84));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(800818469));
    }
    else if (auto7873AE6B_val == 17) {
        gv_country[lv__23].lv_name = "Cyprus";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2272);
        gv_country[lv__23].lv_flagTexture = "Cyprus";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Cyprus.tga";
        gv_country[lv__23].lv_region = 5;
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(104));
    }
    else if (auto7873AE6B_val == 18) {
        gv_country[lv__23].lv_name = "Lebanon";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2274);
        gv_country[lv__23].lv_flagTexture = "Lebanon";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Lebanon.tga";
        gv_country[lv__23].lv_region = 7;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(81));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1283761315));
    }
    else if (auto7873AE6B_val == 19) {
        gv_country[lv__23].lv_name = "Jordan";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2276);
        gv_country[lv__23].lv_flagTexture = "Jordan";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Jordan.tga";
        gv_country[lv__23].lv_region = 7;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(91));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(92));
    }
    else if (auto7873AE6B_val == 20) {
        gv_country[lv__23].lv_name = "Saudi Arabia";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2277);
        gv_country[lv__23].lv_flagTexture = "SaudiArabia";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\SaudiArabia.tga";
        gv_country[lv__23].lv_region = 7;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(95));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(94));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1879904876));
    }
    else if (auto7873AE6B_val == 21) {
        gv_country[lv__23].lv_name = "Syria";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2273);
        gv_country[lv__23].lv_flagTexture = "Syria";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Syria.tga";
        gv_country[lv__23].lv_region = 7;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(101));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(103));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(367210451));
    }
    else if (auto7873AE6B_val == 22) {
        gv_country[lv__23].lv_name = "Iraq";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2278);
        gv_country[lv__23].lv_flagTexture = "Iraq";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Iraq.tga";
        gv_country[lv__23].lv_region = 7;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(97));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(99));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(98));
    }
    else if (auto7873AE6B_val == 23) {
        gv_country[lv__23].lv_name = "Iran";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2279);
        gv_country[lv__23].lv_flagTexture = "Iran";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Iran.tga";
        gv_country[lv__23].lv_region = 8;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1487086642));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(707921808));
    }
    else if (auto7873AE6B_val == 24) {
        gv_country[lv__23].lv_name = "Turkey";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2271);
        gv_country[lv__23].lv_flagTexture = "Turkey";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Turkey.tga";
        gv_country[lv__23].lv_region = 8;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(68));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(71));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1488658118));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(69));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(516147626));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(73));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(74));
    }
    else if (auto7873AE6B_val == 25) {
        gv_country[lv__23].lv_name = "Azerbaijan";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2280);
        gv_country[lv__23].lv_flagTexture = "Azerbaijan";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Azerbaijan.tga";
        gv_country[lv__23].lv_region = 8;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(143));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1723427203));
    }
    else if (auto7873AE6B_val == 26) {
        gv_country[lv__23].lv_name = "Georgia";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2281);
        gv_country[lv__23].lv_flagTexture = "Georgia";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Georgia.tga";
        gv_country[lv__23].lv_region = 8;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(75));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(76));
    }
    else if (auto7873AE6B_val == 27) {
        gv_country[lv__23].lv_name = "Western (Russia)";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2283);
        gv_country[lv__23].lv_flagTexture = "Russia";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Russia.tga";
        gv_country[lv__23].lv_region = 11;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(149));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(152));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(148));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(151));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(147));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1885824088));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(154));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1932078869));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(115));
    }
    else if (auto7873AE6B_val == 28) {
        gv_country[lv__23].lv_name = "Kazakhstan";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2282);
        gv_country[lv__23].lv_flagTexture = "Kazakhstan";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Kazakhstan.tga";
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(750833424));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(144));
    }
    else if (auto7873AE6B_val == 29) {
        gv_country[lv__23].lv_name = "Portugal";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2250);
        gv_country[lv__23].lv_flagTexture = "Portugal";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Portugal.tga";
        gv_country[lv__23].lv_region = 4;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(3945));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1));
    }
    else if (auto7873AE6B_val == 30) {
        gv_country[lv__23].lv_name = "Spain";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2249);
        gv_country[lv__23].lv_flagTexture = "Spain";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Spain.tga";
        gv_country[lv__23].lv_region = 4;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(6));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(3));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(4));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(7));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(472372993));
    }
    else if (auto7873AE6B_val == 31) {
        gv_country[lv__23].lv_name = "France";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2251);
        gv_country[lv__23].lv_flagTexture = "France";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\France.tga";
        gv_country[lv__23].lv_region = 9;
        gv_country[lv__23].lv_incomeGroup = 2;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(23));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(27));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(25));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(21));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(22));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(26));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(472126351));
    }
    else if (auto7873AE6B_val == 32) {
        gv_country[lv__23].lv_name = "Belgium";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2253);
        gv_country[lv__23].lv_flagTexture = "Belgium";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Belgium.tga";
        gv_country[lv__23].lv_region = 9;
        gv_country[lv__23].lv_incomeGroup = 2;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(20));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(677914755));
    }
    else if (auto7873AE6B_val == 33) {
        gv_country[lv__23].lv_name = "Netherlands";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2254);
        gv_country[lv__23].lv_flagTexture = "Netherlands";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Netherlands.tga";
        gv_country[lv__23].lv_region = 9;
        gv_country[lv__23].lv_incomeGroup = 2;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(18));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(19));
    }
    else if (auto7873AE6B_val == 34) {
        gv_country[lv__23].lv_name = "Switzerland";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2252);
        gv_country[lv__23].lv_flagTexture = "Switzerland";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Switzerland.tga";
        gv_country[lv__23].lv_region = 9;
        gv_country[lv__23].lv_incomeGroup = 2;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(33));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(34));
    }
    else if (auto7873AE6B_val == 35) {
        gv_country[lv__23].lv_name = "Italy";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2290);
        gv_country[lv__23].lv_flagTexture = "Italy";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Italy.tga";
        gv_country[lv__23].lv_region = 6;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(28));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(2141726269));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(2576));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(31));
    }
    else if (auto7873AE6B_val == 36) {
        gv_country[lv__23].lv_name = "Germany";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2255);
        gv_country[lv__23].lv_flagTexture = "Germany";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Germany.tga";
        gv_country[lv__23].lv_region = 3;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(136));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(134));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(137));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(135));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(93688063));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(138));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1503));
    }
    else if (auto7873AE6B_val == 37) {
        gv_country[lv__23].lv_name = "Austria";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2257);
        gv_country[lv__23].lv_flagTexture = "Austria";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Austria.tga";
        gv_country[lv__23].lv_region = 3;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(37));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(449324886));
    }
    else if (auto7873AE6B_val == 38) {
        gv_country[lv__23].lv_name = "Czech Republic";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2256);
        gv_country[lv__23].lv_flagTexture = "CzechRepublic";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\CzechRepublic.tga";
        gv_country[lv__23].lv_region = 3;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(38));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(39));
    }
    else if (auto7873AE6B_val == 39) {
        gv_country[lv__23].lv_name = "Poland";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2258);
        gv_country[lv__23].lv_flagTexture = "Poland";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Poland.tga";
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(42));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(40));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(43));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(803974834));
    }
    else if (auto7873AE6B_val == 40) {
        gv_country[lv__23].lv_name = "Kalingrad (Russia)";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2295);
        gv_country[lv__23].lv_flagTexture = "Russia";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Russia.tga";
        gv_country[lv__23].lv_region = 11;
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(126));
    }
    else if (auto7873AE6B_val == 41) {
        gv_country[lv__23].lv_name = "Lithuania";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2294);
        gv_country[lv__23].lv_flagTexture = "Lithuania";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Lithuania.tga";
        gv_country[lv__23].lv_incomeGroup = 5;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(130));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(131));
    }
    else if (auto7873AE6B_val == 42) {
        gv_country[lv__23].lv_name = "Latvia";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2293);
        gv_country[lv__23].lv_flagTexture = "Latvia";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Latvia.tga";
        gv_country[lv__23].lv_incomeGroup = 5;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(312368496));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(129));
    }
    else if (auto7873AE6B_val == 43) {
        gv_country[lv__23].lv_name = "Estonia";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2292);
        gv_country[lv__23].lv_flagTexture = "Estonia";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Estonia.tga";
        gv_country[lv__23].lv_incomeGroup = 5;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(127));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(128));
    }
    else if (auto7873AE6B_val == 44) {
        gv_country[lv__23].lv_name = "Belarus";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2296);
        gv_country[lv__23].lv_flagTexture = "Belarus";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Belarus.tga";
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(122));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(123));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(125));
    }
    else if (auto7873AE6B_val == 45) {
        gv_country[lv__23].lv_name = "Ukraine";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2259);
        gv_country[lv__23].lv_flagTexture = "Ukraine";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Ukraine.tga";
        gv_country[lv__23].lv_region = 10;
        gv_country[lv__23].lv_incomeGroup = 6;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(120));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(119));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1798887913));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(121));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(116));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1562828240));
    }
    else if (auto7873AE6B_val == 46) {
        gv_country[lv__23].lv_name = "Moldova";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2260);
        gv_country[lv__23].lv_flagTexture = "Moldova";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Moldova.tga";
        gv_country[lv__23].lv_region = 10;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(112));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(113));
    }
    else if (auto7873AE6B_val == 47) {
        gv_country[lv__23].lv_name = "Slovakia";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2297);
        gv_country[lv__23].lv_flagTexture = "Slovakia";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Slovakia.tga";
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(44));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(622539741));
    }
    else if (auto7873AE6B_val == 48) {
        gv_country[lv__23].lv_name = "Hungary";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2262);
        gv_country[lv__23].lv_flagTexture = "Hungary";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Hungary.tga";
        gv_country[lv__23].lv_region = 10;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(46));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1005337656));
    }
    else if (auto7873AE6B_val == 49) {
        gv_country[lv__23].lv_name = "Slovenia";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2263);
        gv_country[lv__23].lv_flagTexture = "Slovenia";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Slovenia.tga";
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(50));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1324292879));
    }
    else if (auto7873AE6B_val == 50) {
        gv_country[lv__23].lv_name = "Croatia";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2264);
        gv_country[lv__23].lv_flagTexture = "Croatia";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Croatia.tga";
        gv_country[lv__23].lv_region = 6;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(49));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(48));
    }
    else if (auto7873AE6B_val == 51) {
        gv_country[lv__23].lv_name = "Bosnia";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2265);
        gv_country[lv__23].lv_flagTexture = "Bosnia";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Bosnia.tga";
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(52));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1046745870));
    }
    else if (auto7873AE6B_val == 52) {
        gv_country[lv__23].lv_name = "Serbia";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2266);
        gv_country[lv__23].lv_flagTexture = "Serbia";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Serbia.tga";
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(54));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(604979798));
    }
    else if (auto7873AE6B_val == 53) {
        gv_country[lv__23].lv_name = "Romania";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2261);
        gv_country[lv__23].lv_flagTexture = "Romania";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Romania.tga";
        gv_country[lv__23].lv_region = 10;
        gv_country[lv__23].lv_incomeGroup = 6;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(108));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(110));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1651458832));
    }
    else if (auto7873AE6B_val == 54) {
        gv_country[lv__23].lv_name = "Bulgaria";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2268);
        gv_country[lv__23].lv_flagTexture = "Bulgaria";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Bulgaria.tga";
        gv_country[lv__23].lv_region = 12;
        gv_country[lv__23].lv_incomeGroup = 6;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(65));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(66));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(67));
    }
    else if (auto7873AE6B_val == 55) {
        gv_country[lv__23].lv_name = "Macedonia";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2267);
        gv_country[lv__23].lv_flagTexture = "Macedonia";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Macedonia.tga";
        gv_country[lv__23].lv_region = 12;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(60));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1713487376));
    }
    else if (auto7873AE6B_val == 56) {
        gv_country[lv__23].lv_name = "Albania";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2270);
        gv_country[lv__23].lv_flagTexture = "Albania";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Albania.tga";
        gv_country[lv__23].lv_region = 12;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(58));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(57));
    }
    else if (auto7873AE6B_val == 57) {
        gv_country[lv__23].lv_name = "Greece";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2269);
        gv_country[lv__23].lv_flagTexture = "Greece";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Greece.tga";
        gv_country[lv__23].lv_region = 12;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(62));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(61));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(2051283650));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(411753828));
    }
    else if (auto7873AE6B_val == 58) {
        gv_country[lv__23].lv_name = "Svalbard";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2321);
        gv_country[lv__23].lv_flagTexture = "NorwaySvalbard";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Norway.tga";
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        gv_country[lv__23].lv_region = 2;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(2320));
    }
    else if (auto7873AE6B_val == 59) {
        gv_country[lv__23].lv_name = "Greenland";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2325);
        gv_country[lv__23].lv_flagTexture = "Greenland";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Greenland.tga";
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(2323));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(2324));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(787648957));
    }
    else if (auto7873AE6B_val == 60) {
        gv_country[lv__23].lv_name = "Malta";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2844);
        gv_country[lv__23].lv_flagTexture = "Malta";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Malta.tga";
        gv_country[lv__23].lv_region = 6;
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_incomeGroup = 4;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(2842));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(87115904));
    }
    else if (auto7873AE6B_val == 61) {
        gv_country[lv__23].lv_name = "Mallorca (Spain)";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(4352);
        gv_country[lv__23].lv_flagTexture = "Spain";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Spain.tga";
        gv_country[lv__23].lv_region = 4;
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        gv_country[lv__23].lv_incomeGroup = 4;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(520));
    }
    else if (auto7873AE6B_val == 62) {
        gv_country[lv__23].lv_name = "Sardinia (Italy)";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(4355);
        gv_country[lv__23].lv_flagTexture = "Italy";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Italy.tga";
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_region = 6;
        gv_country[lv__23].lv_incomeGroup = 4;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(154338916));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(178));
    }
    else if (auto7873AE6B_val == 63) {
        gv_country[lv__23].lv_name = "Gotland (Sweden)";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(257179117);
        gv_country[lv__23].lv_flagTexture = "Gotland";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\gotland.tga";
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(867936237));
    }
    else if (auto7873AE6B_val == 64) {
        gv_country[lv__23].lv_name = "Shetland Island (Scotland)";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(764410931);
        gv_country[lv__23].lv_flagTexture = "Shetland";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Shetland.tga";
        gv_country[lv__23].lv_region = 1;
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(80420212));
    }
    else if (auto7873AE6B_val == 65) {
        gv_country[lv__23].lv_name = "Wales";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(1429);
        gv_country[lv__23].lv_flagTexture = "Wales";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Wales.tga";
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_region = 1;
        gv_country[lv__23].lv_incomeGroup = 3;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1420667981));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(12));
    }
    else if (auto7873AE6B_val == 66) {
        gv_country[lv__23].lv_name = "Scotland";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(1430);
        gv_country[lv__23].lv_flagTexture = "Scotland";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\Scotland.tga";
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_region = 1;
        gv_country[lv__23].lv_incomeGroup = 3;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1428));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(9));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1689960942));
    }
    else if (auto7873AE6B_val == 67) {
        gv_country[lv__23].lv_name = "Faroe Islands";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(1477);
        gv_country[lv__23].lv_flagTexture = "FaroeIslands";
        gv_country[lv__23].lv_flagImage = "Risk\\Flag\\FaroeIslands.tga";
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1462));
    }
    else if (auto7873AE6B_val == 68) {
        gv_country[lv__23].lv_name = "Sicily";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2578);
        gv_country[lv__23].lv_flagTexture = "Sicily";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Sicily.tga";
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_region = 6;
        gv_country[lv__23].lv_incomeGroup = 4;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(32));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(2577));
    }
    else if (auto7873AE6B_val == 69) {
        gv_country[lv__23].lv_name = "Crimea (Russia)";
        gv_country[lv__23].lv_flagTexture = "Russia";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Russia.tga";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(1524138640);
        gv_country[lv__23].lv_region = 11;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(114));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1099634241));
    }
    else if (auto7873AE6B_val == 70) {
        gv_country[lv__23].lv_name = "Luxembourg";
        gv_country[lv__23].lv_flagTexture = "Luxembourg";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Luxembourg.tga";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(599634781);
        gv_country[lv__23].lv_region = 9;
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1482914946));
    }
    else if (auto7873AE6B_val == 71) {
        gv_country[lv__23].lv_name = "Northern Ireland";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(1521896083);
        gv_country[lv__23].lv_flagTexture = "Nireland";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Northern_Ireland.tga";
        gv_country[lv__23].lv_region = 1;
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(8));
    }
    else if (auto7873AE6B_val == 72) {
        gv_country[lv__23].lv_name = "Nenets (Russia)";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(1125761983);
        gv_country[lv__23].lv_flagTexture = "Russia";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Russia.tga";
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1302181260));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(661886199));
    }
    else if (auto7873AE6B_val == 73) {
        gv_country[lv__23].lv_name = "Caucasus (Russia)";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(1377338735);
        gv_country[lv__23].lv_flagTexture = "Russia";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Russia.tga";
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(145));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1012626920));
    }
    else if (auto7873AE6B_val == 74) {
        gv_country[lv__23].lv_name = "Constantine (Algeria)";
        gv_country[lv__23].lv_flagTexture = "Algeria";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Algeria.tga";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(1938008689);
        gv_country[lv__23].lv_region = 5;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1775808176));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(188));
    }
    else if (auto7873AE6B_val == 75) {
        gv_country[lv__23].lv_name = "Western Sahara";
        gv_country[lv__23].lv_flagTexture = "Sahara";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\sahara.tga";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(893897702);
        gv_country[lv__23].lv_region = 4;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(699284225));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(409428069));
    }
    else if (auto7873AE6B_val == 76) {
        gv_country[lv__23].lv_name = "Andorra";
        gv_country[lv__23].lv_flagTexture = "Andorra";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Andorra.tga";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(1718350512);
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1330489692));
    }
    else if (auto7873AE6B_val == 77) {
        gv_country[lv__23].lv_name = "Blida (Algeria)";
        gv_country[lv__23].lv_flagTexture = "Algeria";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Algeria.tga";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(438139361);
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(168325527));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(824415056));
    }
    else if (auto7873AE6B_val == 78) {
        gv_country[lv__23].lv_name = "Oran (Algeria)";
        gv_country[lv__23].lv_flagTexture = "Algeria";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Algeria.tga";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(896040646);
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(246));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(248));
    }
    else if (auto7873AE6B_val == 79) {
        gv_country[lv__23].lv_name = "Armenia";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(497077167);
        gv_country[lv__23].lv_flagTexture = "Armenia";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Armenia.tga";
        gv_country[lv__23].lv_region = 8;
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(962189919));
    }
    else if (auto7873AE6B_val == 80) {
        gv_country[lv__23].lv_name = "Montenegro";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(192399502);
        gv_country[lv__23].lv_flagTexture = "Montenegro";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Montenegro.tga";
        gv_country[lv__23].lv_region = 12;
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1890119321));
    }
    else if (auto7873AE6B_val == 81) {
        gv_country[lv__23].lv_name = "Franz Josef Land";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(1093204136);
        gv_country[lv__23].lv_flagTexture = "Russia";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Russia.tga";
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(924591972));
    }
    else if (auto7873AE6B_val == 82) {
        gv_country[lv__23].lv_name = "Madeira (Portugal)";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(1655296033);
        gv_country[lv__23].lv_flagTexture = "Madeira";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Madeira.tga";
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(965565179));
    }
    else if (auto7873AE6B_val == 83) {
        gv_country[lv__23].lv_name = "Monaco";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(1438760257);
        gv_country[lv__23].lv_flagTexture = "Albania2";
        gv_country[lv__23].lv_flagImage = "risk\\donate\\monaco.tga";
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1682480212));
    }
    else if (auto7873AE6B_val == 84) {
        gv_country[lv__23].lv_name = "Palestine";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(1042819902);
        gv_country[lv__23].lv_flagTexture = "Jordan";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Jordan.tga";
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1850370128));
    }
    else if (auto7873AE6B_val == 85) {
        gv_country[lv__23].lv_name = "Kosovo";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(484449185);
        gv_country[lv__23].lv_flagTexture = "CrazyRusski";
        gv_country[lv__23].lv_flagImage = "risk\\donate\\UnitedNations.tga";
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(157092271));
    }
    else if (auto7873AE6B_val == 86) {
        gv_country[lv__23].lv_name = "North Cyprus";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(1911453022);
        gv_country[lv__23].lv_flagTexture = "Turkey";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Turkey.tga";
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(669742393));
    }
    else if (auto7873AE6B_val == 87) {
        gv_country[lv__23].lv_name = "Vatican City";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(1982469176);
        gv_country[lv__23].lv_flagTexture = "Italy";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Italy.tga";
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(485233611));
    }
    else if (auto7873AE6B_val == 88) {
        gv_country[lv__23].lv_name = "Karelia (Russia)";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(1412013931);
        gv_country[lv__23].lv_flagTexture = "Russia";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Russia.tga";
        gv_country[lv__23].lv_region = 11;
        gv_country[lv__23].lv_incomeGroup = 5;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(500825370));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(155));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1664490278));
    }
    else if (auto7873AE6B_val == 89) {
        gv_country[lv__23].lv_name = "Liechtenstein";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(1652265686);
        gv_country[lv__23].lv_flagTexture = "Austria";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Austria.tga";
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(36));
    }
    else if (auto7873AE6B_val == 90) {
        gv_country[lv__23].lv_name = "Bechar (Algeria)";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(2007991594);
        gv_country[lv__23].lv_flagTexture = "Algeria";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Algeria.tga";
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(1906930315));
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(226016423));
    }
    else if (auto7873AE6B_val == 91) {
        gv_country[lv__23].lv_name = "Central (Algeria)";
        gv_country[lv__23].lv_spawnStructure = UnitFromId(1380432297);
        gv_country[lv__23].lv_flagTexture = "Algeria";
        gv_country[lv__23].lv_flagImage = "risk\\Flag\\Algeria.tga";
        gv_country[lv__23].lv_illegibleStartingCountry = true;
        gv_country[lv__23].lv_singleBaseCountry = true;
        UnitGroupAdd(gv_country[lv__23].lv_bases, UnitFromId(219));
        gv_setUpCountries = true;
    }
    else {
    }
}

void gf_SetCustomSettings () {
    // Variable Declarations
    int lv_incomePeriodRow;
    int lv_bountyRow;
    int lv_territorialDistributionRow;
    int lv_victoryConditionRow;
    int lv_conscriptsRow;
    int lv_allianceOptionRow;
    int lv_cardsRow;
    int lv_visibilityRow;
    int lv_anonymousRow;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bountyRow = 1;
    lv_territorialDistributionRow = 2;
    lv_victoryConditionRow = 3;
    lv_conscriptsRow = 4;
    lv_allianceOptionRow = 5;
    lv_cardsRow = 6;
    lv_visibilityRow = 7;
    lv_anonymousRow = 8;

    // Implementation
    gf_SetCustomValues();
    gf_SetIncomePeriod(lv_incomePeriodRow);
    gf_SetBounty(lv_bountyRow);
    gf_SetTerritorialDistibution(lv_territorialDistributionRow);
    gf_SetVictoryCondition(lv_victoryConditionRow);
    gf_SetConscripts(lv_conscriptsRow);
    gf_SetAllianceOption(lv_allianceOptionRow);
    gf_SetCard(lv_cardsRow);
    gf_SetVisibility(lv_visibilityRow);
    gf_SetAnonymous(lv_anonymousRow);
}

void gf_UpdateUI (int lp_player, int lp_setting, int lp_choosenSetting) {
    // Variable Declarations
    int lv_settingOption;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), lp_player) == true)) {
        gv_customSetting.lv_settings_Vote[lp_setting][lp_choosenSetting] = (gv_customSetting.lv_settings_Vote[lp_setting][lp_choosenSetting] + 1);
        if ((gv_customSetting.lv_settings_Vote[lp_setting][lp_choosenSetting] > (PlayerGroupCount(gf_returnPlayerGroup(PlayerGroupActive(), true, false, false)) / 2))) {
            libNtve_gf_StopTimer(gv_customTimer);
        }

    }
    else {
        gv_customSetting.lv_settings_Vote[lp_setting][lp_choosenSetting] = (gv_customSetting.lv_settings_Vote[lp_setting][lp_choosenSetting] - 1);
    }
    libNtve_gf_SetDialogItemText(gv_customSetting.lv_dialog_Item_Votes[lp_setting][lp_choosenSetting], IntToText(gv_customSetting.lv_settings_Vote[lp_setting][lp_choosenSetting]), PlayerGroupAll());
}

void gf_CreateBasicVoteDialog (int lp_customValueRow) {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(500, 400, c_anchorCenter, 0, 0, false);
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_battlenet_glue_frame_mapcontainer.dds");
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, gv_headerX, gv_headerY, StringToText(gv_customSetting.lv_string_Header[lp_customValueRow]), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTopLeft, gv_descriptionX, gv_descriptionY, StringToText(gv_customSetting.lv_string_Description[lp_customValueRow]), ColorWithAlpha(0,0,0,0), false, 2.0);
}

void gf_CreateBasicVoteDialogItem (int lp_customValueRow, int lp_preset) {
    // Variable Declarations
    int lv_checkBox;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_checkBox = c_invalidDialogControlId;

    // Implementation
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, gv_valueX, (gv_valueY + (lp_preset * gv_valueSpacingY)), StringToText(gv_customSetting.lv_string_Value[lp_customValueRow][lp_preset]), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 40, c_anchorTopLeft, gv_checkBoxX, ((gv_valueY - 10) + (lp_preset * gv_valueSpacingY)), StringToText(""), false);
    gv_lastCreatedCheckBox = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(gv_customSetting.lv_string_Value_tooltip[lp_customValueRow][lp_preset]), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 50, c_anchorTopLeft, gv_countX, (gv_valueY + (lp_preset * gv_valueSpacingY)), StringExternal("Param/Value/EC396BF9"), ColorWithAlpha(0,0,0,0), false, 2.0);
}

void gf_CreateDeathTimer () {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    TimerStart(TimerCreate(), 15.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/7AD5B3C5"), true, false);
    gv_customTimer = TimerLastStarted();
    libNtve_gf_WaitForTimer(TimerLastStarted(), 0.0, false);
    DialogDestroy(DialogLastCreated());
    TimerWindowDestroy(TimerWindowLastCreated());
}

void gf_SetCustomValues () {
    // Variable Declarations
    int lv_temp;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_temp = 0;
    gv_customSetting.lv_string_Header[lv_temp] = "<c val=\"FFFF6C\">Income Period</c>";
    gv_customSetting.lv_string_Description[lv_temp] = "Decides the duration time for each round.";
    gv_customSetting.lv_string_Value[lv_temp][0] = "45 seconds";
    gv_customSetting.lv_string_Value[lv_temp][1] = "60 seconds";
    gv_customSetting.lv_string_Value[lv_temp][2] = "75 seconds";
    gv_customSetting.lv_string_Value[lv_temp][3] = "90 seconds";
    lv_temp = (lv_temp + 1);
    gv_customSetting.lv_string_Header[lv_temp] = "<c val=\"FFFF6C\">Bounty</c>";
    gv_customSetting.lv_string_Description[lv_temp] = "Recieve a mineral for destroying enemy units.";
    gv_customSetting.lv_string_Value[lv_temp][0] = "Disabled";
    gv_customSetting.lv_string_Value[lv_temp][1] = "Every 3rd";
    gv_customSetting.lv_string_Value[lv_temp][2] = "Every 4th";
    gv_customSetting.lv_string_Value[lv_temp][3] = "Every 6th";
    gv_customSetting.lv_string_Value_tooltip[lv_temp][0] = "Disable mineral rewards for killing a series of enemy units.";
    gv_customSetting.lv_string_Value_tooltip[lv_temp][1] = "Reward a mineral for every 3rd enemy unit killed.";
    gv_customSetting.lv_string_Value_tooltip[lv_temp][2] = "Reward a mineral for every 4th enemy unit killed.";
    gv_customSetting.lv_string_Value_tooltip[lv_temp][3] = "Reward a mineral for every 6th enemy unit killed.";
    lv_temp = (lv_temp + 1);
    gv_customSetting.lv_string_Header[lv_temp] = "<c val=\"FFFF6C\">Base Distribution</c>";
    gv_customSetting.lv_string_Description[lv_temp] = "Starting base distribution among players.";
    gv_customSetting.lv_string_Value[lv_temp][0] = "Split by bases";
    gv_customSetting.lv_string_Value[lv_temp][1] = "One base each";
    gv_customSetting.lv_string_Value[lv_temp][2] = "Split by countries";
    gv_customSetting.lv_string_Value[lv_temp][3] = "One region each";
    gv_customSetting.lv_string_Value_tooltip[lv_temp][0] = "All players start with an even distribution of random bases across the map.";
    gv_customSetting.lv_string_Value_tooltip[lv_temp][1] = "All players start with a single random base.";
    gv_customSetting.lv_string_Value_tooltip[lv_temp][2] = "All players start with an even amount of countries.";
    gv_customSetting.lv_string_Value_tooltip[lv_temp][3] = "All players start with a random region in Europe. The region consists of 19-20 income worth of countries in close proximity.";
    lv_temp = (lv_temp + 1);
    gv_customSetting.lv_string_Header[lv_temp] = "<c val=\"FFFF6C\">Win Condition</c>";
    gv_customSetting.lv_string_Description[lv_temp] = "Specifies the game victory condition.";
    gv_customSetting.lv_string_Value[lv_temp][0] = "Disabled";
    gv_customSetting.lv_string_Value[lv_temp][1] = "Control 60%";
    gv_customSetting.lv_string_Value[lv_temp][2] = "Control 70%";
    gv_customSetting.lv_string_Value[lv_temp][3] = "Control 80%";
    gv_customSetting.lv_string_Value_tooltip[lv_temp][0] = "Disable any sort of victory conditions.";
    gv_customSetting.lv_string_Value_tooltip[lv_temp][1] = "The player to first capture 60% of the Europe will be victorious.";
    gv_customSetting.lv_string_Value_tooltip[lv_temp][2] = "The player to first capture 70% of the Europe will be victorious.";
    gv_customSetting.lv_string_Value_tooltip[lv_temp][3] = "The player to first capture 80% of the Europe will be victorious.";
    lv_temp = (lv_temp + 1);
    gv_customSetting.lv_string_Header[lv_temp] = "<c val=\"FFFF6C\">Conscripts</c>";
    gv_customSetting.lv_string_Description[lv_temp] = "Countries provide free units at the end of turns.";
    gv_customSetting.lv_string_Value[lv_temp][0] = "Enabled";
    gv_customSetting.lv_string_Value[lv_temp][1] = "Disabled";
    gv_customSetting.lv_string_Value_tooltip[lv_temp][0] = "Enables a player to recieve free troops from owned territories at the start of new turns.";
    gv_customSetting.lv_string_Value_tooltip[lv_temp][1] = "Disable conscripts.";
    lv_temp = (lv_temp + 1);
    gv_customSetting.lv_string_Header[lv_temp] = "<c val=\"FFFF6C\">Alliance</c>";
    gv_customSetting.lv_string_Description[lv_temp] = "Specifies whether players may form lasting alliances.";
    gv_customSetting.lv_string_Value[lv_temp][0] = "Enabled";
    gv_customSetting.lv_string_Value[lv_temp][1] = "Disabled";
    lv_temp = (lv_temp + 1);
    gv_customSetting.lv_string_Header[lv_temp] = "<c val=\"FFFF6C\">Card</c>";
    gv_customSetting.lv_string_Description[lv_temp] = "Rewards the aggressors with bonus minerals.";
    gv_customSetting.lv_string_Value[lv_temp][0] = "Enabled";
    gv_customSetting.lv_string_Value[lv_temp][1] = "Disabled";
    lv_temp = (lv_temp + 1);
    gv_customSetting.lv_string_Header[lv_temp] = "<c val=\"FFFF6C\">Visibility</c>";
    gv_customSetting.lv_string_Description[lv_temp] = "Specifies how players fields of view ingame.";
    gv_customSetting.lv_string_Value[lv_temp][0] = "Full Map View";
    gv_customSetting.lv_string_Value[lv_temp][1] = "Fog of War";
    gv_customSetting.lv_string_Value_tooltip[lv_temp][0] = "The entire map will be fully visible for all players.";
    gv_customSetting.lv_string_Value_tooltip[lv_temp][1] = "The map will be covered in fog hiding enemy movements.";
    lv_temp = (lv_temp + 1);
    gv_customSetting.lv_string_Header[lv_temp] = "<c val=\"FFFF6C\">Anonymous</c>";
    gv_customSetting.lv_string_Description[lv_temp] = "Makes it harder to distinguish players from another.";
    gv_customSetting.lv_string_Value[lv_temp][0] = "Enabled";
    gv_customSetting.lv_string_Value[lv_temp][1] = "Disabled";
}

void gf_SetIncomePeriod (int lp_customValueRow) {
    // Variable Declarations
    int lv_dialogItem;
    int lv_a45;
    int lv_a60;
    int lv_a75;
    int lv_a90;
    int lv_votedChoice;

    // Automatic Variable Declarations
    int autoE1A13A2D_val;

    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_a60 = 1;
    lv_a75 = 2;
    lv_a90 = 3;

    // Implementation
    gf_CreateBasicVoteDialog(lp_customValueRow);
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_a45);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_a45] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_a45] = gv_lastCreatedCheckBox;
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_a60);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_a60] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_a60] = gv_lastCreatedCheckBox;
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_a75);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_a75] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_a75] = gv_lastCreatedCheckBox;
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_a90);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_a90] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_a90] = gv_lastCreatedCheckBox;
    gf_CreateDeathTimer();
    lv_votedChoice = gf_getIndexOfLargestInteger(lp_customValueRow);
    autoE1A13A2D_val = lv_votedChoice;
    if (autoE1A13A2D_val == lv_a45) {
        gv_gameSettings.lv_incomePeriod = ge_IncomePeriod__45;
    }
    else if (autoE1A13A2D_val == lv_a60) {
        gv_gameSettings.lv_incomePeriod = ge_IncomePeriod__60;
    }
    else if (autoE1A13A2D_val == lv_a75) {
        gv_gameSettings.lv_incomePeriod = ge_IncomePeriod__75;
    }
    else if (autoE1A13A2D_val == lv_a90) {
        gv_gameSettings.lv_incomePeriod = ge_IncomePeriod__90;
    }
    else {
    }
}

void gf_SetBounty (int lp_customValueRow) {
    // Variable Declarations
    int lv_dialogItem;
    int lv_disabled;
    int lv_a13;
    int lv_a14;
    int lv_a16;
    int lv_votedChoice;

    // Automatic Variable Declarations
    int autoD5FE9A7B_val;

    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_a13 = 1;
    lv_a14 = 2;
    lv_a16 = 3;

    // Implementation
    gf_CreateBasicVoteDialog(lp_customValueRow);
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_disabled);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_disabled] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_disabled] = gv_lastCreatedCheckBox;
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_a13);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_a13] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_a13] = gv_lastCreatedCheckBox;
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_a14);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_a14] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_a14] = gv_lastCreatedCheckBox;
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_a16);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_a16] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_a16] = gv_lastCreatedCheckBox;
    gf_CreateDeathTimer();
    lv_votedChoice = gf_getIndexOfLargestInteger(lp_customValueRow);
    autoD5FE9A7B_val = lv_votedChoice;
    if (autoD5FE9A7B_val == lv_disabled) {
        gv_gameSettings.lv_bounty = ge_Bounty_Disabled;
    }
    else if (autoD5FE9A7B_val == lv_a13) {
        gv_gameSettings.lv_bounty = ge_Bounty_Enabled13;
    }
    else if (autoD5FE9A7B_val == lv_a14) {
        gv_gameSettings.lv_bounty = ge_Bounty_Enabled14;
    }
    else if (autoD5FE9A7B_val == lv_a16) {
        gv_gameSettings.lv_bounty = ge_Bounty_Enabled16;
    }
    else {
    }
}

void gf_SetTerritorialDistibution (int lp_customValueRow) {
    // Variable Declarations
    int lv_dialogItem;
    int lv_splitByBase;
    int lv_oneBaseEach;
    int lv_splitByCountry;
    int lv_oneRegionEach;
    int lv_votedChoice;

    // Automatic Variable Declarations
    int autoFB62F857_val;

    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_oneBaseEach = 1;
    lv_splitByCountry = 2;
    lv_oneRegionEach = 3;

    // Implementation
    gf_CreateBasicVoteDialog(lp_customValueRow);
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_splitByBase);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_splitByBase] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_splitByBase] = gv_lastCreatedCheckBox;
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_oneBaseEach);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_oneBaseEach] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_oneBaseEach] = gv_lastCreatedCheckBox;
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_splitByCountry);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_splitByCountry] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_splitByCountry] = gv_lastCreatedCheckBox;
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_oneRegionEach);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_oneRegionEach] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_oneRegionEach] = gv_lastCreatedCheckBox;
    gf_CreateDeathTimer();
    lv_votedChoice = gf_getIndexOfLargestInteger(lp_customValueRow);
    autoFB62F857_val = lv_votedChoice;
    if (autoFB62F857_val == lv_splitByBase) {
        gv_gameSettings.lv_territorialDistribution = ge_TerritorialDistribution_RandomAllBases;
    }
    else if (autoFB62F857_val == lv_oneBaseEach) {
        gv_gameSettings.lv_territorialDistribution = ge_TerritorialDistribution_RandomSingleBase;
    }
    else if (autoFB62F857_val == lv_splitByCountry) {
        gv_gameSettings.lv_territorialDistribution = ge_TerritorialDistribution_RandomCountries;
    }
    else if (autoFB62F857_val == lv_oneRegionEach) {
        gv_gameSettings.lv_territorialDistribution = ge_TerritorialDistribution_RandomRegion;
    }
    else {
    }
}

void gf_SetVictoryCondition (int lp_customValueRow) {
    // Variable Declarations
    int lv_dialogItem;
    int lv_disabled;
    int lv_control60;
    int lv_control70;
    int lv_control80;
    int lv_votedChoice;

    // Automatic Variable Declarations
    int auto93BF6D29_val;

    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_control60 = 1;
    lv_control70 = 2;
    lv_control80 = 3;

    // Implementation
    gf_CreateBasicVoteDialog(lp_customValueRow);
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_disabled);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_disabled] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_disabled] = gv_lastCreatedCheckBox;
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_control60);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_control60] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_control60] = gv_lastCreatedCheckBox;
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_control70);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_control70] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_control70] = gv_lastCreatedCheckBox;
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_control80);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_control80] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_control80] = gv_lastCreatedCheckBox;
    gf_CreateDeathTimer();
    lv_votedChoice = gf_getIndexOfLargestInteger(lp_customValueRow);
    auto93BF6D29_val = lv_votedChoice;
    if (auto93BF6D29_val == lv_disabled) {
        gv_gameSettings.lv_victoryCondition = ge_VictoryCondition_Disabled;
    }
    else if (auto93BF6D29_val == lv_control60) {
        gv_gameSettings.lv_victoryCondition = ge_VictoryCondition__60;
    }
    else if (auto93BF6D29_val == lv_control70) {
        gv_gameSettings.lv_victoryCondition = ge_VictoryCondition__70;
    }
    else if (auto93BF6D29_val == lv_control80) {
        gv_gameSettings.lv_victoryCondition = ge_VictoryCondition__80;
    }
    else {
    }
}

void gf_SetConscripts (int lp_customValueRow) {
    // Variable Declarations
    int lv_dialogItem;
    int lv_enabled;
    int lv_disabled;
    int lv_votedChoice;

    // Automatic Variable Declarations
    int auto25582ED3_val;

    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_disabled = 1;

    // Implementation
    gf_CreateBasicVoteDialog(lp_customValueRow);
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_enabled);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_enabled] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_enabled] = gv_lastCreatedCheckBox;
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_disabled);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_disabled] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_disabled] = gv_lastCreatedCheckBox;
    gf_CreateDeathTimer();
    lv_votedChoice = gf_getIndexOfLargestInteger(lp_customValueRow);
    auto25582ED3_val = lv_votedChoice;
    if (auto25582ED3_val == lv_enabled) {
        gv_gameSettings.lv_conscripts = ge_Conscripts_Enabled;
    }
    else if (auto25582ED3_val == lv_disabled) {
        gv_gameSettings.lv_conscripts = ge_Conscripts_Disabled;
    }
    else {
    }
}

void gf_SetAllianceOption (int lp_customValueRow) {
    // Variable Declarations
    int lv_dialogItem;
    int lv_enabled;
    int lv_disabled;
    int lv_votedChoice;

    // Automatic Variable Declarations
    int auto865B62B8_val;

    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_disabled = 1;

    // Implementation
    gf_CreateBasicVoteDialog(lp_customValueRow);
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_enabled);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_enabled] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_enabled] = gv_lastCreatedCheckBox;
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_disabled);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_disabled] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_disabled] = gv_lastCreatedCheckBox;
    gf_CreateDeathTimer();
    lv_votedChoice = gf_getIndexOfLargestInteger(lp_customValueRow);
    auto865B62B8_val = lv_votedChoice;
    if (auto865B62B8_val == lv_enabled) {
        gv_gameSettings.lv_alliance = ge_Alliance_EnabledFree;
    }
    else if (auto865B62B8_val == lv_disabled) {
        gv_gameSettings.lv_alliance = ge_Alliance_DisabledFFA;
    }
    else {
    }
}

void gf_SetCard (int lp_customValueRow) {
    // Variable Declarations
    int lv_dialogItem;
    int lv_enabled;
    int lv_disabled;
    int lv_votedChoice;

    // Automatic Variable Declarations
    int auto74961D99_val;

    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_disabled = 1;

    // Implementation
    gf_CreateBasicVoteDialog(lp_customValueRow);
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_enabled);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_enabled] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_enabled] = gv_lastCreatedCheckBox;
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_disabled);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_disabled] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_disabled] = gv_lastCreatedCheckBox;
    gf_CreateDeathTimer();
    lv_votedChoice = gf_getIndexOfLargestInteger(lp_customValueRow);
    auto74961D99_val = lv_votedChoice;
    if (auto74961D99_val == lv_enabled) {
        gv_gameSettings.lv_cards = ge_Cards_Enabled;
    }
    else if (auto74961D99_val == lv_disabled) {
        gv_gameSettings.lv_cards = ge_Cards_Disabled;
    }
    else {
    }
}

void gf_SetVisibility (int lp_customValueRow) {
    // Variable Declarations
    int lv_dialogItem;
    int lv_fullMap;
    int lv_fogOfWar;
    int lv_votedChoice;

    // Automatic Variable Declarations
    int auto2413BC28_val;

    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_fogOfWar = 1;

    // Implementation
    gf_CreateBasicVoteDialog(lp_customValueRow);
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_fullMap);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_fullMap] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_fullMap] = gv_lastCreatedCheckBox;
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_fogOfWar);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_fogOfWar] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_fogOfWar] = gv_lastCreatedCheckBox;
    gf_CreateDeathTimer();
    lv_votedChoice = gf_getIndexOfLargestInteger(lp_customValueRow);
    auto2413BC28_val = lv_votedChoice;
    if (auto2413BC28_val == lv_fullMap) {
        gv_gameSettings.lv_visibility = ge_Visibility_AllVisible;
    }
    else if (auto2413BC28_val == lv_fogOfWar) {
        gv_gameSettings.lv_visibility = ge_Visibility_FogofWar;
    }
    else {
    }
}

void gf_SetAnonymous (int lp_customValueRow) {
    // Variable Declarations
    int lv_dialogItem;
    int lv_enabled;
    int lv_disabled;
    int lv_votedChoice;

    // Automatic Variable Declarations
    int auto63AB2854_val;

    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_disabled = 1;

    // Implementation
    gf_CreateBasicVoteDialog(lp_customValueRow);
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_enabled);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_enabled] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_enabled] = gv_lastCreatedCheckBox;
    DialogControlSetEnabled(gv_lastCreatedCheckBox, PlayerGroupAll(), false);
    gf_CreateBasicVoteDialogItem(lp_customValueRow, lv_disabled);
    gv_customSetting.lv_dialog_Item_Votes[lp_customValueRow][lv_disabled] = DialogControlLastCreated();
    gv_customSetting.lv_dialog_Item_CheckBox[lp_customValueRow][lv_disabled] = gv_lastCreatedCheckBox;
    gf_CreateDeathTimer();
    lv_votedChoice = gf_getIndexOfLargestInteger(lp_customValueRow);
    auto63AB2854_val = lv_votedChoice;
    if (auto63AB2854_val == lv_enabled) {
        gv_gameSettings.lv_anonymous = ge_Anonymous_Enabled;
    }
    else if (auto63AB2854_val == lv_disabled) {
        gv_gameSettings.lv_anonymous = ge_Anonymous_Disabled;
    }
    else {
    }
}

int gf_CheckVote (int lp_setting) {
    // Variable Declarations
    int[11] lv_voteCount;
    int lv_highestVotedSetting;
    int lv_i;
    int lv_n;
    int lv_countDublication;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((gv_customSetting.lv_string_Value[lp_setting][lv_i] != "")) {
        lv_i = (lv_i + 1);
    }
    lv_i = 0;
    while ((gv_customSetting.lv_string_Value[lp_setting][lv_i] != "")) {
        lv_highestVotedSetting = MaxI(lv_highestVotedSetting, lv_voteCount[lv_i]);
        lv_i = (lv_i + 1);
    }
    while ((gv_customSetting.lv_string_Value[lp_setting][lv_n] != "")) {
        if ((lv_highestVotedSetting == lv_voteCount[lv_n])) {
            lv_countDublication = (lv_countDublication + 1);
        }

        if ((lv_countDublication > 1)) {
            return gv_customSetting.lv_valueDefault[lv_n];
        }

        lv_n = (lv_n + 1);
    }
    lv_i = 0;
    while ((lv_highestVotedSetting != lv_voteCount[lv_i])) {
        lv_i = (lv_i + 1);
    }
    return lv_i;
}

void gf_ApplySetting () {
    // Automatic Variable Declarations
    // Implementation
    gf_ApplyIncomePeriod(gv_gameSettings.lv_incomePeriod);
    gf_ApplyBounty(gv_gameSettings.lv_bounty);
    gf_ApplyVictoryCondition(gv_gameSettings.lv_victoryCondition);
    gf_ApplyConscripts(gv_gameSettings.lv_conscripts);
    gf_ApplyAlliance(gv_gameSettings.lv_alliance);
    gf_ApplyCards(gv_gameSettings.lv_cards);
    gf_ApplyVisibility(gv_gameSettings.lv_visibility);
    gf_ApplyAnonymous(gv_gameSettings.lv_anonymous);
    gf_ApplyRanked();
    Wait(0.5, c_timeGame);
    gf_ApplyTerritorialDistribution(gv_gameSettings.lv_territorialDistribution);
}

void gf_ApplyIncomePeriod (int lp_parameter) {
    // Automatic Variable Declarations
    int autoFE2EA705_val;

    // Implementation
    gv_customSetting.lv_settingsString[gv_customSetting.lv_column_IncomePeriod] = "Income Period: ";
    gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_IncomePeriod] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_IncomePeriod][lp_parameter];
    autoFE2EA705_val = lp_parameter;
    if (autoFE2EA705_val == ge_IncomePeriod__45) {
        gv_gameInfo.lv_incomePeriod = 45;
    }
    else if (autoFE2EA705_val == ge_IncomePeriod__60) {
        gv_gameInfo.lv_incomePeriod = 60;
    }
    else if (autoFE2EA705_val == ge_IncomePeriod__75) {
        gv_gameInfo.lv_incomePeriod = 75;
    }
    else if (autoFE2EA705_val == ge_IncomePeriod__90) {
        gv_gameInfo.lv_incomePeriod = 90;
    }
    else {
    }
}

void gf_ApplyBounty (int lp_parameter) {
    // Automatic Variable Declarations
    int auto85BA527F_val;

    // Implementation
    gv_customSetting.lv_settingsString[gv_customSetting.lv_column_Bounty] = "Bounty: ";
    auto85BA527F_val = lp_parameter;
    if (auto85BA527F_val == ge_Bounty_Disabled) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_Bounty] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_Bounty][lp_parameter];
        gv_gameInfo.lv_bounty = ge_Bounty_Disabled;
    }
    else if (auto85BA527F_val == ge_Bounty_Enabled13) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_Bounty] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_Bounty][lp_parameter];
        gv_gameInfo.lv_bounty = ge_Bounty_Enabled13;
        gv_gameInfo.lv_bountyValue = 3.0;
    }
    else if (auto85BA527F_val == ge_Bounty_Enabled14) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_Bounty] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_Bounty][lp_parameter];
        gv_gameInfo.lv_bounty = ge_Bounty_Enabled14;
        gv_gameInfo.lv_bountyValue = 4.0;
    }
    else if (auto85BA527F_val == ge_Bounty_Enabled16) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_Bounty] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_Bounty][lp_parameter];
        gv_gameInfo.lv_bounty = ge_Bounty_Enabled16;
        gv_gameInfo.lv_bountyValue = 6.0;
    }
    else {
    }
}

trigger auto_gf_ApplyTerritorialDistribution_Trigger = null;
int auto_gf_ApplyTerritorialDistribution_lp_parameter;

void gf_ApplyTerritorialDistribution (int lp_parameter) {
    auto_gf_ApplyTerritorialDistribution_lp_parameter = lp_parameter;

    if (auto_gf_ApplyTerritorialDistribution_Trigger == null) {
        auto_gf_ApplyTerritorialDistribution_Trigger = TriggerCreate("auto_gf_ApplyTerritorialDistribution_TriggerFunc");
    }

    TriggerExecute(auto_gf_ApplyTerritorialDistribution_Trigger, false, false);
}

bool auto_gf_ApplyTerritorialDistribution_TriggerFunc (bool testConds, bool runActions) {
    int lp_parameter = auto_gf_ApplyTerritorialDistribution_lp_parameter;

    // Automatic Variable Declarations
    int auto02FC4E9A_val;

    // Implementation
    Wait(0.5, c_timeGame);
    gv_customSetting.lv_settingsString[gv_customSetting.lv_column_TerritorialDistribution] = "Territorial Distribution: ";
    auto02FC4E9A_val = lp_parameter;
    if (auto02FC4E9A_val == ge_TerritorialDistribution_RandomAllBases) {
        gf_RandomAllBases();
    }
    else if (auto02FC4E9A_val == ge_TerritorialDistribution_Random1v1) {
        gf_RandomAllBases1v1();
    }
    else if (auto02FC4E9A_val == ge_TerritorialDistribution_RandomSingleBase) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_TerritorialDistribution] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_TerritorialDistribution][lp_parameter];
        gf_RandomSingleBase();
    }
    else if (auto02FC4E9A_val == ge_TerritorialDistribution_RandomCountries) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_TerritorialDistribution] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_TerritorialDistribution][lp_parameter];
        gf_RandomCountries();
    }
    else if (auto02FC4E9A_val == ge_TerritorialDistribution_RandomRegion) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_TerritorialDistribution] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_TerritorialDistribution][lp_parameter];
        gf_RandomRegion();
    }
    else {
    }
    return true;
}

void gf_ApplyVictoryCondition (int lp_parameter) {
    // Automatic Variable Declarations
    int auto0A988DCD_val;

    // Implementation
    gv_customSetting.lv_settingsString[gv_customSetting.lv_column_VictoryCondition] = "Victory Condition: ";
    auto0A988DCD_val = lp_parameter;
    if (auto0A988DCD_val == ge_VictoryCondition_Disabled) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_VictoryCondition] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_VictoryCondition][lp_parameter];
        gv_gameInfo.lv_victoryConditionType = ge_WinConditions_Disabled;
        gv_gameInfo.lv_victoryConditionPercentage = 110;
    }
    else if (auto0A988DCD_val == ge_VictoryCondition__60) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_VictoryCondition] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_VictoryCondition][lp_parameter];
        gv_gameInfo.lv_victoryConditionType = ge_WinConditions_Percent;
        gv_gameInfo.lv_victoryConditionPercentage = 60;
    }
    else if (auto0A988DCD_val == ge_VictoryCondition__70) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_VictoryCondition] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_VictoryCondition][lp_parameter];
        gv_gameInfo.lv_victoryConditionType = ge_WinConditions_Percent;
        gv_gameInfo.lv_victoryConditionPercentage = 70;
    }
    else if (auto0A988DCD_val == ge_VictoryCondition__80) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_VictoryCondition] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_VictoryCondition][lp_parameter];
        gv_gameInfo.lv_victoryConditionType = ge_WinConditions_Percent;
        gv_gameInfo.lv_victoryConditionPercentage = 80;
    }
    else {
    }
}

void gf_ApplyConscripts (int lp_parameter) {
    // Automatic Variable Declarations
    int autoE1B1E874_val;

    // Implementation
    gv_customSetting.lv_settingsString[gv_customSetting.lv_column_Conscripts] = "Conscripts: ";
    autoE1B1E874_val = lp_parameter;
    if (autoE1B1E874_val == ge_Conscripts_Enabled) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_Conscripts] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_Conscripts][lp_parameter];
        gv_gameInfo.lv_conscripts = ge_Spawn_Enabled;
    }
    else if (autoE1B1E874_val == ge_Conscripts_Disabled) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_Conscripts] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_Conscripts][lp_parameter];
        gv_gameInfo.lv_conscripts = ge_Spawn_Disabled;
    }
    else {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_Conscripts] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_Conscripts][lp_parameter];
        gv_gameInfo.lv_conscripts = ge_Spawn_Enabled;
    }
}

void gf_ApplyAlliance (int lp_parameter) {
    // Automatic Variable Declarations
    int auto3864E69F_val;

    // Implementation
    gv_customSetting.lv_settingsString[gv_customSetting.lv_column_Alliance] = "Alliance: ";
    auto3864E69F_val = lp_parameter;
    if (auto3864E69F_val == ge_Alliance_EnabledFree) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_Alliance] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_Alliance][lp_parameter];
        gv_gameInfo.lv_alliance = ge_Alliance_EnabledFree;
    }
    else if (auto3864E69F_val == ge_Alliance_DisabledFFA) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_Alliance] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_Alliance][lp_parameter];
        gv_gameInfo.lv_alliance = ge_Alliance_DisabledFFA;
    }
    else {
    }
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
}

void gf_ApplyCards (int lp_parameter) {
    // Automatic Variable Declarations
    int auto8742DCB4_val;

    // Implementation
    gv_customSetting.lv_settingsString[gv_customSetting.lv_column_Cards] = "Cards: ";
    auto8742DCB4_val = lp_parameter;
    if (auto8742DCB4_val == ge_Cards_Enabled) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_Cards] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_Cards][lp_parameter];
        gv_gameInfo.lv_card = ge_Cards_Enabled;
    }
    else if (auto8742DCB4_val == ge_Cards_Disabled) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_Cards] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_Cards][lp_parameter];
        gv_gameInfo.lv_card = ge_Cards_Disabled;
    }
    else {
    }
}

void gf_ApplyVisibility (int lp_parameter) {
    // Automatic Variable Declarations
    int auto81ED3A96_val;

    // Implementation
    gv_customSetting.lv_settingsString[gv_customSetting.lv_column_Visibility] = "Visibility: ";
    auto81ED3A96_val = lp_parameter;
    if (auto81ED3A96_val == ge_Visibility_AllVisible) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_Visibility] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_Visibility][lp_parameter];
        gv_gameInfo.lv_visibility = ge_Visibility_AllVisible;
    }
    else if (auto81ED3A96_val == ge_Visibility_FogofWar) {
        VisEnable(c_visTypeMask, true);
        VisEnable(c_visTypeFog, true);
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_Visibility] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_Visibility][lp_parameter];
        gv_gameInfo.lv_visibility = ge_Visibility_FogofWar;
    }
    else {
    }
}

void gf_ApplyAnonymous (int lp_parameter) {
    // Automatic Variable Declarations
    int autoF6B29023_val;
    playergroup autoF27D0604_g;
    int autoF27D0604_var;

    // Implementation
    gv_customSetting.lv_settingsString[gv_customSetting.lv_column_Anonymous] = "Anonymous: ";
    autoF6B29023_val = lp_parameter;
    if (autoF6B29023_val == ge_Anonymous_Enabled) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_Anonymous] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_Anonymous][lp_parameter];
        gv_gameInfo.lv_anonymous = ge_Anonymous_Enabled;
        autoF27D0604_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, true);
        autoF27D0604_var = -1;
        while (true) {
            autoF27D0604_var = PlayerGroupNextPlayer(autoF27D0604_g, autoF27D0604_var);
            if (autoF27D0604_var < 0) { break; }
            gv_player[autoF27D0604_var].lv_nickname = StringToText("Anonymous");
        }
    }
    else if (autoF6B29023_val == ge_Anonymous_Disabled) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_Anonymous] = gv_customSetting.lv_string_Value[gv_customSetting.lv_column_Anonymous][lp_parameter];
        gv_gameInfo.lv_anonymous = ge_Anonymous_Disabled;
    }
    else {
    }
}

void gf_ApplyRanked () {
    // Variable Declarations
    int lv_else;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_else = 1;

    // Implementation
    gv_customSetting.lv_settingsString[gv_customSetting.lv_column_Ranked] = "Ranked: ";
    if ((GameAttributeGameValue("1") == "0001") && (PlayerGroupCount(gf_returnPlayerGroup(PlayerGroupAll(), true, false, false)) >= gv_gameInfo.lv_minPlayersRanked)) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_Ranked] = "Enabled";
        gv_gameInfo.lv_ranked = ge_Ranked_Enabled;
        gf_ChatMessage(1, StringToText("<c val=\"CCCC33\">Game</c> - This is a  <c val=\"00FF00\">RANKED</c> game"), 2);
    }
    else if ((GameAttributeGameValue("1") == "0007") && (PlayerGroupCount(gf_returnPlayerGroup(GameAttributePlayersForTeam(1), true, false, false)) == 1) && (PlayerGroupCount(gf_returnPlayerGroup(GameAttributePlayersForTeam(2), true, false, false)) == 1) && (PlayerGroupCount(PlayerGroupAll()) >= gv_gameInfo.lv_minPlayersRanked)) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_Ranked] = "Disabled";
        gv_gameInfo.lv_ranked1v1 = ge_Ranked_Enabled;
        gf_ChatMessage(1, StringToText("<c val=\"CCCC33\">Game</c> - This is a  <c val=\"00FF00\">RANKED</c> 1v1 game"), 2);
    }
    else if ((lv_else == 1)) {
        gv_customSetting.lv_settingsValue[gv_customSetting.lv_column_Ranked] = "Disabled";
        gv_gameInfo.lv_ranked = ge_Ranked_Disabled;
        gf_ChatMessage(1, StringToText("<c val=\"CCCC33\">Game</c> - This is a  <c val=\"FF0000\">UNRANKED</c> game"), 2);
    }
}

void gf_BaseDistribution (int lp_parameter) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_parameter == ge_TerritorialDistribution_RandomSingleBase)) {
        gf_RandomSingleBase();
    }
    else if ((lp_parameter == ge_TerritorialDistribution_RandomAllBases)) {
        gf_RandomAllBases();
    }
    else if ((lp_parameter == ge_TerritorialDistribution_RandomCountries)) {
        gf_RandomCountries();
    }
    else if ((lp_parameter == ge_TerritorialDistribution_RandomRegion)) {
        gf_RandomRegion();
    }
}

void gf_SetupBase (int lp_player, int lp_integer) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_point = UnitGetPosition(gv_base[lp_integer].lv_base);

    // Implementation
    gv_player[0].lv_bases = (gv_player[0].lv_bases + 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_TerranSmall", 0, lp_player, PointWithOffsetPolar(lv_point, 1.5, 320.0));
    UnitGroupAdd(gv_gameInfo.lv_notBarracks, UnitLastCreated());
    gv_base[lp_integer].lv_circle = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "NoDefenderAura", UnitLastCreated(), 1);
    UnitSetCustomValue(UnitLastCreated(), 11, IntToFixed(lp_integer));
    UnitSetCustomValue(UnitLastCreated(), 10, UnitGetCustomValue(gv_base[lp_integer].lv_base, 10));
    gv_base[lp_integer].lv_position = UnitGetPosition(gv_base[lp_integer].lv_circle);
    UnitCreate(1, "DestructibleKorhalFlag", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(lv_point, 0.8, 60.0), 90.0);
    gv_base[lp_integer].lv_flag = UnitLastCreated();
    UnitGroupAdd(gv_gameInfo.lv_notBarracks, UnitLastCreated());
    UnitGroupAdd(gv_gameInfo.lv_flagGroup, UnitLastCreated());
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_TextureSelectByID("Nothing"));
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, lp_player, PointWithOffsetPolar(lv_point, 1.5, 320.0));
    UnitGroupAdd(gv_gameInfo.lv_notBarracks, UnitLastCreated());
    UnitGroupAdd(gv_army, UnitLastCreated());
    gf_AchieveChangeUnit(UnitGetOwner(UnitLastCreated()), UnitLastCreated());
    gv_base[lp_integer].lv_defender = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "Defender", UnitLastCreated(), 1);
    UnitSetCustomValue(UnitLastCreated(), 12, 1.0);
    UnitGroupAdd(gv_gameInfo.lv_notBarracks, UnitLastCreated());
    gf_setCustomValueOfUnit(UnitLastCreated(), lp_integer);
    gf_AddUnitEntersUnitRegionEvent(gt_CheckNoDefender, RegionCircle(PointWithOffsetPolar(lv_point, 1.5, 320.0), 0.25));
}

void gf_PingLocationofBases (int lp_playa) {
    // Automatic Variable Declarations
    unitgroup auto4D87ED7D_g;
    int auto4D87ED7D_u;
    unit auto4D87ED7D_var;
    playergroup auto2D5683A9_g;
    int auto2D5683A9_var;

    // Implementation
    if ((gv_profile.lv_settingsProfileValue[3][lp_playa] == 1)) {
        auto4D87ED7D_g = UnitGroup("Marine", lp_playa, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4D87ED7D_u = UnitGroupCount(auto4D87ED7D_g, c_unitCountAll);
        for (;; auto4D87ED7D_u -= 1) {
            auto4D87ED7D_var = UnitGroupUnitFromEnd(auto4D87ED7D_g, auto4D87ED7D_u);
            if (auto4D87ED7D_var == null) { break; }
            libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(lp_playa), "PingSimple", UnitGetPosition(auto4D87ED7D_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_playa, true)), 25.0, 270.0);
        }
    }

    auto2D5683A9_g = gf_returnPlayerGroup(PlayerGroupAll(), true, false, false);
    auto2D5683A9_var = -1;
    while (true) {
        auto2D5683A9_var = PlayerGroupNextPlayer(auto2D5683A9_g, auto2D5683A9_var);
        if (auto2D5683A9_var < 0) { break; }
    }
}

void gf_RandomAllBases () {
    // Variable Declarations
    int lv__23;
    int lv_player;
    bool lv_listDone;
    int lv_i;
    int lv_i2;
    int lv_index;
    int lv_random;
    int lv_endingIndexPlayer;
    int[13] lv_randomList;
    bool lv_indexSafe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = 13;

    // Implementation
    if ((PlayerGroupCount(gf_returnPlayerGroup(PlayerGroupAll(), true, true, false)) != 1)) {
        while ((lv__23 <= gv_gameInfo.lv_maxBases)) {
            if ((lv_index == 13)) {
                lv_i = 1;
                while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                    lv_random = 0;
                    while ((lv_random == 0)) {
                        lv_i2 = 1;
                        lv_random = RandomInt(1, gv_gameInfo.lv_maxPlayers);
                        if ((PlayerGroupHasPlayer(gf_returnPlayerGroup(PlayerGroupAll(), true, true, false), lv_random) == true)) {
                            while ((lv_i == 1)) {
                                if ((lv_random != lv_endingIndexPlayer) && (PlayerGroupHasPlayer(gf_returnPlayerGroup(PlayerGroupAll(), true, true, false), lv_random) == true)) {
                                    break;
                                }
                                else {
                                    lv_random = RandomInt(1, gv_gameInfo.lv_maxPlayers);
                                }
                            }
                            while ((lv_i2 <= gv_gameInfo.lv_maxPlayers)) {
                                if ((lv_randomList[lv_i2] == lv_random)) {
                                    lv_random = 0;
                                }

                                lv_i2 = (lv_i2 + 1);
                            }
                        }
                        else {
                            lv_random = 0;
                        }
                    }
                    lv_randomList[lv_i] = lv_random;
                    if ((lv_i == PlayerGroupCount(gf_returnPlayerGroup(PlayerGroupActive(), true, true, false)))) {
                        break;
                    }

                    lv_i = (lv_i + 1);
                }
                lv_index = 1;
            }

            lv_indexSafe = false;
            while ((lv_indexSafe == false)) {
                if ((PlayerGroupHasPlayer(gf_returnPlayerGroup(PlayerGroupAll(), true, true, false), lv_randomList[lv_index]) == true) && (lv_randomList[lv_index] != 0)) {
                    lv_indexSafe = true;
                }
                else {
                    lv_randomList[lv_index] = 0;
                    lv_index = (lv_index + 1);
                }
                if ((lv_index == 13)) {
                    break;
                }

            }
            if ((lv_indexSafe == true)) {
                if ((gv_country[gf_getCustomUnitValue(gv_base[lv__23].lv_base, 10)].lv_singleBaseCountry == true)) {
                    lv__23 = (lv__23 + 1);
                    lv_endingIndexPlayer = lv_randomList[lv_index];
                    lv_randomList[lv_index] = 0;
                    lv_index = (lv_index + 1);
                }
                else {
                    gf_SetupBaseOwnership(lv_randomList[lv_index], lv__23);
                    lv__23 = (lv__23 + 1);
                    lv_endingIndexPlayer = lv_randomList[lv_index];
                    lv_randomList[lv_index] = 0;
                    lv_index = (lv_index + 1);
                }
            }

        }
    }
    else {
        while ((lv__23 <= gv_gameInfo.lv_maxCountries)) {
            lv_player = PlayerGroupPlayer(PlayerGroupActive(), 1);
            gf_SetupCountryOwnership(lv_player, lv__23);
            lv__23 = (lv__23 + 1);
        }
    }
}

void gf_RandomAllBases1v1 () {
    // Variable Declarations
    int lv__23;
    int lv_player;
    bool lv_listDone;
    int lv_i;
    int lv_i2;
    int lv_index;
    int lv_random;
    int lv_endingIndexPlayer;
    int[13] lv_randomList;
    bool lv_indexSafe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = 13;

    // Implementation
    if ((PlayerGroupCount(gf_returnPlayerGroup(PlayerGroupAll(), true, true, false)) != 1)) {
        while ((lv__23 <= gv_gameInfo.lv_maxBases)) {
            if ((lv_index == 13)) {
                lv_i = 1;
                while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                    lv_random = 0;
                    while ((lv_random == 0)) {
                        lv_i2 = 1;
                        lv_random = RandomInt(1, gv_gameInfo.lv_maxPlayers);
                        if ((PlayerGroupHasPlayer(gf_returnPlayerGroup(PlayerGroupAll(), true, true, false), lv_random) == true)) {
                            while ((lv_i == 1)) {
                                if ((lv_random != lv_endingIndexPlayer) && (PlayerGroupHasPlayer(gf_returnPlayerGroup(PlayerGroupAll(), true, true, false), lv_random) == true)) {
                                    break;
                                }
                                else {
                                    lv_random = RandomInt(1, gv_gameInfo.lv_maxPlayers);
                                }
                            }
                            while ((lv_i2 <= gv_gameInfo.lv_maxPlayers)) {
                                if ((lv_randomList[lv_i2] == lv_random)) {
                                    lv_random = 0;
                                }

                                lv_i2 = (lv_i2 + 1);
                            }
                        }
                        else {
                            lv_random = 0;
                        }
                    }
                    lv_randomList[lv_i] = lv_random;
                    if ((lv_i == PlayerGroupCount(gf_returnPlayerGroup(PlayerGroupActive(), true, true, false)))) {
                        break;
                    }

                    lv_i = (lv_i + 1);
                }
                lv_index = 1;
            }

            lv_indexSafe = false;
            while ((lv_indexSafe == false)) {
                if ((PlayerGroupHasPlayer(gf_returnPlayerGroup(PlayerGroupAll(), true, true, false), lv_randomList[lv_index]) == true) && (lv_randomList[lv_index] != 0)) {
                    lv_indexSafe = true;
                }
                else {
                    lv_randomList[lv_index] = 0;
                    lv_index = (lv_index + 1);
                }
                if ((lv_index == 13)) {
                    break;
                }

            }
            if ((lv_indexSafe == true)) {
                if ((gv_country[gf_getCustomUnitValue(gv_base[lv__23].lv_base, 10)].lv_singleBaseCountry == true)) {
                    lv__23 = (lv__23 + 1);
                    lv_endingIndexPlayer = lv_randomList[lv_index];
                    lv_randomList[lv_index] = 0;
                    lv_index = (lv_index + 1);
                }
                else {
                    if (((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), lv_randomList[lv_index]) == true) || (PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), lv_randomList[lv_index]) == true))) {
                        gf_SetupBaseOwnership(lv_randomList[lv_index], lv__23);
                    }

                    lv__23 = (lv__23 + 1);
                    lv_endingIndexPlayer = lv_randomList[lv_index];
                    lv_randomList[lv_index] = 0;
                    lv_index = (lv_index + 1);
                }
            }

        }
    }
    else {
        while ((lv__23 <= gv_gameInfo.lv_maxCountries)) {
            lv_player = PlayerGroupPlayer(PlayerGroupActive(), 1);
            gf_SetupCountryOwnership(lv_player, lv__23);
            lv__23 = (lv__23 + 1);
        }
    }
}

void gf_RandomSingleBase () {
    // Variable Declarations
    int lv_baseid;
    int lv_baseid2;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    playergroup auto22D4179B_g;
    int auto22D4179B_var;

    // Variable Initialization
    lv_playerGroup = gf_returnPlayerGroup(PlayerGroupAll(), true, true, false);

    // Implementation
    auto22D4179B_g = lv_playerGroup;
    auto22D4179B_var = -1;
    while (true) {
        auto22D4179B_var = PlayerGroupNextPlayer(auto22D4179B_g, auto22D4179B_var);
        if (auto22D4179B_var < 0) { break; }
        while (true) {
            lv_baseid = RandomInt(1, gv_gameInfo.lv_maxBases);
            if ((UnitGroupCount(gv_country[gf_getCustomUnitValue(gv_base[lv_baseid].lv_base, 10)].lv_bases, c_unitCountAlive) == 2) && (UnitGroupCount(UnitGroupFilterPlayer(gv_country[gf_getCustomUnitValue(gv_base[lv_baseid].lv_base, 10)].lv_bases, 0, 0), c_unitCountAlive) == 2) && (gv_country[gf_getCustomUnitValue(gv_base[lv_baseid].lv_base, 10)].lv_illegibleStartingCountry == false)) {
                break;
            }

        }
        gf_SetupBaseOwnership(auto22D4179B_var, lv_baseid);
    }
}

void gf_RandomCountries () {
    // Variable Declarations
    int lv__23;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = gf_getNextActivePlayer(RandomInt(1, 12), true);

    // Implementation
    while ((lv__23 <= gv_gameInfo.lv_maxCountries)) {
        if ((lv__23 != 27)) {
            lv_player = gf_getNextActivePlayer(lv_player, true);
            gf_SetupCountryOwnership(lv_player, lv__23);
        }

        lv__23 = (lv__23 + 1);
    }
}

void gf_RandomRegion () {
    // Variable Declarations
    int lv__23;
    int lv_i;
    unit lv_unit;
    unitgroup lv_uG;
    int lv_region;

    // Automatic Variable Declarations
    playergroup autoE1FBB322_g;
    int autoE1FBB322_var;
    playergroup auto64889898_g;
    int auto64889898_var;
    unitgroup autoED47A5C8_g;
    int autoED47A5C8_u;
    unit autoED47A5C8_var;

    // Variable Initialization
    lv__23 = 1;
    lv_i = 1;
    lv_uG = UnitGroupEmpty();

    // Implementation
    while ((lv_i <= 12)) {
        UnitGroupAdd(lv_uG, gv_country[lv_i].lv_spawnStructure);
        lv_i = (1 + lv_i);
    }
    lv_i = 1;
    autoE1FBB322_g = gf_returnPlayerGroup(gv_gameInfo.lv_playingPlayers, true, true, false);
    autoE1FBB322_var = -1;
    while (true) {
        autoE1FBB322_var = PlayerGroupNextPlayer(autoE1FBB322_g, autoE1FBB322_var);
        if (autoE1FBB322_var < 0) { break; }
        lv_unit = UnitGroupRandomUnit(lv_uG, c_unitCountAlive);
        UnitGroupRemove(lv_uG, lv_unit);
        while ((lv_i <= 12)) {
            if ((lv_unit == gv_country[lv_i].lv_spawnStructure)) {
                lv_region = lv_i;
            }

            lv_i = (1 + lv_i);
        }
        while ((lv__23 <= gv_gameInfo.lv_maxCountries)) {
            if ((gv_country[lv__23].lv_region == lv_region)) {
                gf_SetupCountryOwnership(autoE1FBB322_var, lv__23);
            }

            lv__23 = (1 + lv__23);
        }
        lv__23 = 1;
        lv_i = 1;
    }
    auto64889898_g = gf_returnPlayerGroup(gv_gameInfo.lv_playingPlayers, true, true, false);
    auto64889898_var = -1;
    while (true) {
        auto64889898_var = PlayerGroupNextPlayer(auto64889898_g, auto64889898_var);
        if (auto64889898_var < 0) { break; }
        autoED47A5C8_g = UnitGroup("SpawnZone", auto64889898_var, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoED47A5C8_u = UnitGroupCount(autoED47A5C8_g, c_unitCountAll);
        for (;; autoED47A5C8_u -= 1) {
            autoED47A5C8_var = UnitGroupUnitFromEnd(autoED47A5C8_g, autoED47A5C8_u);
            if (autoED47A5C8_var == null) { break; }
            UnitControlGroupAddUnit(auto64889898_var, 9, autoED47A5C8_var);
        }
    }
}

void gf_SetupBaseOwnership (int lp_player, int lp_integer) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetOwner(gv_base[lp_integer].lv_base, lp_player, true);
    UnitIssueOrder(gv_base[lp_integer].lv_base, OrderTargetingUnit(AbilityCommand("Rally", 0), gv_base[lp_integer].lv_base), c_orderQueueReplace);
    UnitSetOwner(gv_base[lp_integer].lv_circle, lp_player, true);
    UnitSetOwner(gv_base[lp_integer].lv_defender, lp_player, true);
    UnitSetOwner(gv_base[lp_integer].lv_flag, lp_player, true);
    gv_player[lp_player].lv_bases = (gv_player[lp_player].lv_bases + 1);
    ActorSend(libNtve_gf_MainActorofUnit(gv_base[lp_integer].lv_flag), libNtve_gf_TextureSelectByID(gv_country[gv_player[lp_player].lv_homeCountry].lv_flagTexture));
    libNtve_gf_AttachActorToUnit(gv_base[lp_integer].lv_defender, "TimeWarpLaunch", "Ref_Origin");
}

void gf_SetupCountryOwnership (int lp_player, int lp_integer) {
    // Automatic Variable Declarations
    unitgroup auto393A8683_g;
    int auto393A8683_u;
    unit auto393A8683_var;

    // Implementation
    UnitSetOwner(gv_country[lp_integer].lv_spawnStructure, lp_player, true);
    auto393A8683_g = gv_country[lp_integer].lv_bases;
    auto393A8683_u = UnitGroupCount(auto393A8683_g, c_unitCountAll);
    for (;; auto393A8683_u -= 1) {
        auto393A8683_var = UnitGroupUnitFromEnd(auto393A8683_g, auto393A8683_u);
        if (auto393A8683_var == null) { break; }
        gf_SetupBaseOwnership(lp_player, FixedToInt(UnitGetCustomValue(auto393A8683_var, 11)));
    }
    gv_country[lp_integer].lv_owner = lp_player;
    gv_player[lp_player].lv_bases = (gv_player[lp_player].lv_bases + gv_country[lp_integer].lv_income);
    gv_player[0].lv_bases = (gv_player[0].lv_bases - gv_country[lp_integer].lv_income);
}

void gf_BankPreload () {
    // Automatic Variable Declarations
    // Implementation
}

void gf_BankOpen () {
    // Automatic Variable Declarations
    // Implementation
    BankLoad("RiskRevulsionv3", 1);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_bank.lv_file[1] = BankLastCreated();
    BankLoad("RiskRevulsionv3", 2);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_bank.lv_file[2] = BankLastCreated();
    BankLoad("RiskRevulsionv3", 3);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_bank.lv_file[3] = BankLastCreated();
    BankLoad("RiskRevulsionv3", 4);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_bank.lv_file[4] = BankLastCreated();
    BankLoad("RiskRevulsionv3", 5);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_bank.lv_file[5] = BankLastCreated();
    BankLoad("RiskRevulsionv3", 6);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_bank.lv_file[6] = BankLastCreated();
    BankLoad("RiskRevulsionv3", 7);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_bank.lv_file[7] = BankLastCreated();
    BankLoad("RiskRevulsionv3", 8);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_bank.lv_file[8] = BankLastCreated();
    BankLoad("RiskRevulsionv3", 9);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_bank.lv_file[9] = BankLastCreated();
    BankLoad("RiskRevulsionv3", 10);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_bank.lv_file[10] = BankLastCreated();
    BankLoad("RiskRevulsionv3", 11);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_bank.lv_file[11] = BankLastCreated();
    BankLoad("RiskRevulsionv3", 12);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_bank.lv_file[12] = BankLastCreated();
}

void gf_BankLoad (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_i2;
    int lv_i3;
    int lv_i4;
    string lv_playerOverall;
    string lv_rankingOverall;
    fixed lv_iTemp;
    int lv_banned;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;
    lv_i2 = 1;
    lv_i3 = 1;
    lv_playerOverall = "";
    lv_rankingOverall = "";

    // Implementation
    if ((BankSectionExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer) == true) && (BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_Win2) == true) && (BankVerify(gv_bank.lv_file[lp_player]) == true)) {
        gv_player[lp_player].lv_win = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_Win2);
        gv_player[lp_player].lv_loses = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_Win23);
        gv_player[lp_player].lv_kills = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_Win24);
        gv_player[lp_player].lv_deaths = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_Win25);
        gv_player[lp_player].lv_killed = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_Win27);
        gv_player[lp_player].lv_lost = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_Win26);
        gv_player[lp_player].lv_currentELO = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_playerELO);
        gv_player[lp_player].lv_currentELO1v1 = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_playerELO1v1);
        gv_player[lp_player].lv_cardKey = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_playerCardKey);
        gv_player[lp_player].lv_fastestWin = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_playerFastestWin);
        if ((gv_player[lp_player].lv_currentELO <= 0)) {
            gv_player[lp_player].lv_currentELO = 1000;
        }

        if ((gv_player[lp_player].lv_currentELO1v1 <= 0)) {
            gv_player[lp_player].lv_currentELO1v1 = 1000;
        }

        gv_player[lp_player].lv_name = BankValueGetAsString(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_Win252);
        if ((BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2522) == true)) {
            gv_profile.lv_settingsProfileValue[1][lp_player] = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2522);
        }
        else {
            gv_profile.lv_settingsProfileValue[1][lp_player] = 1;
        }
        if ((BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2523) == true)) {
            gv_profile.lv_settingsProfileValue[2][lp_player] = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2523);
        }
        else {
            gv_profile.lv_settingsProfileValue[2][lp_player] = 1;
        }
        if ((BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2524) == true)) {
            gv_profile.lv_settingsProfileValue[3][lp_player] = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2524);
        }
        else {
            gv_profile.lv_settingsProfileValue[3][lp_player] = 1;
        }
        if ((BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2529) == true)) {
            gv_profile.lv_settingsProfileValue[4][lp_player] = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2529);
        }
        else {
            gv_profile.lv_settingsProfileValue[4][lp_player] = 1;
        }
        if ((BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2536) == true)) {
            gv_profile.lv_settingsProfileValue[5][lp_player] = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2536);
        }
        else {
            gv_profile.lv_settingsProfileValue[5][lp_player] = 1;
        }
        if ((BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2537) == true)) {
            gv_profile.lv_settingsProfileValue[6][lp_player] = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2537);
        }
        else {
            gv_profile.lv_settingsProfileValue[6][lp_player] = 1;
        }
        if ((BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2525) == true)) {
            gv_profile.lv_achieveUnitValue[1][lp_player] = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2525);
        }
        else {
            gv_profile.lv_achieveUnitValue[1][lp_player] = 0;
        }
        if ((BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2541) == true)) {
            gv_profile.lv_achieveUnitValue[2][lp_player] = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2541);
        }
        else {
            gv_profile.lv_achieveUnitValue[2][lp_player] = 0;
        }
        if ((BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2539) == true)) {
            gv_profile.lv_achieveUnitValue[3][lp_player] = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2539);
        }
        else {
            gv_profile.lv_achieveUnitValue[3][lp_player] = 0;
        }
        if ((BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2526) == true)) {
            gv_profile.lv_achieveUnitValue[4][lp_player] = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2526);
        }
        else {
            gv_profile.lv_achieveUnitValue[4][lp_player] = 0;
        }
        if ((BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2540) == true)) {
            gv_profile.lv_achieveUnitValue[5][lp_player] = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2540);
        }
        else {
            gv_profile.lv_achieveUnitValue[5][lp_player] = 0;
        }
        if ((BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2527) == true)) {
            gv_profile.lv_achieveUnitValue[6][lp_player] = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2527);
        }
        else {
            gv_profile.lv_achieveUnitValue[6][lp_player] = 0;
        }
        if ((BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2538) == true)) {
            gv_profile.lv_achieveUnitValue[7][lp_player] = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2538);
        }
        else {
            gv_profile.lv_achieveUnitValue[7][lp_player] = 0;
        }
        if ((BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2528) == true)) {
            gv_profile.lv_achieveUnitValue[8][lp_player] = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2528);
        }
        else {
            gv_profile.lv_achieveUnitValue[8][lp_player] = 0;
        }
        if ((BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2530) == true)) {
            gv_profile.lv_achieveUnitValue[9][lp_player] = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2530);
        }
        else {
            gv_profile.lv_achieveUnitValue[9][lp_player] = 0;
        }
        if ((BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2542) == true)) {
            gv_profile.lv_achieveUnitValue[10][lp_player] = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2542);
        }
        else {
            gv_profile.lv_achieveUnitValue[10][lp_player] = 0;
        }
        if ((BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2532) == true)) {
            gv_profile.lv_achieveUnitValue[11][lp_player] = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2532);
        }
        else {
            gv_profile.lv_achieveUnitValue[11][lp_player] = 0;
        }
        if ((BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2533) == true)) {
            gv_profile.lv_achieveUnitValue[12][lp_player] = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2533);
        }
        else {
            gv_profile.lv_achieveUnitValue[12][lp_player] = 0;
        }
        if ((BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2534) == true)) {
            gv_profile.lv_achieveUnitValue[13][lp_player] = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2534);
        }
        else {
            gv_profile.lv_achieveUnitValue[13][lp_player] = 0;
        }
        if ((BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2531) == true)) {
            gv_player[lp_player].lv_playedTutorial = BankValueGetAsFlag(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2531);
        }
        else {
            gv_player[lp_player].lv_playedTutorial = false;
        }
        if ((BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2535) == true)) {
            gv_profile.lv_achieveDonateValue[lp_player] = BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2535);
        }
        else {
            gv_profile.lv_achieveDonateValue[lp_player] = 0;
        }
        BankSectionRemove(gv_bank.lv_file[lp_player], "978125");
        BankSectionRemove(gv_bank.lv_file[lp_player], "978126");
    }
    else {
        if ((BankSectionExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer) == false) && (BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_Win2) == false)) {
            gv_gameInfo.lv_newbInGame = true;
        }
        else {
            if ((BankSectionExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer) == true) && (BankKeyExists(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_Win2) == true) && (BankVerify(gv_bank.lv_file[lp_player]) == false)) {
                DialogCreate(500, 120, c_anchorTopLeft, 0, 0, true);
                DialogSetImageVisible(DialogLastCreated(), false);
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorTop, 0, 0, StringToText(""), "Assets\\Textures\\ui_camapaignmenu_dialogbox_base.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 50, c_anchorTop, 20, 20, StringToText("Error! Your Bank file is corrupted. Please go to risk.udmod.com with this replay!"), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 50, c_anchorTopLeft, 20, 65, StringToText((IntToString(BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_Win2)) + " :: " + IntToString(BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_Win23)) + " ")), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 50, c_anchorTopLeft, 20, 90, StringToText((IntToString(BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_Win24)) + " :: " + IntToString(BankValueGetAsInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_Win25)) + " ")), ColorWithAlpha(0,0,0,0), false, 2.0);
                DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_player), true);
                BankRemove(gv_bank.lv_file[lp_player]);
                GameOver(lp_player, c_gameOverTie, false, true);
            }

        }
    }
}

void gf_BankSave (int lp_player, bool lp_leaving) {
    // Variable Declarations
    int lv_i;
    string lv_tempOverall;
    string lv_tempOverall2;
    string lv_tempOverall3;
    string lv_mainOverall;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;
    lv_tempOverall = "";
    lv_tempOverall2 = "";
    lv_tempOverall3 = "";
    lv_mainOverall = "";

    // Implementation
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_Win2, gv_player[lp_player].lv_win);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_Win23, gv_player[lp_player].lv_loses);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_Win24, gv_player[lp_player].lv_kills);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_Win25, gv_player[lp_player].lv_deaths);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_Win27, gv_player[lp_player].lv_killed);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_Win26, gv_player[lp_player].lv_lost);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_playerELO, gv_player[lp_player].lv_currentELO);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_playerELO1v1, gv_player[lp_player].lv_currentELO1v1);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_playerCardKey, gv_player[lp_player].lv_cardKey);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_playerFastestWin, gv_player[lp_player].lv_fastestWin);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2522, gv_profile.lv_settingsProfileValue[1][lp_player]);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2523, gv_profile.lv_settingsProfileValue[2][lp_player]);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2524, gv_profile.lv_settingsProfileValue[3][lp_player]);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2529, gv_profile.lv_settingsProfileValue[4][lp_player]);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2536, gv_profile.lv_settingsProfileValue[5][lp_player]);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2537, gv_profile.lv_settingsProfileValue[6][lp_player]);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2525, gv_profile.lv_achieveUnitValue[1][lp_player]);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2541, gv_profile.lv_achieveUnitValue[2][lp_player]);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2539, gv_profile.lv_achieveUnitValue[3][lp_player]);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2526, gv_profile.lv_achieveUnitValue[4][lp_player]);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2540, gv_profile.lv_achieveUnitValue[5][lp_player]);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2527, gv_profile.lv_achieveUnitValue[6][lp_player]);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2538, gv_profile.lv_achieveUnitValue[7][lp_player]);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2528, gv_profile.lv_achieveUnitValue[8][lp_player]);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2530, gv_profile.lv_achieveUnitValue[9][lp_player]);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2542, gv_profile.lv_achieveUnitValue[10][lp_player]);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2532, gv_profile.lv_achieveUnitValue[11][lp_player]);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2533, gv_profile.lv_achieveUnitValue[12][lp_player]);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2534, gv_profile.lv_achieveUnitValue[13][lp_player]);
    BankValueSetFromFlag(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2531, gv_player[lp_player].lv_playedTutorial);
    BankValueSetFromInt(gv_bank.lv_file[lp_player], gv_bank.lv_sectionSettingAchieve, gv_bank.lv_Win2535, gv_profile.lv_achieveDonateValue[lp_player]);
    BankValueSetFromString(gv_bank.lv_file[lp_player], gv_bank.lv_sectionPlayer, gv_bank.lv_Win252, gv_player[lp_player].lv_name);
    BankOptionSet(gv_bank.lv_file[lp_player], c_bankOptionSignature, true);
    BankSave(gv_bank.lv_file[lp_player]);
}

void gf_BankHackerDetected (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    gf_ChatMessage(lp_player, (StringToText("<c val=\"FF0000\">Bank Error!</c> - ") + IntToText(gv_player[lp_player].lv_win) + IntToText(0) + IntToText(gv_player[lp_player].lv_loses) + IntToText(0) + IntToText(gv_player[lp_player].lv_kills) + IntToText(0) + IntToText(gv_player[lp_player].lv_deaths)), 1);
    gv_player[lp_player].lv_win = 0;
    gv_player[lp_player].lv_loses = 0;
    gv_player[lp_player].lv_kills = 0;
    gv_player[lp_player].lv_deaths = 0;
    if ((gv_gameInfo.lv_ranked == ge_Ranked_Enabled)) {
        gv_player[lp_player].lv_loses = 1;
    }

    gf_BankSave(lp_player, false);
}

void gf_BankIDList (int lp_player) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    gv_player[lp_player].lv_iDStatus = ge_PlayerStatus_Normal;
    while ((lv_i <= gv_bank.lv_iDListMax)) {
        if ((gv_bank.lv_iDList[lv_i] == PlayerHandle(lp_player))) {
            if ((gv_bank.lv_iDList[lv_i] == PlayerHandle(lp_player))) {
                if ((gv_bank.lv_iDStatus[lv_i] == ge_PlayerStatus_Admin)) {
                    gv_player[lp_player].lv_iDStatus = ge_PlayerStatus_Admin;
                    gv_player[lp_player].lv_flagImage = gv_bank.lv_iDFlagImage[lv_i];
                    gv_player[lp_player].lv_flagTexture = gv_bank.lv_iDFlagTexture[lv_i];
                }

                if ((gv_bank.lv_iDStatus[lv_i] == ge_PlayerStatus_DonatorLvl1)) {
                    gv_player[lp_player].lv_iDStatus = ge_PlayerStatus_DonatorLvl1;
                }

                if ((gv_bank.lv_iDStatus[lv_i] == ge_PlayerStatus_DonatorLvl2)) {
                    gv_player[lp_player].lv_iDStatus = ge_PlayerStatus_DonatorLvl2;
                }

                if ((gv_bank.lv_iDStatus[lv_i] == ge_PlayerStatus_DonatorLvl3)) {
                    gv_player[lp_player].lv_iDStatus = ge_PlayerStatus_DonatorLvl3;
                }

                if ((gv_bank.lv_iDStatus[lv_i] == ge_PlayerStatus_DonatorLvl4)) {
                    gv_player[lp_player].lv_iDStatus = ge_PlayerStatus_DonatorLvl4;
                    gv_player[lp_player].lv_flagImage = gv_bank.lv_iDFlagImage[lv_i];
                    gv_player[lp_player].lv_flagTexture = gv_bank.lv_iDFlagTexture[lv_i];
                }

                if ((gv_bank.lv_iDStatus[lv_i] == ge_PlayerStatus_Banned)) {
                    gv_player[lp_player].lv_iDStatus = ge_PlayerStatus_Banned;
                }

            }

        }

        lv_i = (lv_i + 1);
    }
}

void gf_UserConfigKeys (int lp_keyPressed) {
    // Automatic Variable Declarations
}

void gf_OverlayListener (int lp_dialogItem, int lp_player) {
    // Variable Declarations
    unitgroup lv_countrybeacon;

    // Automatic Variable Declarations
    int auto115CA7C8_val;
    playergroup auto0FA3F1F5_g;
    int auto0FA3F1F5_var;
    playergroup autoF45B8ADC_g;
    int autoF45B8ADC_var;
    playergroup auto46EDC6CA_g;
    int auto46EDC6CA_var;
    playergroup auto5B9FAC99_g;
    int auto5B9FAC99_var;
    playergroup autoB6DDB679_g;
    int autoB6DDB679_var;
    playergroup auto1C27A5AB_g;
    int auto1C27A5AB_var;
    playergroup auto95E3AC81_g;
    int auto95E3AC81_var;
    playergroup auto1DCFC72A_g;
    int auto1DCFC72A_var;
    playergroup auto6EED3045_g;
    int auto6EED3045_var;
    playergroup auto20CA035B_g;
    int auto20CA035B_var;
    playergroup auto8C921287_g;
    int auto8C921287_var;

    // Variable Initialization
    lv_countrybeacon = UnitGroupEmpty();

    // Implementation
    if (((DialogControlGetDialog(lp_dialogItem) == DialogControlGetDialog(gv_infoPanel.lv_mainMenuButtons[1])) || (DialogControlGetDialog(lp_dialogItem) == DialogControlGetDialog(gv_infoPanel.lv_mainMenuButtons[2])) || (DialogControlGetDialog(lp_dialogItem) == DialogControlGetDialog(gv_infoPanel.lv_mainMenuButtons[3])) || (DialogControlGetDialog(lp_dialogItem) == DialogControlGetDialog(gv_infoPanel.lv_mainMenuButtons[4])) || (DialogControlGetDialog(lp_dialogItem) == DialogControlGetDialog(gv_infoPanel.lv_mainMenuButtons[5])) || (DialogControlGetDialog(lp_dialogItem) == DialogControlGetDialog(gv_infoPanel.lv_mainMenuButtons[6])) || (DialogControlGetDialog(lp_dialogItem) == DialogControlGetDialog(gv_infoPanel.lv_mainMenuButtons[7])) || (DialogControlGetDialog(lp_dialogItem) == DialogControlGetDialog(gv_infoPanel.lv_mainMenuButtons[8])) || (DialogControlGetDialog(lp_dialogItem) == DialogControlGetDialog(gv_infoPanel.lv_mainMenuButtons[9])) || (DialogControlGetDialog(lp_dialogItem) == DialogControlGetDialog(gv_infoPanel.lv_mainMenuButtons[10])))) {
        auto115CA7C8_val = lp_dialogItem;
        if (auto115CA7C8_val == gv_infoPanel.lv_mainMenuButtons[1]) {
            UISetCustomMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogOptionsButton, true);
            UISetCustomMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogQuitButton, true);
            UISetCustomMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogReturnToGameplayButton, true);
            UIShowCustomMenu(PlayerGroupSingle(lp_player), StringToText("Risk Legacy"));
        }
        else if (auto115CA7C8_val == gv_infoPanel.lv_mainMenuButtons[2]) {
            if ((DialogIsVisible(gv_profile.lv_main, lp_player) == false)) {
                DialogSetVisible(gv_infoPanel.lv_backgroundDialog, PlayerGroupSingle(lp_player), true);
                DialogSetVisible(gv_profile.lv_main, PlayerGroupSingle(lp_player), true);
                DialogSetVisible(gv_profile.lv_statsMain, PlayerGroupSingle(lp_player), true);
                autoF45B8ADC_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
                autoF45B8ADC_var = -1;
                while (true) {
                    autoF45B8ADC_var = PlayerGroupNextPlayer(autoF45B8ADC_g, autoF45B8ADC_var);
                    if (autoF45B8ADC_var < 0) { break; }
                    DialogSetVisible(gv_profile.lv_playerProfile[autoF45B8ADC_var], PlayerGroupSingle(lp_player), false);
                }
                DialogSetVisible(gv_profile.lv_playerProfile[lp_player], PlayerGroupSingle(lp_player), true);
                DialogSetVisible(gv_profile.lv_settingsProfile[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_achieveProfile[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_main, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_mapMain, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_minimapDialog[gv_log.lv_currentMap[lp_player]], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_messageMain, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinKill[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinWin[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinAchieve[lp_player], PlayerGroupSingle(lp_player), false);
                DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[6], PlayerGroupSingle(lp_player), false);
                DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[7], PlayerGroupSingle(lp_player), false);
                DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[8], PlayerGroupSingle(lp_player), false);
            }
            else {
                DialogSetVisible(gv_infoPanel.lv_backgroundDialog, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_main, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_statsMain, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_settingsProfile[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_achieveProfile[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinKill[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinWin[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinAchieve[lp_player], PlayerGroupSingle(lp_player), false);
                DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[6], PlayerGroupSingle(lp_player), false);
                DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[7], PlayerGroupSingle(lp_player), false);
                DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[8], PlayerGroupSingle(lp_player), false);
                auto0FA3F1F5_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
                auto0FA3F1F5_var = -1;
                while (true) {
                    auto0FA3F1F5_var = PlayerGroupNextPlayer(auto0FA3F1F5_g, auto0FA3F1F5_var);
                    if (auto0FA3F1F5_var < 0) { break; }
                    DialogSetVisible(gv_profile.lv_playerProfile[auto0FA3F1F5_var], PlayerGroupSingle(lp_player), false);
                }
            }
        }
        else if (auto115CA7C8_val == gv_infoPanel.lv_mainMenuButtons[3]) {
            if ((DialogIsVisible(gv_log.lv_main, lp_player) == false)) {
                DialogSetVisible(gv_infoPanel.lv_backgroundDialog, PlayerGroupSingle(lp_player), true);
                DialogSetVisible(gv_log.lv_main, PlayerGroupSingle(lp_player), true);
                DialogSetVisible(gv_log.lv_messageMain, PlayerGroupSingle(lp_player), true);
                DialogSetVisible(gv_profile.lv_main, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_statsMain, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_achieveProfile[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_settingsProfile[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinKill[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinWin[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinAchieve[lp_player], PlayerGroupSingle(lp_player), false);
                DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[6], PlayerGroupSingle(lp_player), false);
                DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[7], PlayerGroupSingle(lp_player), false);
                DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[8], PlayerGroupSingle(lp_player), false);
                auto46EDC6CA_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
                auto46EDC6CA_var = -1;
                while (true) {
                    auto46EDC6CA_var = PlayerGroupNextPlayer(auto46EDC6CA_g, auto46EDC6CA_var);
                    if (auto46EDC6CA_var < 0) { break; }
                    DialogSetVisible(gv_profile.lv_playerProfile[auto46EDC6CA_var], PlayerGroupSingle(lp_player), false);
                }
            }
            else {
                DialogSetVisible(gv_infoPanel.lv_backgroundDialog, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_main, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_achieveProfile[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_mapMain, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_minimapDialog[gv_log.lv_currentMap[lp_player]], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_messageMain, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinKill[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinWin[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinAchieve[lp_player], PlayerGroupSingle(lp_player), false);
                DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[6], PlayerGroupSingle(lp_player), false);
                DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[7], PlayerGroupSingle(lp_player), false);
                DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[8], PlayerGroupSingle(lp_player), false);
            }
        }
        else if (auto115CA7C8_val == gv_infoPanel.lv_mainMenuButtons[4]) {
            if ((DialogControlIsVisible(gv_infoPanel.lv_mainMenuButtons[6], lp_player) == false)) {
                DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[6], PlayerGroupSingle(lp_player), true);
                DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[7], PlayerGroupSingle(lp_player), true);
                DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[8], PlayerGroupSingle(lp_player), true);
                DialogSetVisible(gv_infoPanel.lv_backgroundDialog, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_mapMain, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_minimapDialog[gv_log.lv_currentMap[lp_player]], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_messageMain, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_main, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_main, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_statsMain, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_achieveProfile[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_settingsProfile[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinWin[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinKill[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinAchieve[lp_player], PlayerGroupSingle(lp_player), false);
                autoB6DDB679_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
                autoB6DDB679_var = -1;
                while (true) {
                    autoB6DDB679_var = PlayerGroupNextPlayer(autoB6DDB679_g, autoB6DDB679_var);
                    if (autoB6DDB679_var < 0) { break; }
                    DialogSetVisible(gv_profile.lv_playerProfile[autoB6DDB679_var], PlayerGroupSingle(lp_player), false);
                }
            }
            else {
                DialogSetVisible(gv_infoPanel.lv_backgroundDialog, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_main, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_achieveProfile[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_mapMain, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_minimapDialog[gv_log.lv_currentMap[lp_player]], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_messageMain, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinKill[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinWin[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinAchieve[lp_player], PlayerGroupSingle(lp_player), false);
                DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[6], PlayerGroupSingle(lp_player), false);
                DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[7], PlayerGroupSingle(lp_player), false);
                DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[8], PlayerGroupSingle(lp_player), false);
                auto5B9FAC99_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
                auto5B9FAC99_var = -1;
                while (true) {
                    auto5B9FAC99_var = PlayerGroupNextPlayer(auto5B9FAC99_g, auto5B9FAC99_var);
                    if (auto5B9FAC99_var < 0) { break; }
                    DialogSetVisible(gv_profile.lv_playerProfile[auto5B9FAC99_var], PlayerGroupSingle(lp_player), false);
                }
            }
        }
        else if (auto115CA7C8_val == gv_infoPanel.lv_mainMenuButtons[5]) {
            if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) >= 3)) {
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSubtract, 3);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 5);
                if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) >= 3)) {
                    libNtve_gf_SetDialogItemImage(gv_infoPanel.lv_mainMenuButtons[5], "risk\\Flag\\tgacardyellownormalpressed1.tga", PlayerGroupSingle(EventPlayer()));
                    libNtve_gf_SetDialogItemImage2(gv_infoPanel.lv_mainMenuButtons[5], "risk\\Flag\\tgacardyellowhoverpressed1.tga", PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemImage(gv_infoPanel.lv_mainMenuButtons[5], "risk\\Flag\\tgacardnormalpressed1.tga", PlayerGroupSingle(EventPlayer()));
                    libNtve_gf_SetDialogItemImage2(gv_infoPanel.lv_mainMenuButtons[5], "risk\\Flag\\tgacardhoverpressed1.tga", PlayerGroupSingle(EventPlayer()));
                }
            }

        }
        else if (auto115CA7C8_val == gv_infoPanel.lv_mainMenuButtons[6]) {
            if ((DialogIsVisible(gv_skinKill[lp_player], lp_player) == false)) {
                DialogSetVisible(gv_skinKill[lp_player], PlayerGroupSingle(lp_player), true);
                DialogSetVisible(gv_profile.lv_main, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_statsMain, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_achieveProfile[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_settingsProfile[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinWin[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinAchieve[lp_player], PlayerGroupSingle(lp_player), false);
                auto95E3AC81_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
                auto95E3AC81_var = -1;
                while (true) {
                    auto95E3AC81_var = PlayerGroupNextPlayer(auto95E3AC81_g, auto95E3AC81_var);
                    if (auto95E3AC81_var < 0) { break; }
                    DialogSetVisible(gv_profile.lv_playerProfile[auto95E3AC81_var], PlayerGroupSingle(lp_player), false);
                }
            }
            else {
                DialogSetVisible(gv_infoPanel.lv_backgroundDialog, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_main, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_achieveProfile[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_mapMain, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_minimapDialog[gv_log.lv_currentMap[lp_player]], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_messageMain, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinKill[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinKill[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinAchieve[lp_player], PlayerGroupSingle(lp_player), false);
                auto1C27A5AB_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
                auto1C27A5AB_var = -1;
                while (true) {
                    auto1C27A5AB_var = PlayerGroupNextPlayer(auto1C27A5AB_g, auto1C27A5AB_var);
                    if (auto1C27A5AB_var < 0) { break; }
                    DialogSetVisible(gv_profile.lv_playerProfile[auto1C27A5AB_var], PlayerGroupSingle(lp_player), false);
                }
            }
        }
        else if (auto115CA7C8_val == gv_infoPanel.lv_mainMenuButtons[7]) {
            if ((DialogIsVisible(gv_skinWin[lp_player], lp_player) == false)) {
                DialogSetVisible(gv_skinWin[lp_player], PlayerGroupSingle(lp_player), true);
                DialogSetVisible(gv_skinKill[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinAchieve[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_main, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_statsMain, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_achieveProfile[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_settingsProfile[lp_player], PlayerGroupSingle(lp_player), false);
                auto6EED3045_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
                auto6EED3045_var = -1;
                while (true) {
                    auto6EED3045_var = PlayerGroupNextPlayer(auto6EED3045_g, auto6EED3045_var);
                    if (auto6EED3045_var < 0) { break; }
                    DialogSetVisible(gv_profile.lv_playerProfile[auto6EED3045_var], PlayerGroupSingle(lp_player), false);
                }
            }
            else {
                DialogSetVisible(gv_infoPanel.lv_backgroundDialog, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_main, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_achieveProfile[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_mapMain, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_minimapDialog[gv_log.lv_currentMap[lp_player]], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_messageMain, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinKill[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinWin[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinAchieve[lp_player], PlayerGroupSingle(lp_player), false);
                auto1DCFC72A_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
                auto1DCFC72A_var = -1;
                while (true) {
                    auto1DCFC72A_var = PlayerGroupNextPlayer(auto1DCFC72A_g, auto1DCFC72A_var);
                    if (auto1DCFC72A_var < 0) { break; }
                    DialogSetVisible(gv_profile.lv_playerProfile[auto1DCFC72A_var], PlayerGroupSingle(lp_player), false);
                }
            }
        }
        else if (auto115CA7C8_val == gv_infoPanel.lv_mainMenuButtons[8]) {
            if ((DialogIsVisible(gv_skinAchieve[lp_player], lp_player) == false)) {
                DialogSetVisible(gv_skinAchieve[lp_player], PlayerGroupSingle(lp_player), true);
                DialogSetVisible(gv_profile.lv_main, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_statsMain, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_achieveProfile[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_settingsProfile[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinWin[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinKill[lp_player], PlayerGroupSingle(lp_player), false);
                auto8C921287_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
                auto8C921287_var = -1;
                while (true) {
                    auto8C921287_var = PlayerGroupNextPlayer(auto8C921287_g, auto8C921287_var);
                    if (auto8C921287_var < 0) { break; }
                    DialogSetVisible(gv_profile.lv_playerProfile[auto8C921287_var], PlayerGroupSingle(lp_player), false);
                }
            }
            else {
                DialogSetVisible(gv_infoPanel.lv_backgroundDialog, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_main, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_achieveProfile[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_mapMain, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_minimapDialog[gv_log.lv_currentMap[lp_player]], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_log.lv_messageMain, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinKill[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinKill[lp_player], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_skinAchieve[lp_player], PlayerGroupSingle(lp_player), false);
                auto20CA035B_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
                auto20CA035B_var = -1;
                while (true) {
                    auto20CA035B_var = PlayerGroupNextPlayer(auto20CA035B_g, auto20CA035B_var);
                    if (auto20CA035B_var < 0) { break; }
                    DialogSetVisible(gv_profile.lv_playerProfile[auto20CA035B_var], PlayerGroupSingle(lp_player), false);
                }
            }
        }
        else if (auto115CA7C8_val == gv_infoPanel.lv_mainMenuButtons[9]) {
            DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[10], PlayerGroupSingle(lp_player), true);
            DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[9], PlayerGroupSingle(lp_player), false);
            DialogSetVisible(gv_selectedUnitDialog[lp_player], PlayerGroupSingle(lp_player), true);
        }
        else if (auto115CA7C8_val == gv_infoPanel.lv_mainMenuButtons[10]) {
            DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[9], PlayerGroupSingle(lp_player), true);
            DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[10], PlayerGroupSingle(lp_player), false);
            DialogSetVisible(gv_selectedUnitDialog[lp_player], PlayerGroupSingle(lp_player), false);
        }
        else {
        }
    }

}

void gf_ProfileListener (int lp_dialogItem, int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_i2;

    // Automatic Variable Declarations
    int auto1E64FFC4_val;

    // Variable Initialization
    lv_i = 1;
    lv_i2 = 1;

    // Implementation
    if (((DialogControlGetDialog(lp_dialogItem) == gv_profile.lv_main) || (DialogControlGetDialog(lp_dialogItem) == gv_profile.lv_statsMain))) {
        auto1E64FFC4_val = lp_dialogItem;
        if (auto1E64FFC4_val == gv_profile.lv_mainDI[1]) {
            DialogSetVisible(gv_profile.lv_statsMain, PlayerGroupSingle(lp_player), true);
            DialogSetVisible(gv_profile.lv_settingsProfile[lp_player], PlayerGroupSingle(lp_player), false);
            DialogSetVisible(gv_profile.lv_achieveProfile[lp_player], PlayerGroupSingle(lp_player), false);
            while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                DialogSetVisible(gv_profile.lv_playerProfile[lv_i], PlayerGroupSingle(lp_player), false);
                lv_i = (lv_i + 1);
            }
            DialogSetVisible(gv_profile.lv_playerProfile[lp_player], PlayerGroupSingle(lp_player), true);
        }
        else if (auto1E64FFC4_val == gv_profile.lv_mainDI[2]) {
            DialogSetVisible(gv_profile.lv_achieveProfile[lp_player], PlayerGroupSingle(lp_player), true);
            DialogSetVisible(gv_profile.lv_statsMain, PlayerGroupSingle(lp_player), false);
            DialogSetVisible(gv_profile.lv_settingsProfile[lp_player], PlayerGroupSingle(lp_player), false);
            while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                DialogSetVisible(gv_profile.lv_playerProfile[lv_i], PlayerGroupSingle(lp_player), false);
                lv_i = (lv_i + 1);
            }
        }
        else if (auto1E64FFC4_val == gv_profile.lv_mainDI[3]) {
            DialogSetVisible(gv_profile.lv_statsMain, PlayerGroupSingle(lp_player), false);
            DialogSetVisible(gv_profile.lv_achieveProfile[lp_player], PlayerGroupSingle(lp_player), false);
            while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                DialogSetVisible(gv_profile.lv_playerProfile[lv_i], PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_profile.lv_settingsProfile[lv_i], PlayerGroupSingle(lp_player), false);
                lv_i = (lv_i + 1);
            }
            DialogSetVisible(gv_profile.lv_settingsProfile[lp_player], PlayerGroupSingle(lp_player), true);
        }
        else if (auto1E64FFC4_val == gv_profile.lv_playerSelectionDI[1]) {
            while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                DialogSetVisible(gv_profile.lv_playerProfile[lv_i], PlayerGroupSingle(lp_player), false);
                lv_i = (lv_i + 1);
            }
            DialogSetVisible(gv_profile.lv_playerProfile[1], PlayerGroupSingle(lp_player), true);
        }
        else if (auto1E64FFC4_val == gv_profile.lv_playerSelectionDI[2]) {
            while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                DialogSetVisible(gv_profile.lv_playerProfile[lv_i], PlayerGroupSingle(lp_player), false);
                lv_i = (lv_i + 1);
            }
            DialogSetVisible(gv_profile.lv_playerProfile[2], PlayerGroupSingle(lp_player), true);
        }
        else if (auto1E64FFC4_val == gv_profile.lv_playerSelectionDI[3]) {
            while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                DialogSetVisible(gv_profile.lv_playerProfile[lv_i], PlayerGroupSingle(lp_player), false);
                lv_i = (lv_i + 1);
            }
            DialogSetVisible(gv_profile.lv_playerProfile[3], PlayerGroupSingle(lp_player), true);
        }
        else if (auto1E64FFC4_val == gv_profile.lv_playerSelectionDI[4]) {
            while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                DialogSetVisible(gv_profile.lv_playerProfile[lv_i], PlayerGroupSingle(lp_player), false);
                lv_i = (lv_i + 1);
            }
            DialogSetVisible(gv_profile.lv_playerProfile[4], PlayerGroupSingle(lp_player), true);
        }
        else if (auto1E64FFC4_val == gv_profile.lv_playerSelectionDI[5]) {
            while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                DialogSetVisible(gv_profile.lv_playerProfile[lv_i], PlayerGroupSingle(lp_player), false);
                lv_i = (lv_i + 1);
            }
            DialogSetVisible(gv_profile.lv_playerProfile[5], PlayerGroupSingle(lp_player), true);
        }
        else if (auto1E64FFC4_val == gv_profile.lv_playerSelectionDI[6]) {
            while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                DialogSetVisible(gv_profile.lv_playerProfile[lv_i], PlayerGroupSingle(lp_player), false);
                lv_i = (lv_i + 1);
            }
            DialogSetVisible(gv_profile.lv_playerProfile[6], PlayerGroupSingle(lp_player), true);
        }
        else if (auto1E64FFC4_val == gv_profile.lv_playerSelectionDI[7]) {
            while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                DialogSetVisible(gv_profile.lv_playerProfile[lv_i], PlayerGroupSingle(lp_player), false);
                lv_i = (lv_i + 1);
            }
            DialogSetVisible(gv_profile.lv_playerProfile[7], PlayerGroupSingle(lp_player), true);
        }
        else if (auto1E64FFC4_val == gv_profile.lv_playerSelectionDI[8]) {
            while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                DialogSetVisible(gv_profile.lv_playerProfile[lv_i], PlayerGroupSingle(lp_player), false);
                lv_i = (lv_i + 1);
            }
            DialogSetVisible(gv_profile.lv_playerProfile[8], PlayerGroupSingle(lp_player), true);
        }
        else if (auto1E64FFC4_val == gv_profile.lv_playerSelectionDI[9]) {
            while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                DialogSetVisible(gv_profile.lv_playerProfile[lv_i], PlayerGroupSingle(lp_player), false);
                lv_i = (lv_i + 1);
            }
            DialogSetVisible(gv_profile.lv_playerProfile[9], PlayerGroupSingle(lp_player), true);
        }
        else if (auto1E64FFC4_val == gv_profile.lv_playerSelectionDI[10]) {
            while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                DialogSetVisible(gv_profile.lv_playerProfile[lv_i], PlayerGroupSingle(lp_player), false);
                lv_i = (lv_i + 1);
            }
            DialogSetVisible(gv_profile.lv_playerProfile[10], PlayerGroupSingle(lp_player), true);
        }
        else if (auto1E64FFC4_val == gv_profile.lv_playerSelectionDI[11]) {
            while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                DialogSetVisible(gv_profile.lv_playerProfile[lv_i], PlayerGroupSingle(lp_player), false);
                lv_i = (lv_i + 1);
            }
            DialogSetVisible(gv_profile.lv_playerProfile[11], PlayerGroupSingle(lp_player), true);
        }
        else if (auto1E64FFC4_val == gv_profile.lv_playerSelectionDI[12]) {
            while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                DialogSetVisible(gv_profile.lv_playerProfile[lv_i], PlayerGroupSingle(lp_player), false);
                lv_i = (lv_i + 1);
            }
            DialogSetVisible(gv_profile.lv_playerProfile[12], PlayerGroupSingle(lp_player), true);
        }
        else {
        }
    }

}

void gf_AchievementListener2 (int lp_dialogItem, int lp_player) {
    // Automatic Variable Declarations
    int auto448D064A_val;

    // Implementation
    if ((gv_profile.lv_achieveWait[lp_player] == 0) && (((DialogControlGetDialog(lp_dialogItem) == gv_skinKill[lp_player]) || (DialogControlGetDialog(lp_dialogItem) == gv_skinAchieve[lp_player]) || (DialogControlGetDialog(lp_dialogItem) == gv_skinWin[lp_player])))) {
        gf_AchieveWait(lp_player);
        auto448D064A_val = lp_dialogItem;
        if (auto448D064A_val == gv_skinButton[1][1][1][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_SCV][lp_player] != 1)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_SCV][lp_player] = 1;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_SCV][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_SCV);
        }
        else if (auto448D064A_val == gv_skinButton[1][1][2][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Hellion][lp_player] != 1)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Hellion][lp_player] = 1;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Hellion][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Hellion);
        }
        else if (auto448D064A_val == gv_skinButton[1][1][3][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[1][lp_player] != 1)) {
                gv_profile.lv_achieveUnitValue[1][lp_player] = 1;
            }
            else {
                gv_profile.lv_achieveUnitValue[1][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Marine);
        }
        else if (auto448D064A_val == gv_skinButton[1][1][4][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Banshee][lp_player] != 1)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Banshee][lp_player] = 1;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Banshee][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Banshee);
        }
        else if (auto448D064A_val == gv_skinButton[1][1][5][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_ScienceVessel][lp_player] != 1)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_ScienceVessel][lp_player] = 1;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_ScienceVessel][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_ScienceVessel);
        }
        else if (auto448D064A_val == gv_skinButton[1][2][1][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Medic][lp_player] != 1)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Medic][lp_player] = 1;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Medic][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Medic);
        }
        else if (auto448D064A_val == gv_skinButton[1][2][2][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Tank][lp_player] != 1)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Tank][lp_player] = 1;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Tank][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Tank);
        }
        else if (auto448D064A_val == gv_skinButton[1][2][3][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Banshee][lp_player] != 2)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Banshee][lp_player] = 2;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Banshee][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Banshee);
        }
        else if (auto448D064A_val == gv_skinButton[1][2][4][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Viking][lp_player] != 1)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Viking][lp_player] = 1;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Viking][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Viking);
        }
        else if (auto448D064A_val == gv_skinButton[1][2][5][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[4][lp_player] != 1)) {
                gv_profile.lv_achieveUnitValue[4][lp_player] = 1;
            }
            else {
                gv_profile.lv_achieveUnitValue[4][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Marauder);
        }
        else if (auto448D064A_val == gv_skinButton[1][3][1][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Viking][lp_player] != 2)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Viking][lp_player] = 2;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Viking][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Viking);
        }
        else if (auto448D064A_val == gv_skinButton[1][3][2][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_SCV][lp_player] != 2)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_SCV][lp_player] = 2;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_SCV][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_SCV);
        }
        else if (auto448D064A_val == gv_skinButton[1][3][3][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Banshee][lp_player] != 3)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Banshee][lp_player] = 3;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Banshee][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Banshee);
        }
        else if (auto448D064A_val == gv_skinButton[1][3][4][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Hellion][lp_player] != 2)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Hellion][lp_player] = 2;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Hellion][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Hellion);
        }
        else if (auto448D064A_val == gv_skinButton[1][3][5][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Tank][lp_player] != 2)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Tank][lp_player] = 2;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Tank][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Tank);
        }
        else if (auto448D064A_val == gv_skinButton[1][4][1][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Hellion][lp_player] != 3)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Hellion][lp_player] = 3;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Hellion][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Hellion);
        }
        else if (auto448D064A_val == gv_skinButton[1][4][2][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_ScienceVessel][lp_player] != 2)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_ScienceVessel][lp_player] = 2;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_ScienceVessel][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_ScienceVessel);
        }
        else if (auto448D064A_val == gv_skinButton[1][4][3][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Battlecrusier][lp_player] != 1)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Battlecrusier][lp_player] = 1;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Battlecrusier][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Battlecrusier);
        }
        else if (auto448D064A_val == gv_skinButton[1][4][4][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[4][lp_player] != 3)) {
                gv_profile.lv_achieveUnitValue[4][lp_player] = 3;
            }
            else {
                gv_profile.lv_achieveUnitValue[4][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Marauder);
        }
        else if (auto448D064A_val == gv_skinButton[1][4][5][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[1][lp_player] != 2)) {
                gv_profile.lv_achieveUnitValue[1][lp_player] = 2;
            }
            else {
                gv_profile.lv_achieveUnitValue[1][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Marine);
        }
        else if (auto448D064A_val == gv_skinButton[1][5][1][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[4][lp_player] != 4)) {
                gv_profile.lv_achieveUnitValue[4][lp_player] = 4;
            }
            else {
                gv_profile.lv_achieveUnitValue[4][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Marauder);
        }
        else if (auto448D064A_val == gv_skinButton[1][5][2][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Viking][lp_player] != 3)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Viking][lp_player] = 3;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Viking][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Viking);
        }
        else if (auto448D064A_val == gv_skinButton[1][5][3][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Tank][lp_player] != 3)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Tank][lp_player] = 3;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Tank][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Tank);
        }
        else if (auto448D064A_val == gv_skinButton[1][5][4][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Barracks][lp_player] != 1)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Barracks][lp_player] = 1;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Barracks][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Barracks);
        }
        else if (auto448D064A_val == gv_skinButton[2][1][1][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[1][lp_player] != 3)) {
                gv_profile.lv_achieveUnitValue[1][lp_player] = 3;
            }
            else {
                gv_profile.lv_achieveUnitValue[1][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Marine);
        }
        else if (auto448D064A_val == gv_skinButton[2][1][2][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Hellion][lp_player] != 4)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Hellion][lp_player] = 4;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Hellion][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Hellion);
        }
        else if (auto448D064A_val == gv_skinButton[2][1][3][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Banshee][lp_player] != 4)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Banshee][lp_player] = 4;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Banshee][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Banshee);
        }
        else if (auto448D064A_val == gv_skinButton[2][1][4][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[4][lp_player] != 5)) {
                gv_profile.lv_achieveUnitValue[4][lp_player] = 5;
            }
            else {
                gv_profile.lv_achieveUnitValue[4][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Marauder);
        }
        else if (auto448D064A_val == gv_skinButton[2][1][5][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[1][lp_player] != 4)) {
                gv_profile.lv_achieveUnitValue[1][lp_player] = 4;
            }
            else {
                gv_profile.lv_achieveUnitValue[1][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Marine);
        }
        else if (auto448D064A_val == gv_skinButton[2][2][1][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Goliath][lp_player] != 1)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Goliath][lp_player] = 1;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Goliath][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Goliath);
        }
        else if (auto448D064A_val == gv_skinButton[2][2][2][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Tank][lp_player] != 4)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Tank][lp_player] = 4;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Tank][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Tank);
        }
        else if (auto448D064A_val == gv_skinButton[2][2][3][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[1][lp_player] != 5)) {
                gv_profile.lv_achieveUnitValue[1][lp_player] = 5;
            }
            else {
                gv_profile.lv_achieveUnitValue[1][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Marine);
        }
        else if (auto448D064A_val == gv_skinButton[2][2][4][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_SCV][lp_player] != 3)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_SCV][lp_player] = 3;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_SCV][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_SCV);
        }
        else if (auto448D064A_val == gv_skinButton[2][2][5][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Viking][lp_player] != 4)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Viking][lp_player] = 4;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Viking][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Viking);
        }
        else if (auto448D064A_val == gv_skinButton[2][3][1][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[4][lp_player] != 6)) {
                gv_profile.lv_achieveUnitValue[4][lp_player] = 6;
            }
            else {
                gv_profile.lv_achieveUnitValue[4][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Marauder);
        }
        else if (auto448D064A_val == gv_skinButton[2][3][2][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Battlecrusier][lp_player] != 2)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Battlecrusier][lp_player] = 2;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Battlecrusier][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Battlecrusier);
        }
        else if (auto448D064A_val == gv_skinButton[2][3][3][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Banshee][lp_player] != 5)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Banshee][lp_player] = 5;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Banshee][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Banshee);
        }
        else if (auto448D064A_val == gv_skinButton[2][3][4][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Battlecrusier][lp_player] != 3)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Battlecrusier][lp_player] = 3;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Battlecrusier][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Battlecrusier);
        }
        else if (auto448D064A_val == gv_skinButton[2][3][5][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[1][lp_player] != 6)) {
                gv_profile.lv_achieveUnitValue[1][lp_player] = 6;
            }
            else {
                gv_profile.lv_achieveUnitValue[1][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Marine);
        }
        else if (auto448D064A_val == gv_skinButton[2][4][1][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[4][lp_player] != 2)) {
                gv_profile.lv_achieveUnitValue[4][lp_player] = 2;
            }
            else {
                gv_profile.lv_achieveUnitValue[4][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Marauder);
        }
        else if (auto448D064A_val == gv_skinButton[2][4][2][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Tank][lp_player] != 5)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Tank][lp_player] = 5;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Tank][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Tank);
        }
        else if (auto448D064A_val == gv_skinButton[2][4][3][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Battlecrusier][lp_player] != 4)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Battlecrusier][lp_player] = 4;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Battlecrusier][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Battlecrusier);
        }
        else if (auto448D064A_val == gv_skinButton[2][4][4][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Starport][lp_player] != 1)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Starport][lp_player] = 1;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Starport][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Starport);
        }
        else if (auto448D064A_val == gv_skinButton[3][1][1][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[4][lp_player] != 7)) {
                gv_profile.lv_achieveUnitValue[4][lp_player] = 7;
            }
            else {
                gv_profile.lv_achieveUnitValue[4][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Marauder);
        }
        else if (auto448D064A_val == gv_skinButton[3][1][2][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Tank][lp_player] != 6)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Tank][lp_player] = 6;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Tank][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Tank);
        }
        else if (auto448D064A_val == gv_skinButton[3][1][3][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Hellion][lp_player] != 5)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Hellion][lp_player] = 5;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Hellion][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Hellion);
        }
        else if (auto448D064A_val == gv_skinButton[3][1][4][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Medic][lp_player] != 2)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Medic][lp_player] = 2;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Medic][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Medic);
        }
        else if (auto448D064A_val == gv_skinButton[3][1][5][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Goliath][lp_player] != 2)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Goliath][lp_player] = 2;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Goliath][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Goliath);
        }
        else if (auto448D064A_val == gv_skinButton[3][2][1][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_SCV][lp_player] != 4)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_SCV][lp_player] = 4;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_SCV][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_SCV);
        }
        else if (auto448D064A_val == gv_skinButton[3][2][2][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_ScienceVessel][lp_player] != 3)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_ScienceVessel][lp_player] = 3;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_ScienceVessel][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_ScienceVessel);
        }
        else if (auto448D064A_val == gv_skinButton[3][2][3][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_SCV][lp_player] != 5)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_SCV][lp_player] = 5;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_SCV][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_SCV);
        }
        else if (auto448D064A_val == gv_skinButton[3][2][4][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[1][lp_player] != 7)) {
                gv_profile.lv_achieveUnitValue[1][lp_player] = 7;
            }
            else {
                gv_profile.lv_achieveUnitValue[1][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Marine);
        }
        else if (auto448D064A_val == gv_skinButton[3][2][5][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Battlecrusier][lp_player] != 5)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Battlecrusier][lp_player] = 5;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Battlecrusier][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Battlecrusier);
        }
        else if (auto448D064A_val == gv_skinButton[3][3][1][lp_player]) {
            if ((gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Battlecrusier][lp_player] != 6)) {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Battlecrusier][lp_player] = 6;
            }
            else {
                gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Battlecrusier][lp_player] = 0;
            }
            gf_AchieveChangeAllUnits(lp_player, ge_AchieveUnitType_Battlecrusier);
        }
        else if (auto448D064A_val == gv_profile.lv_achieveOtherDI[5][lp_player]) {
            if ((gv_profile.lv_achieveDonateValue[lp_player] != 1)) {
                gv_profile.lv_achieveDonateValue[lp_player] = 1;
                gf_ShowHideAllFlag(lp_player, true);
                DialogControlSetVisible(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_flag], PlayerGroupAll(), true);
                DialogControlSetPosition(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_username], PlayerGroupAll(), c_anchorTopLeft, 53, DialogControlGetOffsetY(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_username], 1));
                gf_RefreshAllFlag(lp_player, 61);
                gf_BankSave(lp_player, false);
            }
            else {
                gv_profile.lv_achieveDonateValue[lp_player] = 0;
                gf_ShowHideAllFlag(lp_player, false);
                gv_player[lp_player].lv_homeCountry = 0;
                DialogControlSetVisible(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_flag], PlayerGroupAll(), false);
                DialogControlSetPosition(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_username], PlayerGroupAll(), c_anchorTopLeft, 18, DialogControlGetOffsetY(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_username], 1));
                gf_BankSave(lp_player, false);
            }
        }
        else {
        }
    }

}

trigger auto_gf_AchieveWait_Trigger = null;
int auto_gf_AchieveWait_lp_player;

void gf_AchieveWait (int lp_player) {
    auto_gf_AchieveWait_lp_player = lp_player;

    if (auto_gf_AchieveWait_Trigger == null) {
        auto_gf_AchieveWait_Trigger = TriggerCreate("auto_gf_AchieveWait_TriggerFunc");
    }

    TriggerExecute(auto_gf_AchieveWait_Trigger, false, false);
}

bool auto_gf_AchieveWait_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_AchieveWait_lp_player;

    // Automatic Variable Declarations
    // Implementation
    gv_profile.lv_achieveWait[lp_player] = 1;
    Wait(5.0, c_timeReal);
    gv_profile.lv_achieveWait[lp_player] = 0;
    return true;
}

void gf_SettingsListener (int lp_dialogItem, int lp_player) {
    // Variable Declarations
    int lv_activePlayer;

    // Automatic Variable Declarations
    int autoEA842DBB_val;
    unitgroup auto4352AF5F_g;
    int auto4352AF5F_u;
    unit auto4352AF5F_var;
    unitgroup auto2FC33826_g;
    int auto2FC33826_u;
    unit auto2FC33826_var;
    playergroup auto66395E9F_g;

    // Variable Initialization

    // Implementation
    if ((DialogControlGetDialog(lp_dialogItem) == gv_profile.lv_settingsProfile[lp_player])) {
        autoEA842DBB_val = lp_dialogItem;
        if (autoEA842DBB_val == gv_profile.lv_settingsProfileDI[1][lp_player]) {
            gv_profile.lv_settingsProfileValue[1][lp_player] = DialogControlGetSelectedItem(lp_dialogItem, lp_player);
            gf_BankSave(lp_player, false);
        }
        else if (autoEA842DBB_val == gv_profile.lv_settingsProfileDI[2][lp_player]) {
            gv_profile.lv_settingsProfileValue[2][lp_player] = DialogControlGetSelectedItem(lp_dialogItem, lp_player);
            gf_BankSave(lp_player, false);
        }
        else if (autoEA842DBB_val == gv_profile.lv_settingsProfileDI[3][lp_player]) {
            if ((libNtve_gf_DialogItemIsChecked(lp_dialogItem, lp_player) == true)) {
                gv_profile.lv_settingsProfileValue[3][lp_player] = 1;
            }
            else {
                gv_profile.lv_settingsProfileValue[3][lp_player] = 0;
            }
            gf_BankSave(lp_player, false);
        }
        else if (autoEA842DBB_val == gv_profile.lv_settingsProfileDI[4][lp_player]) {
            if ((libNtve_gf_DialogItemIsChecked(lp_dialogItem, lp_player) == true)) {
                gv_profile.lv_settingsProfileValue[4][lp_player] = 1;
                DialogControlSetEnabled(gv_profile.lv_playerSelectionDI[lp_player], PlayerGroupAll(), true);
            }
            else {
                gv_profile.lv_settingsProfileValue[4][lp_player] = 0;
                DialogControlSetEnabled(gv_profile.lv_playerSelectionDI[lp_player], PlayerGroupAll(), false);
                DialogControlSetEnabled(gv_profile.lv_playerSelectionDI[lp_player], PlayerGroupSingle(lp_player), true);
            }
            gf_BankSave(lp_player, false);
        }
        else if (autoEA842DBB_val == gv_profile.lv_settingsProfileDI[5][lp_player]) {
            if ((libNtve_gf_DialogItemIsChecked(lp_dialogItem, lp_player) == true)) {
                gv_profile.lv_settingsProfileValue[5][lp_player] = 1;
                auto2FC33826_g = UnitGroup("DestructibleKorhalFlag", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto2FC33826_u = UnitGroupCount(auto2FC33826_g, c_unitCountAll);
                for (;; auto2FC33826_u -= 1) {
                    auto2FC33826_var = UnitGroupUnitFromEnd(auto2FC33826_g, auto2FC33826_u);
                    if (auto2FC33826_var == null) { break; }
                    gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_player), libNtve_gf_MainActorofUnit(auto2FC33826_var), true);
                }
                PlayerGroupRemove(gv_gameInfo.lv_hideFlag, lp_player);
            }
            else {
                gv_profile.lv_settingsProfileValue[5][lp_player] = 0;
                auto4352AF5F_g = UnitGroup("DestructibleKorhalFlag", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto4352AF5F_u = UnitGroupCount(auto4352AF5F_g, c_unitCountAll);
                for (;; auto4352AF5F_u -= 1) {
                    auto4352AF5F_var = UnitGroupUnitFromEnd(auto4352AF5F_g, auto4352AF5F_u);
                    if (auto4352AF5F_var == null) { break; }
                    gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_player), libNtve_gf_MainActorofUnit(auto4352AF5F_var), false);
                }
                PlayerGroupAdd(gv_gameInfo.lv_hideFlag, lp_player);
            }
            gf_BankSave(lp_player, false);
        }
        else if (autoEA842DBB_val == gv_profile.lv_settingsProfileDI[6][lp_player]) {
            if ((libNtve_gf_DialogItemIsChecked(lp_dialogItem, lp_player) == true)) {
                gv_profile.lv_settingsProfileValue[6][lp_player] = 1;
                libNtve_gf_SetDialogItemText(gv_scoreboard.lv_kill, StringExternal("Param/Value/13CA94B3"), PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemText(gv_scoreboard.lv_death, StringExternal("Param/Value/EE1D5CF4"), PlayerGroupSingle(lp_player));
            }
            else {
                gv_profile.lv_settingsProfileValue[6][lp_player] = 0;
                libNtve_gf_SetDialogItemText(gv_scoreboard.lv_kill, StringExternal("Param/Value/9E7498DF"), PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemText(gv_scoreboard.lv_death, StringExternal("Param/Value/C6C3A405"), PlayerGroupSingle(lp_player));
            }
            auto66395E9F_g = PlayerGroupAll();
            lv_activePlayer = -1;
            while (true) {
                lv_activePlayer = PlayerGroupNextPlayer(auto66395E9F_g, lv_activePlayer);
                if (lv_activePlayer < 0) { break; }
                gf_RefreshScoreboard(lv_activePlayer, ge_ScoreboardColumn_Kills, StringToText(""));
                gf_RefreshScoreboard(lv_activePlayer, ge_ScoreboardColumn_Death, StringToText(""));
            }
            gf_BankSave(lp_player, false);
        }
        else {
        }
    }

}

void gf_TeamBoard_Listener (int lp_dialogItem, int lp_player) {
    // Variable Declarations
    int lv_activePlayer;

    // Automatic Variable Declarations
    int auto454DB35C_val;

    // Variable Initialization

    // Implementation
    if ((DialogControlGetDialog(lp_dialogItem) == gv_countryButtonDialog)) {
        auto454DB35C_val = lp_dialogItem;
        if (auto454DB35C_val == gv_countryButtonMinimize) {
            if ((gv_countryMinimizeStatus[lp_player] == 0)) {
                DialogSetVisible(gv_countryGroupDialog[lp_player], PlayerGroupSingle(lp_player), true);
                gv_countryMinimizeStatus[lp_player] = 1;
            }
            else {
                DialogSetVisible(gv_countryGroupDialog[lp_player], PlayerGroupSingle(lp_player), false);
                gv_countryMinimizeStatus[lp_player] = 0;
            }
        }
        else {
        }
    }

}

void gf_LogListener (int lp_dialogItem, int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_i2;

    // Automatic Variable Declarations
    int auto1CE21E33_val;

    // Variable Initialization
    lv_i = 1;
    lv_i2 = 1;

    // Implementation
    if (((DialogControlGetDialog(lp_dialogItem) == gv_log.lv_main) || (DialogControlGetDialog(lp_dialogItem) == gv_log.lv_mapMain) || (DialogControlGetDialog(lp_dialogItem) == gv_log.lv_messageMain))) {
        auto1CE21E33_val = lp_dialogItem;
        if (auto1CE21E33_val == gv_log.lv_mainDI[1]) {
            DialogSetVisible(gv_log.lv_mapMain, PlayerGroupSingle(lp_player), true);
            DialogSetVisible(gv_log.lv_messageMain, PlayerGroupSingle(lp_player), false);
            if ((gv_log.lv_currentMap[lp_player] < 0)) {
                gv_log.lv_currentMap[lp_player] = 0;
            }

            DialogSetVisible(gv_log.lv_minimapDialog[gv_log.lv_currentMap[lp_player]], PlayerGroupSingle(lp_player), true);
        }
        else if (auto1CE21E33_val == gv_log.lv_mainDI[2]) {
            DialogSetVisible(gv_log.lv_messageMain, PlayerGroupSingle(lp_player), true);
            DialogSetVisible(gv_log.lv_mapMain, PlayerGroupSingle(lp_player), false);
            DialogSetVisible(gv_log.lv_minimapDialog[gv_log.lv_currentMap[lp_player]], PlayerGroupSingle(lp_player), false);
        }
        else if (auto1CE21E33_val == gv_log.lv_mapDI[1]) {
            if (((gv_log.lv_currentMap[lp_player] - 1) >= 0)) {
                DialogSetVisible(gv_log.lv_minimapDialog[gv_log.lv_currentMap[lp_player]], PlayerGroupSingle(lp_player), false);
                gv_log.lv_currentMap[lp_player] = (gv_log.lv_currentMap[lp_player] - 1);
                DialogSetVisible(gv_log.lv_minimapDialog[gv_log.lv_currentMap[lp_player]], PlayerGroupSingle(lp_player), true);
                libNtve_gf_SetDialogItemText(gv_log.lv_mapDI[3], (StringToText("History Turn Time: ") + IntToText((gv_log.lv_currentMap[lp_player] * 3))), PlayerGroupSingle(lp_player));
                DialogControlSetEnabled(gv_log.lv_mapDI[2], PlayerGroupSingle(lp_player), true);
                DialogControlSetEnabled(gv_log.lv_mapDI[1], PlayerGroupSingle(lp_player), true);
            }
            else {
                DialogControlSetEnabled(gv_log.lv_mapDI[1], PlayerGroupSingle(lp_player), false);
            }
            return ;
        }
        else if (auto1CE21E33_val == gv_log.lv_mapDI[2]) {
            if (((gv_log.lv_currentMap[lp_player] + 1) <= gv_log.lv_lock)) {
                DialogSetVisible(gv_log.lv_minimapDialog[gv_log.lv_currentMap[lp_player]], PlayerGroupSingle(lp_player), false);
                gv_log.lv_currentMap[lp_player] = (gv_log.lv_currentMap[lp_player] + 1);
                DialogSetVisible(gv_log.lv_minimapDialog[gv_log.lv_currentMap[lp_player]], PlayerGroupSingle(lp_player), true);
                libNtve_gf_SetDialogItemText(gv_log.lv_mapDI[3], (StringToText("History Turn Time: ") + IntToText((gv_log.lv_currentMap[lp_player] * 3))), PlayerGroupSingle(lp_player));
                DialogControlSetEnabled(gv_log.lv_mapDI[1], PlayerGroupSingle(lp_player), true);
                DialogControlSetEnabled(gv_log.lv_mapDI[2], PlayerGroupSingle(lp_player), true);
            }
            else {
                DialogControlSetEnabled(gv_log.lv_mapDI[2], PlayerGroupSingle(lp_player), false);
            }
            return ;
        }
        else if (auto1CE21E33_val == gv_log.lv_muteDI[FixedToInt(libNtve_gf_DialogItemValue(lp_dialogItem, lp_player))]) {
            if ((PlayerGroupHasPlayer(gv_chat.lv_mutedPlayers[lp_player], FixedToInt(libNtve_gf_DialogItemValue(lp_dialogItem, lp_player))) == false)) {
                libNtve_gf_SetDialogItemText(lp_dialogItem, StringToText("Unmute"), PlayerGroupSingle(lp_player));
                PlayerGroupAdd(gv_chat.lv_mutedPlayers[lp_player], FixedToInt(libNtve_gf_DialogItemValue(lp_dialogItem, lp_player)));
            }
            else {
                libNtve_gf_SetDialogItemText(lp_dialogItem, StringToText("Mute"), PlayerGroupSingle(lp_player));
                PlayerGroupRemove(gv_chat.lv_mutedPlayers[lp_player], FixedToInt(libNtve_gf_DialogItemValue(lp_dialogItem, lp_player)));
            }
        }
        else {
        }
    }

}

void gf_Scoreboard_Listener (int lp_player, int lp_dialogItem) {
    // Automatic Variable Declarations
    int auto27E9EEEC_val;

    // Implementation
    if (((DialogControlGetDialog(lp_dialogItem) == gv_scoreboard.lv_dialog) || (DialogControlGetDialog(lp_dialogItem) == DialogControlGetDialog(gv_scoreboard.lv_minimize)))) {
        auto27E9EEEC_val = lp_dialogItem;
        if (auto27E9EEEC_val == gv_scoreboard.lv_minimize) {
            if ((DialogIsVisible(gv_scoreboard.lv_dialog, lp_player) == false)) {
                DialogSetVisible(gv_scoreboard.lv_dialog, PlayerGroupSingle(lp_player), true);
                libNtve_gf_SetDialogItemTooltip(gv_scoreboard.lv_minimize, StringToText("Minimize this scoreboard"), PlayerGroupSingle(lp_player));
            }
            else {
                DialogSetVisible(gv_scoreboard.lv_dialog, PlayerGroupSingle(lp_player), false);
                libNtve_gf_SetDialogItemTooltip(gv_scoreboard.lv_minimize, StringToText("Maximize this scoreboard"), PlayerGroupSingle(lp_player));
            }
        }
        else if (auto27E9EEEC_val == gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[FixedToInt(libNtve_gf_DialogItemValue(lp_dialogItem, lp_player))]][gv_scoreboard.lv_alliance]) {
            if ((libNtve_gf_DialogItemIsChecked(lp_dialogItem, lp_player) == true)) {
                libNtve_gf_SetAllianceOneWay(lp_player, FixedToInt(libNtve_gf_DialogItemValue(lp_dialogItem, lp_player)), libNtve_ge_AllianceSetting_Ally);
            }
            else {
                libNtve_gf_SetAllianceOneWay(lp_player, FixedToInt(libNtve_gf_DialogItemValue(lp_dialogItem, lp_player)), libNtve_ge_AllianceSetting_Enemy);
            }
        }
        else {
        }
        return ;
    }

}

void gf_OtherListener (int lp_dialogItem, int lp_player) {
    // Variable Declarations
    int lv_biggestPlayer;
    playergroup lv_alivePG;
    point lv_point;
    unit lv_base;

    // Automatic Variable Declarations
    int auto1E02504B_val;
    playergroup autoB6C804E8_g;
    int autoB6C804E8_var;

    // Variable Initialization
    lv_biggestPlayer = 1;
    lv_alivePG = PlayerGroupEmpty();

    // Implementation
    auto1E02504B_val = EventDialogControl();
    if (auto1E02504B_val == gv_player[0].lv_itemName[1]) {
        if ((gf_ApprovedName(libNtve_gf_DialogItemEditValue(gv_player[0].lv_itemName[0], EventPlayer())) == true)) {
            gv_player[EventPlayer()].lv_name = libNtve_gf_DialogItemEditValue(gv_player[0].lv_itemName[0], EventPlayer());
            gf_BankSave(EventPlayer(), false);
            DialogSetVisible(gv_player[0].lv_mainName, PlayerGroupSingle(EventPlayer()), false);
            autoB6C804E8_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, true);
            autoB6C804E8_var = -1;
            while (true) {
                autoB6C804E8_var = PlayerGroupNextPlayer(autoB6C804E8_g, autoB6C804E8_var);
                if (autoB6C804E8_var < 0) { break; }
                if ((gv_player[autoB6C804E8_var].lv_name == "")) {
                    gv_gameInfo.lv_newbInGame = true;
                }
                else {
                    gv_gameInfo.lv_newbInGame = false;
                }
            }
        }

    }
    else if (auto1E02504B_val == gv_chat.lv_chatToggle) {
        if ((gv_chat.lv_allyChat[lp_player] == 1)) {
            libNtve_gf_SetDialogItemText(gv_chat.lv_chatToggle, StringExternal("Param/Value/AD7F5870"), PlayerGroupSingle(lp_player));
            gv_chat.lv_allyChat[lp_player] = 0;
        }
        else {
            libNtve_gf_SetDialogItemText(gv_chat.lv_chatToggle, StringExternal("Param/Value/9D8233A6"), PlayerGroupSingle(lp_player));
            gv_chat.lv_allyChat[lp_player] = 1;
        }
    }
    else {
    }
}

void gf_ResetMap () {
    // Automatic Variable Declarations
    unitgroup auto8CB0B455_g;
    int auto8CB0B455_u;
    unit auto8CB0B455_var;
    unitgroup autoD2165D9F_g;
    int autoD2165D9F_u;
    unit autoD2165D9F_var;
    playergroup autoE5A8C2D6_g;
    int autoE5A8C2D6_var;
    unitgroup autoE92C557C_g;
    int autoE92C557C_u;
    unit autoE92C557C_var;
    int autoCED332E2_ae;
    int autoCED332E2_var;
    unitgroup auto4E1D8459_g;
    int auto4E1D8459_u;
    unit auto4E1D8459_var;
    unitgroup auto1D5BEB87_g;
    int auto1D5BEB87_u;
    unit auto1D5BEB87_var;
    playergroup auto0713D0E2_g;
    int auto0713D0E2_var;
    playergroup auto048A270C_g;
    int auto048A270C_var;

    // Implementation
    gv_gameInfo.lv_currentTime = 45;
    auto8CB0B455_g = gv_gameInfo.lv_notBarracks;
    auto8CB0B455_u = UnitGroupCount(auto8CB0B455_g, c_unitCountAll);
    for (;; auto8CB0B455_u -= 1) {
        auto8CB0B455_var = UnitGroupUnitFromEnd(auto8CB0B455_g, auto8CB0B455_u);
        if (auto8CB0B455_var == null) { break; }
        UnitKill(auto8CB0B455_var);
    }
    autoD2165D9F_g = gv_gameInfo.lv_allArmy;
    autoD2165D9F_u = UnitGroupCount(autoD2165D9F_g, c_unitCountAll);
    for (;; autoD2165D9F_u -= 1) {
        autoD2165D9F_var = UnitGroupUnitFromEnd(autoD2165D9F_g, autoD2165D9F_u);
        if (autoD2165D9F_var == null) { break; }
        UnitKill(autoD2165D9F_var);
    }
    autoE5A8C2D6_g = PlayerGroupActive();
    autoE5A8C2D6_var = -1;
    while (true) {
        autoE5A8C2D6_var = PlayerGroupNextPlayer(autoE5A8C2D6_g, autoE5A8C2D6_var);
        if (autoE5A8C2D6_var < 0) { break; }
        PlayerModifyPropertyInt(autoE5A8C2D6_var, c_playerPropMinerals, c_playerPropOperSetTo, 0);
        PlayerModifyPropertyInt(autoE5A8C2D6_var, c_playerPropVespene, c_playerPropOperSetTo, 0);
        gv_player[autoE5A8C2D6_var].lv_bases = 0;
        gv_player[autoE5A8C2D6_var].lv_income_Current = 0;
        gv_player[autoE5A8C2D6_var].lv_income_Previous = 0;
        gv_player[autoE5A8C2D6_var].lv_income_Previous = 0;
        gv_player[autoE5A8C2D6_var].lv_bounty = 0.0;
    }
    autoE92C557C_g = UnitGroup(UnitGetType(autoE92C557C_var), c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE92C557C_u = UnitGroupCount(autoE92C557C_g, c_unitCountAll);
    for (;; autoE92C557C_u -= 1) {
        autoE92C557C_var = UnitGroupUnitFromEnd(autoE92C557C_g, autoE92C557C_u);
        if (autoE92C557C_var == null) { break; }
        if ((UnitGetType(autoE92C557C_var) == "SpawnZone")) {
            UnitSetOwner(autoE92C557C_var, 0, true);
        }

    }
    autoCED332E2_ae = gv_gameInfo.lv_maxCountries;
    autoCED332E2_var = 0;
    for ( ; autoCED332E2_var <= autoCED332E2_ae; autoCED332E2_var += 1 ) {
        auto4E1D8459_g = gv_country[autoCED332E2_var].lv_bases;
        auto4E1D8459_u = UnitGroupCount(auto4E1D8459_g, c_unitCountAll);
        for (;; auto4E1D8459_u -= 1) {
            auto4E1D8459_var = UnitGroupUnitFromEnd(auto4E1D8459_g, auto4E1D8459_u);
            if (auto4E1D8459_var == null) { break; }
            gv_country[autoCED332E2_var].lv_owner = 0;
            UnitSetOwner(auto4E1D8459_var, 0, true);
            UnitSetProgressComplete(EventUnit(), 1, 100);
            UnitSetProgressComplete(EventUnit(), 2, 100);
            UnitSetProgressComplete(EventUnit(), 3, 100);
            UnitSetProgressComplete(EventUnit(), 4, 100);
            UnitSetProgressComplete(EventUnit(), 5, 100);
            UnitSetProgressComplete(EventUnit(), 6, 100);
        }
        auto1D5BEB87_g = gv_country[autoCED332E2_var].lv_spawnGroup;
        auto1D5BEB87_u = UnitGroupCount(auto1D5BEB87_g, c_unitCountAll);
        for (;; auto1D5BEB87_u -= 1) {
            auto1D5BEB87_var = UnitGroupUnitFromEnd(auto1D5BEB87_g, auto1D5BEB87_u);
            if (auto1D5BEB87_var == null) { break; }
            gv_country[autoCED332E2_var].lv_owner = 0;
            UnitSetOwner(auto1D5BEB87_var, 0, true);
            UnitSetProgressComplete(EventUnit(), 1, 100);
            UnitSetProgressComplete(EventUnit(), 2, 100);
            UnitSetProgressComplete(EventUnit(), 3, 100);
            UnitSetProgressComplete(EventUnit(), 4, 100);
            UnitSetProgressComplete(EventUnit(), 5, 100);
            UnitSetProgressComplete(EventUnit(), 6, 100);
        }
    }
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_SetupBases, false, true);
    gf_ApplyTerritorialDistribution(gv_gameSettings.lv_territorialDistribution);
    auto0713D0E2_g = PlayerGroupActive();
    auto0713D0E2_var = -1;
    while (true) {
        auto0713D0E2_var = PlayerGroupNextPlayer(auto0713D0E2_g, auto0713D0E2_var);
        if (auto0713D0E2_var < 0) { break; }
        PlayerModifyPropertyInt(auto0713D0E2_var, c_playerPropMinerals, c_playerPropOperSetTo, 0);
        PlayerModifyPropertyInt(auto0713D0E2_var, c_playerPropVespene, c_playerPropOperSetTo, 0);
        gv_player[auto0713D0E2_var].lv_bases = 0;
        gv_player[auto0713D0E2_var].lv_income_Current = 0;
        gv_player[auto0713D0E2_var].lv_income_Previous = 0;
        gv_player[auto0713D0E2_var].lv_income_Previous = 0;
        gv_player[auto0713D0E2_var].lv_bounty = 0.0;
        PlayerScoreValueSetFromInt(auto0713D0E2_var, "UnitsKilledValue", 0);
        PlayerScoreValueSetFromInt(auto0713D0E2_var, "UnitsLostValue", 0);
        PlayerScoreValueSetFromInt(auto0713D0E2_var, "UnitsKilledCount", 0);
        PlayerScoreValueSetFromInt(auto0713D0E2_var, "UnitsLostCount", 0);
        gf_RefreshScoreboard(auto0713D0E2_var, ge_ScoreboardColumn_Death, StringToText(""));
        gf_RefreshScoreboard(auto0713D0E2_var, ge_ScoreboardColumn_Kills, StringToText(""));
    }
    Wait(2.0, c_timeGame);
    auto048A270C_g = gf_returnPlayerGroup(PlayerGroupAll(), true, false, false);
    auto048A270C_var = -1;
    while (true) {
        auto048A270C_var = PlayerGroupNextPlayer(auto048A270C_g, auto048A270C_var);
        if (auto048A270C_var < 0) { break; }
        PlayerScoreValueSetFromInt(auto048A270C_var, "UnitsTrainedCount", 0);
        gf_MissionStatement(auto048A270C_var);
    }
    SoundPlayForPlayer(SoundLink("AC_UI_Countdown_5MxNone", -1), c_maxPlayers, PlayerGroupAll(), 250.0, 0.0);
    Wait(4.5, c_timeGame);
    TriggerExecute(gt_Refresh, false, true);
    gv_gameInfo.lv_currentTime = 0;
    gv_gameInfo.lv_turns = -1;
}

void gf_ChatMessage (int lp_player, text lp_message, int lp_notification) {
    // Variable Declarations
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    playergroup auto70E673E2_g;
    int auto70E673E2_var;

    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Implementation
    if ((lp_notification == 1)) {
        PlayerGroupAdd(lv_playerGroup, lp_player);
    }
    else {
        libNtve_gf_AddPlayerGroupToPlayerGroup(gf_returnPlayerGroup(PlayerGroupActive(), true, false, true), lv_playerGroup);
    }
    auto70E673E2_g = lv_playerGroup;
    auto70E673E2_var = -1;
    while (true) {
        auto70E673E2_var = PlayerGroupNextPlayer(auto70E673E2_g, auto70E673E2_var);
        if (auto70E673E2_var < 0) { break; }
        gf_NotificationChatManagement(auto70E673E2_var, lp_message);
    }
}

trigger auto_gf_NotificationChatManagement_Trigger = null;
int auto_gf_NotificationChatManagement_lp_player;
text auto_gf_NotificationChatManagement_lp_text;

void gf_NotificationChatManagement (int lp_player, text lp_text) {
    auto_gf_NotificationChatManagement_lp_player = lp_player;
    auto_gf_NotificationChatManagement_lp_text = lp_text;

    if (auto_gf_NotificationChatManagement_Trigger == null) {
        auto_gf_NotificationChatManagement_Trigger = TriggerCreate("auto_gf_NotificationChatManagement_TriggerFunc");
    }

    TriggerExecute(auto_gf_NotificationChatManagement_Trigger, false, false);
}

bool auto_gf_NotificationChatManagement_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_NotificationChatManagement_lp_player;
    text lp_text = auto_gf_NotificationChatManagement_lp_text;

    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = gv_chat.lv_maxLength[lp_player];

    // Implementation
    while ((lv_i >= 0)) {
        if ((gv_chat.lv_dialogItem[lp_player][lv_i] != c_invalidDialogControlId)) {
            if ((lv_i == gv_chat.lv_maxLength[lp_player])) {
                DialogControlSetVisible(gv_chat.lv_dialogItem[lp_player][lv_i], PlayerGroupSingle(lp_player), false);
            }
            else {
                DialogControlSetPosition(gv_chat.lv_dialogItem[lp_player][lv_i], PlayerGroupSingle(lp_player), c_anchorBottom, 100, (380 - (((gv_chat.lv_maxLength[lp_player] - 1) - lv_i) * 31)));
            }
        }

        gv_chat.lv_dialogItem[lp_player][(lv_i + 1)] = gv_chat.lv_dialogItem[lp_player][lv_i];
        lv_i = (lv_i - 1);
    }
    libNtve_gf_CreateDialogItemLabel(gv_chat.lv_dialog[lp_player], 825, 31, c_anchorBottom, 100, (380 - (gv_chat.lv_maxLength[lp_player] * 31)), lp_text, ColorWithAlpha(0,0,0,0), false, 0.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChatDisplay", PlayerGroupSingle(lp_player));
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
    gv_chat.lv_dialogItem[lp_player][0] = DialogControlLastCreated();
    gf_ChatMessageFadeout(lp_player, DialogControlLastCreated());
    return true;
}

trigger auto_gf_ChatManagement_Trigger = null;
int auto_gf_ChatManagement_lp_player;
int auto_gf_ChatManagement_lp_postingPlayer;
string auto_gf_ChatManagement_lp_message;

void gf_ChatManagement (int lp_player, int lp_postingPlayer, string lp_message) {
    auto_gf_ChatManagement_lp_player = lp_player;
    auto_gf_ChatManagement_lp_postingPlayer = lp_postingPlayer;
    auto_gf_ChatManagement_lp_message = lp_message;

    if (auto_gf_ChatManagement_Trigger == null) {
        auto_gf_ChatManagement_Trigger = TriggerCreate("auto_gf_ChatManagement_TriggerFunc");
    }

    TriggerExecute(auto_gf_ChatManagement_Trigger, false, false);
}

bool auto_gf_ChatManagement_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_ChatManagement_lp_player;
    int lp_postingPlayer = auto_gf_ChatManagement_lp_postingPlayer;
    string lp_message = auto_gf_ChatManagement_lp_message;

    // Variable Declarations
    text lv_preMessage;
    string lv_message;
    string lv_workedMessage;
    int lv_i;
    bool lv_runFirstTime;
    int lv_start;
    int lv_end;
    int lv_emoticon;
    bool lv_exit;
    bool lv_twoLiner;
    string lv_flag;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_message = StringSub((" " + lp_message), 1, 90);
    lv_workedMessage = "";
    lv_i = gv_chat.lv_maxLength[lp_player];
    lv_runFirstTime = true;
    lv_start = 1;
    lv_end = 40;
    lv_emoticon = 1;
    lv_flag = "";

    // Implementation
    if ((gv_player[lp_postingPlayer].lv_homeCountry > 0) && (gv_player[lp_postingPlayer].lv_showHideNationality == true)) {
        lv_flag = ("<img path=\"" + libNtve_gf_DialogItemImage(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_postingPlayer]][gv_scoreboard.lv_flag], lp_postingPlayer) + "\" width=\"30\" height=\"22\"/> ");
    }
    else {
        lv_flag = "";
    }
    if ((lp_postingPlayer != 0)) {
        if ((gv_chat.lv_allyChat[lp_player] == 0)) {
            lv_preMessage = (StringToText("") + StringToText(lv_flag) + TextWithColor((gv_player[lp_postingPlayer].lv_nickname + StringToText(":")), gv_player[lp_postingPlayer].lv_currentColour) + StringToText(""));
        }
        else {
            lv_preMessage = (StringToText("[A] ") + StringToText(lv_flag) + TextWithColor((gv_player[lp_postingPlayer].lv_nickname + StringToText(":")), gv_player[lp_postingPlayer].lv_currentColour) + StringToText(""));
        }
    }
    else {
        lv_preMessage = (StringToText("") + StringToText("") + StringToText("<c val=\"FFFF00\">Tutorial:</c> ") + StringToText(""));
    }
    while ((lv_exit == false)) {
        if ((StringLength(lp_message) < lv_start)) {
            break;
        }

        lv_i = gv_chat.lv_maxLength[lp_player];
        lv_workedMessage = StringSub(lv_message, lv_start, lv_end);
        while ((lv_emoticon <= gv_chat.lv_emoticonMax)) {
            lv_workedMessage = StringReplaceWord(lv_workedMessage, gv_chat.lv_emoticonText[lv_emoticon], gv_chat.lv_emoticonIcon[lv_emoticon], c_stringReplaceAll, c_stringNoCase);
            lv_emoticon = (lv_emoticon + 1);
        }
        lv_emoticon = 1;
        gv_chatMessage = (lv_preMessage + StringToText(lv_workedMessage));
        DialogControlAddItem(gv_log.lv_messageDI, PlayerGroupSingle(lp_player), gv_chatMessage);
        if ((lv_runFirstTime == true)) {
            lv_end = (lv_end + 20);
            lv_preMessage = StringToText("");
            lv_runFirstTime = false;
        }
        else {
            break;
        }
        lv_start = (lv_start + 40);
        lv_end = (lv_end + 60);
    }
    return true;
}

trigger auto_gf_ChatMessageFadeout_Trigger = null;
int auto_gf_ChatMessageFadeout_lp_player;
int auto_gf_ChatMessageFadeout_lp_dialogItem;

void gf_ChatMessageFadeout (int lp_player, int lp_dialogItem) {
    auto_gf_ChatMessageFadeout_lp_player = lp_player;
    auto_gf_ChatMessageFadeout_lp_dialogItem = lp_dialogItem;

    if (auto_gf_ChatMessageFadeout_Trigger == null) {
        auto_gf_ChatMessageFadeout_Trigger = TriggerCreate("auto_gf_ChatMessageFadeout_TriggerFunc");
    }

    TriggerExecute(auto_gf_ChatMessageFadeout_Trigger, false, false);
}

bool auto_gf_ChatMessageFadeout_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_ChatMessageFadeout_lp_player;
    int lp_dialogItem = auto_gf_ChatMessageFadeout_lp_dialogItem;

    // Variable Declarations
    int lv_i;
    int lv_player;
    int lv_dialogItem;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = lp_player;
    lv_dialogItem = lp_dialogItem;

    // Implementation
    Wait((gv_chat.lv_startDuration - gv_chat.lv_startFade), c_timeReal);
    if ((DialogControlIsVisible(lp_dialogItem, lp_player) == true)) {
        DialogControlFadeTransparency(lv_dialogItem, PlayerGroupSingle(lp_player), gv_chat.lv_startFade, 100.0);
    }

    Wait(gv_chat.lv_startFade, c_timeReal);
    while ((lv_i <= gv_chat.lv_maxLength[lp_player])) {
        if ((gv_chat.lv_dialogItem[lp_player][lv_i] == lp_dialogItem)) {
            gv_chat.lv_dialogItem[lp_player][lv_i] = c_invalidDialogControlId;
            break;
        }

        lv_i = (lv_i + 1);
    }
    DialogControlDestroy(lp_dialogItem);
    return true;
}

void gf_InitDialogFading (int lp_dialogItem) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlFadeTransparency(lp_dialogItem, PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(lp_dialogItem, PlayerGroupAll(), 1.5, 0.0);
}

void gf_SkinsCreate () {
    // Variable Declarations
    int lv_firstDimensonValue;
    int lv_secondDimensionValue;
    int lv_thirdDimensionValue;
    int lv_i;
    int lv_fourthDimensonValue;
    string[4][7][6] lv_images;
    string lv_backgroundImage;

    // Automatic Variable Declarations
    playergroup auto4EDAB46F_g;
    int auto4EDAB46F_var;
    const int autoE08409A3_ae = 5;
    int autoE08409A3_var;
    playergroup autoBD76E3FC_g;
    int autoBD76E3FC_var;
    const int auto176ED668_ae = 5;
    int auto176ED668_var;
    playergroup autoBDFB5F61_g;
    int autoBDFB5F61_var;
    const int auto24506E01_ae = 5;
    int auto24506E01_var;

    // Variable Initialization
    lv_firstDimensonValue = 1;
    lv_secondDimensionValue = 1;
    lv_thirdDimensionValue = 1;
    lv_i = 1;

    // Implementation
    gv_images[1][1][1] = "Assets\\Textures\\btn-unit-zerg-infestedscv.dds";
    gv_tooltipName[1][1][1] = "SCV";
    gv_requirements[1][1][1] = "1500";
    gv_images[1][1][2] = "Assets\\Textures\\btn-unit-collection-hellion-covertops.dds";
    gv_tooltipName[1][1][2] = "Hellion";
    gv_requirements[1][1][2] = "5000";
    gv_images[1][1][3] = "Assets\\Textures\\btn-unit-collection-marine-junker.dds";
    gv_tooltipName[1][1][3] = "Marine";
    gv_requirements[1][1][3] = "10000";
    gv_images[1][1][4] = "Assets\\Textures\\btn-unit-collection-banshee-junker.dds";
    gv_tooltipName[1][1][4] = "Banshee";
    gv_requirements[1][1][4] = "25000";
    gv_images[1][1][5] = "Assets\\Textures\\btn-unit-terran-targetingdrone.dds";
    gv_tooltipName[1][1][5] = "Science Vessel";
    gv_requirements[1][1][5] = "50000";
    gv_images[1][2][1] = "Assets\\Textures\\btn-unit-terran-medickillsquad.dds";
    gv_tooltipName[1][2][1] = "Medic";
    gv_requirements[1][2][1] = "75000";
    gv_images[1][2][2] = "Assets\\Textures\\btn-unit-collection-tank-junker.dds";
    gv_tooltipName[1][2][2] = "Tank";
    gv_requirements[1][2][2] = "100000";
    gv_images[1][2][3] = "Assets\\Textures\\btn-unit-terran-banshee-umojan.dds";
    gv_tooltipName[1][2][3] = "Banshee";
    gv_requirements[1][2][3] = "125000";
    gv_images[1][2][4] = "Assets\\Textures\\btn-unit-collection-terran-mecha-viking.dds";
    gv_tooltipName[1][2][4] = "Viking";
    gv_requirements[1][2][4] = "150000";
    gv_images[1][2][5] = "Assets\\Textures\\btn-unit-terran-marauderkillsquad.dds";
    gv_tooltipName[1][2][5] = "Marauder";
    gv_requirements[1][2][5] = "200000";
    gv_images[1][3][1] = "Assets\\Textures\\btn-unit-terran-merc-viking.dds";
    gv_tooltipName[1][3][1] = "Viking";
    gv_requirements[1][3][1] = "250000";
    gv_images[1][3][2] = "Assets\\Textures\\btn-unit-terran-merc-scv.dds";
    gv_tooltipName[1][3][2] = "SCV";
    gv_requirements[1][3][2] = "300000";
    gv_images[1][3][3] = "Assets\\Textures\\btn-unit-collection-banshee-covertops.dds";
    gv_tooltipName[1][3][3] = "Banshee";
    gv_requirements[1][3][3] = "350000";
    gv_images[1][3][4] = "Assets\\Textures\\btn-unit-terran-hellionmercenary.dds";
    gv_tooltipName[1][3][4] = "Hellion";
    gv_requirements[1][3][4] = "400000";
    gv_images[1][3][5] = "Assets\\Textures\\btn-unit-collection-siegetank-covertops.dds";
    gv_tooltipName[1][3][5] = "Tank";
    gv_requirements[1][3][5] = "500000";
    gv_images[1][4][1] = "Assets\\Textures\\btn-unit-collection-hellion-umojan.dds";
    gv_tooltipName[1][4][1] = "Hellion";
    gv_requirements[1][4][1] = "600000";
    gv_images[1][4][2] = "Assets\\Textures\\btn-unit-biomechanicaldrone.dds";
    gv_tooltipName[1][4][2] = "Science Vessel";
    gv_requirements[1][4][2] = "700000";
    gv_images[1][4][3] = "Assets\\Textures\\btn-unit-terran-battlecruiserloki.dds";
    gv_tooltipName[1][4][3] = "Battlecruiser";
    gv_requirements[1][4][3] = "800000";
    gv_images[1][4][4] = "Assets\\Textures\\btn-unit-collection-marauder-covertops.dds";
    gv_tooltipName[1][4][4] = "Marauder";
    gv_requirements[1][4][4] = "900000";
    gv_images[1][4][5] = "Assets\\Textures\\btn-unit-terran-spectre.dds";
    gv_tooltipName[1][4][5] = "Marine";
    gv_requirements[1][4][5] = "1000000";
    gv_images[1][5][1] = "Assets\\Textures\\btn-unit-terran-marauderblackops.dds";
    gv_tooltipName[1][5][1] = "Marauder";
    gv_requirements[1][5][1] = "1250000";
    gv_images[1][5][2] = "Assets\\Textures\\btn-unit-collection-vikingfighter-umojan.dds";
    gv_tooltipName[1][5][2] = "Viking";
    gv_requirements[1][5][2] = "1500000";
    gv_images[1][5][3] = "Assets\\Textures\\btn-unit-terran-siegetankblackops-tank.dds";
    gv_tooltipName[1][5][3] = "Tank";
    gv_requirements[1][5][3] = "1750000";
    gv_images[1][5][4] = "Assets\\Textures\\btn-building-terran-merccompound.dds";
    gv_tooltipName[1][5][4] = "Barracks";
    gv_requirements[1][5][4] = "2000000";
    gv_images[2][1][1] = "Assets\\Textures\\btn-unit-zerg-infestedmarine.dds";
    gv_tooltipName[2][1][1] = "Marine";
    gv_requirements[2][1][1] = "5";
    gv_images[2][1][2] = "Assets\\Textures\\btn-unit-collection-hellion-junker.dds";
    gv_tooltipName[2][1][2] = "Hellion";
    gv_requirements[2][1][2] = "10";
    gv_images[2][1][3] = "Assets\\Textures\\btn-unit-terran-bansheemercenary.dds";
    gv_tooltipName[2][1][3] = "Banshee";
    gv_requirements[2][1][3] = "25";
    gv_images[2][1][4] = "Assets\\Textures\\btn-unit-collection-marauder-junker.dds";
    gv_tooltipName[2][1][4] = "Marauder";
    gv_requirements[2][1][4] = "35";
    gv_images[2][1][5] = "Assets\\Textures\\btn-unit-terran-marinemercenary.dds";
    gv_tooltipName[2][1][5] = "Marine";
    gv_requirements[2][1][5] = "50";
    gv_images[2][2][1] = "Assets\\Textures\\btn-unit-terran-goliathmercenary.dds";
    gv_tooltipName[2][2][1] = "Goliath";
    gv_requirements[2][2][1] = "75";
    gv_images[2][2][2] = "Assets\\Textures\\btn-unit-terran-siegetankmercenary-tank.dds";
    gv_tooltipName[2][2][2] = "Tank";
    gv_requirements[2][2][2] = "100";
    gv_images[2][2][3] = "Assets\\Textures\\btn-unit-terran-marineblackops.dds";
    gv_tooltipName[2][2][3] = "Marine";
    gv_requirements[2][2][3] = "125";
    gv_images[2][2][4] = "Assets\\Textures\\btn-unit-collection-scv-umojan.dds";
    gv_tooltipName[2][2][4] = "SCV";
    gv_requirements[2][2][4] = "150";
    gv_images[2][2][5] = "Assets\\Textures\\btn-unit-collection-vikingfighter-covertops.dds";
    gv_tooltipName[2][2][5] = "Viking";
    gv_requirements[2][2][5] = "200";
    gv_images[2][3][1] = "Assets\\Textures\\btn-unit-terran-maraudermercenary.dds";
    gv_tooltipName[2][3][1] = "Marauder";
    gv_requirements[2][3][1] = "250";
    gv_images[2][3][2] = "Assets\\Textures\\btn-unit-collection-battlecruiser-covertops.dds";
    gv_tooltipName[2][3][2] = "Battlecruiser";
    gv_requirements[2][3][2] = "300";
    gv_images[2][3][3] = "Assets\\Textures\\btn-unit-terran-bansheeblackops.dds";
    gv_tooltipName[2][3][3] = "Banshee";
    gv_requirements[2][3][3] = "350";
    gv_images[2][3][4] = "Assets\\Textures\\btn-unit-collection-battlecruiser-junker.dds";
    gv_tooltipName[2][3][4] = "Battlecruiser";
    gv_requirements[2][3][4] = "400";
    gv_images[2][3][5] = "Assets\\Textures\\btn-unit-terran-taurenspacemarine.dds";
    gv_tooltipName[2][3][5] = "Marine";
    gv_requirements[2][3][5] = "500";
    gv_images[2][4][1] = "Assets\\Textures\\btn-unit-maurader-collectionskin-deluxe.dds";
    gv_tooltipName[2][4][1] = "Marauder";
    gv_requirements[2][4][1] = "600";
    gv_images[2][4][2] = "Assets\\Textures\\btn-unit-collection-siegetank-umojan.dds";
    gv_tooltipName[2][4][2] = "Tank";
    gv_requirements[2][4][2] = "700";
    gv_images[2][4][3] = "Assets\\Textures\\btn-unit-terran-gorgonbattlecruiser.dds";
    gv_tooltipName[2][4][3] = "Battlecruiser";
    gv_requirements[2][4][3] = "800";
    gv_images[2][4][4] = "Assets\\Textures\\btn-building-terran-biodomecommand.dds";
    gv_tooltipName[2][4][4] = "Starport";
    gv_requirements[2][4][4] = "900";
    gv_images[3][1][1] = "Assets\\Textures\\btn-unit-collection-marauder-umojan.dds";
    gv_tooltipName[3][1][1] = "Marauder";
    gv_requirements[3][1][1] = "0.2";
    gv_images[3][1][2] = "Assets\\Textures\\btn-unit-collection-siegetank-commando.dds";
    gv_tooltipName[3][1][2] = "Tank";
    gv_requirements[3][1][2] = "0.25";
    gv_images[3][1][3] = "risk\\wireframe-terran-cruiserquadedit.dds";
    gv_tooltipName[3][1][3] = "Hellion";
    gv_requirements[3][1][3] = "0.3";
    gv_images[3][1][4] = "Assets\\Textures\\btn-unit-terran-medicelite.dds";
    gv_tooltipName[3][1][4] = "Medic";
    gv_requirements[3][1][4] = "0.35";
    gv_images[3][1][5] = "Assets\\Textures\\btn-unit-terran-goliathblackops.dds";
    gv_tooltipName[3][1][5] = "Goliath";
    gv_requirements[3][1][5] = "0.40";
    gv_images[3][2][1] = "Assets\\Textures\\btn-unit-collection-scv-covertops.dds";
    gv_tooltipName[3][2][1] = "SCV";
    gv_requirements[3][2][1] = "0.45";
    gv_images[3][2][2] = "risk\\sciencevesselskin.dds";
    gv_tooltipName[3][2][2] = "Science Vessel";
    gv_requirements[3][2][2] = "0.48";
    gv_images[3][2][3] = "Assets\\Textures\\btn-unit-terran-mule.dds";
    gv_tooltipName[3][2][3] = "SCV";
    gv_requirements[3][2][3] = "0.50";
    gv_images[3][2][4] = "Assets\\Textures\\btn-unit-terran-marine-umojan.dds";
    gv_tooltipName[3][2][4] = "Marine";
    gv_requirements[3][2][4] = "0.52";
    gv_images[3][2][5] = "Assets\\Textures\\btn-unit-collection-battlecruiser-umojan.dds";
    gv_tooltipName[3][2][5] = "Battlecruiser";
    gv_requirements[3][2][5] = "0.54";
    gv_images[3][3][1] = "Assets\\Textures\\btn-unit-terran-cerberus.dds";
    gv_tooltipName[3][3][1] = "Battlecruiser";
    gv_requirements[3][3][1] = "0.56";
    auto4EDAB46F_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
    auto4EDAB46F_var = -1;
    while (true) {
        auto4EDAB46F_var = PlayerGroupNextPlayer(auto4EDAB46F_g, auto4EDAB46F_var);
        if (auto4EDAB46F_var < 0) { break; }
        DialogCreate(400, 400, c_anchorBottom, -870, 475, true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 400, 400, c_anchorBottom, 0, 0, StringToText(""), "Assets\\Textures\\ui_camapaignmenu_dialogbox_base.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_skinKill[auto4EDAB46F_var] = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        DialogSetImageVisible(gv_skinKill[auto4EDAB46F_var], false);
        autoE08409A3_var = 1;
        for ( ; autoE08409A3_var <= autoE08409A3_ae; autoE08409A3_var += 1 ) {
            gf_SkinsButtons(1, 1, autoE08409A3_var, auto4EDAB46F_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[1][1][autoE08409A3_var], 0);
            gf_SkinsButtons(1, 2, autoE08409A3_var, auto4EDAB46F_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_prot.dds", (Color(100,100,100)), gv_images[1][2][autoE08409A3_var], 0);
            gf_SkinsButtons(1, 3, autoE08409A3_var, auto4EDAB46F_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[1][3][autoE08409A3_var], 0);
            gf_SkinsButtons(1, 4, autoE08409A3_var, auto4EDAB46F_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[1][4][autoE08409A3_var], 0);
            gf_SkinsButtons(1, 5, 1, auto4EDAB46F_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[1][5][1], 0);
            gf_SkinsButtons(1, 5, 2, auto4EDAB46F_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[1][5][2], 0);
            gf_SkinsButtons(1, 5, 3, auto4EDAB46F_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[1][5][3], 0);
            gf_SkinsButtons(1, 5, 4, auto4EDAB46F_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[1][5][4], 0);
        }
    }
    autoBD76E3FC_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
    autoBD76E3FC_var = -1;
    while (true) {
        autoBD76E3FC_var = PlayerGroupNextPlayer(autoBD76E3FC_g, autoBD76E3FC_var);
        if (autoBD76E3FC_var < 0) { break; }
        DialogCreate(400, 324, c_anchorBottom, -870, 475, true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 400, 324, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_camapaignmenu_dialogbox_base.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_skinWin[autoBD76E3FC_var] = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        DialogSetImageVisible(gv_skinWin[autoBD76E3FC_var], false);
        auto176ED668_var = 1;
        for ( ; auto176ED668_var <= auto176ED668_ae; auto176ED668_var += 1 ) {
            gf_SkinsButtons(2, 1, auto176ED668_var, autoBD76E3FC_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[2][1][auto176ED668_var], 1);
            gf_SkinsButtons(2, 2, auto176ED668_var, autoBD76E3FC_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_prot.dds", (Color(100,100,100)), gv_images[2][2][auto176ED668_var], 1);
            gf_SkinsButtons(2, 3, auto176ED668_var, autoBD76E3FC_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[2][3][auto176ED668_var], 1);
            gf_SkinsButtons(2, 4, 1, autoBD76E3FC_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[2][4][1], 1);
            gf_SkinsButtons(2, 4, 2, autoBD76E3FC_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[2][4][2], 1);
            gf_SkinsButtons(2, 4, 3, autoBD76E3FC_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[2][4][3], 1);
            gf_SkinsButtons(2, 4, 4, autoBD76E3FC_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[2][4][4], 1);
        }
    }
    autoBDFB5F61_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
    autoBDFB5F61_var = -1;
    while (true) {
        autoBDFB5F61_var = PlayerGroupNextPlayer(autoBDFB5F61_g, autoBDFB5F61_var);
        if (autoBDFB5F61_var < 0) { break; }
        DialogCreate(400, 248, c_anchorBottom, -870, 475, true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 400, 248, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_camapaignmenu_dialogbox_base.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_skinAchieve[autoBDFB5F61_var] = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        DialogSetImageVisible(gv_skinAchieve[autoBDFB5F61_var], false);
        auto24506E01_var = 1;
        for ( ; auto24506E01_var <= auto24506E01_ae; auto24506E01_var += 1 ) {
            gf_SkinsButtons(3, 1, auto24506E01_var, autoBDFB5F61_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[3][1][auto24506E01_var], 2);
            gf_SkinsButtons(3, 2, auto24506E01_var, autoBDFB5F61_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_prot.dds", (Color(100,100,100)), gv_images[3][2][auto24506E01_var], 2);
            gf_SkinsButtons(3, 3, 1, autoBDFB5F61_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[3][3][1], 2);
        }
    }
}

void gf_SkinsButtons (int lp_firstDimension, int lp_secondDimension, int lp_thirdDimension, int lp_fourthDimension, string lp_buttonBorder, color lp_borderColor, string lp_buttonPortrait, int lp_achievementType) {
    // Variable Declarations
    fixed lv_winrate;
    int lv_offSetButtonsvertical;
    int lv_offSetButtonshorizontal;
    int lv_offsetwidth;
    int lv_offsetheight;
    int lv_arrayValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_offSetButtonsvertical = 10;
    lv_offSetButtonshorizontal = 6;
    lv_offsetwidth = ((lp_thirdDimension - 1) * 76);
    lv_offsetheight = ((lp_secondDimension - 1) * 76);

    // Implementation
    if ((lp_achievementType == 0)) {
        if ((StringToInt(gv_requirements[lp_firstDimension][lp_secondDimension][lp_thirdDimension]) > gv_player[lp_fourthDimension].lv_kills)) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 84, 84, c_anchorTopLeft, (lv_offsetwidth+lv_offSetButtonshorizontal), (lv_offsetheight+lv_offSetButtonsvertical), StringToText(""), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", c_triggerImageTypeNormal, true, Color(92.16, 79.61, 79.61), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemTintColor(DialogControlLastCreated(), Color(100.00, 50.20, 0.00), PlayerGroupAll());
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", PlayerGroupAll());
            gv_skinBorder[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, ((lv_offsetwidth + lv_offSetButtonshorizontal) + 2), ((lv_offsetheight + lv_offSetButtonsvertical) + 2), StringToText(""), lp_buttonPortrait, c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
            gv_skinPortrait[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension] = DialogControlLastCreated();
            TextExpressionSetToken("Param/Expression/1631AFEA", "A", StringExternal("Param/Value/DE167823"));
            TextExpressionSetToken("Param/Expression/1631AFEA", "B", StringToText(gv_requirements[lp_firstDimension][lp_secondDimension][lp_thirdDimension]));
            TextExpressionSetToken("Param/Expression/1631AFEA", "C", StringExternal("Param/Value/74DD3BC1"));
            TextExpressionSetToken("Param/Expression/82B757EC", "D", StringToText(gv_tooltipName[lp_firstDimension][lp_secondDimension][lp_thirdDimension]));
            TextExpressionSetToken("Param/Expression/82B757EC", "A", TextWithColor(TextExpressionAssemble("Param/Expression/1631AFEA"), Color(90.0, 15.0, 20.0)));
            TextExpressionSetToken("Param/Expression/82B757EC", "B", StringToText(""));
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 74, 74, c_anchorTopLeft, ((lv_offSetButtonshorizontal + lv_offsetwidth) + 2), ((lv_offSetButtonsvertical + lv_offsetheight) + 2), TextExpressionAssemble("Param/Expression/82B757EC"), StringToText(""), "");
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\zergling_emissive.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glues_pageassets_graphiclistitem_textbackground_selected.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
            libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
            gv_skinButton[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
            DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_skinBorder[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_skinPortrait[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension], PlayerGroupAll(), false);
            DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
        }
        else {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 84, 84, c_anchorTopLeft, (lv_offsetwidth+lv_offSetButtonshorizontal), (lv_offsetheight+lv_offSetButtonsvertical), StringToText(""), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", c_triggerImageTypeNormal, true, Color(92.16, 79.61, 79.61), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemTintColor(DialogControlLastCreated(), Color(100.00, 50.20, 0.00), PlayerGroupAll());
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", PlayerGroupAll());
            gv_skinBorder[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, ((lv_offsetwidth + lv_offSetButtonshorizontal) + 2), ((lv_offsetheight + lv_offSetButtonsvertical) + 2), StringToText(""), lp_buttonPortrait, c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
            gv_skinPortrait[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension] = DialogControlLastCreated();
            TextExpressionSetToken("Param/Expression/D2541D45", "A", StringToText(gv_tooltipName[lp_firstDimension][lp_secondDimension][lp_thirdDimension]));
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 74, 74, c_anchorTopLeft, ((lv_offSetButtonshorizontal + lv_offsetwidth) + 2), ((lv_offSetButtonsvertical + lv_offsetheight) + 2), TextExpressionAssemble("Param/Expression/D2541D45"), StringToText(""), "");
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\zergling_emissive.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glues_pageassets_graphiclistitem_textbackground_selected.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
            libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
            gv_skinButton[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        }
    }
    else if ((lp_achievementType == 1)) {
        if ((StringToInt(gv_requirements[lp_firstDimension][lp_secondDimension][lp_thirdDimension]) > gv_player[lp_fourthDimension].lv_win)) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 84, 84, c_anchorTopLeft, (lv_offsetwidth+lv_offSetButtonshorizontal), (lv_offsetheight+lv_offSetButtonsvertical), StringToText(""), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", c_triggerImageTypeNormal, true, Color(92.16, 79.61, 79.61), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemTintColor(DialogControlLastCreated(), Color(100.00, 50.20, 0.00), PlayerGroupAll());
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", PlayerGroupAll());
            gv_skinBorder[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, ((lv_offsetwidth + lv_offSetButtonshorizontal) + 2), ((lv_offsetheight + lv_offSetButtonsvertical) + 2), StringToText(""), lp_buttonPortrait, c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
            gv_skinPortrait[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension] = DialogControlLastCreated();
            TextExpressionSetToken("Param/Expression/E6CA51C5", "A", StringExternal("Param/Value/5A974830"));
            TextExpressionSetToken("Param/Expression/E6CA51C5", "B", StringToText(gv_requirements[lp_firstDimension][lp_secondDimension][lp_thirdDimension]));
            TextExpressionSetToken("Param/Expression/E6CA51C5", "C", StringExternal("Param/Value/8CE7394A"));
            TextExpressionSetToken("Param/Expression/F28E2791", "D", StringToText(gv_tooltipName[lp_firstDimension][lp_secondDimension][lp_thirdDimension]));
            TextExpressionSetToken("Param/Expression/F28E2791", "A", TextWithColor(TextExpressionAssemble("Param/Expression/E6CA51C5"), Color(90.0, 15.0, 20.0)));
            TextExpressionSetToken("Param/Expression/F28E2791", "B", StringToText(""));
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 74, 74, c_anchorTopLeft, ((lv_offSetButtonshorizontal + lv_offsetwidth) + 2), ((lv_offSetButtonsvertical + lv_offsetheight) + 2), TextExpressionAssemble("Param/Expression/F28E2791"), StringToText(""), "");
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\zergling_emissive.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glues_pageassets_graphiclistitem_textbackground_selected.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
            libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
            gv_skinButton[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
            DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_skinBorder[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_skinPortrait[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension], PlayerGroupAll(), false);
            DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
        }
        else {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 84, 84, c_anchorTopLeft, (lv_offsetwidth+lv_offSetButtonshorizontal), (lv_offsetheight+lv_offSetButtonsvertical), StringToText(""), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", c_triggerImageTypeNormal, true, Color(92.16, 79.61, 79.61), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemTintColor(DialogControlLastCreated(), Color(100.00, 50.20, 0.00), PlayerGroupAll());
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", PlayerGroupAll());
            gv_skinBorder[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, ((lv_offsetwidth + lv_offSetButtonshorizontal) + 2), ((lv_offsetheight + lv_offSetButtonsvertical) + 2), StringToText(""), lp_buttonPortrait, c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
            gv_skinPortrait[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension] = DialogControlLastCreated();
            TextExpressionSetToken("Param/Expression/B0D35940", "A", StringToText(gv_tooltipName[lp_firstDimension][lp_secondDimension][lp_thirdDimension]));
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 74, 74, c_anchorTopLeft, ((lv_offSetButtonshorizontal + lv_offsetwidth) + 2), ((lv_offSetButtonsvertical + lv_offsetheight) + 2), TextExpressionAssemble("Param/Expression/B0D35940"), StringToText(""), "");
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\zergling_emissive.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glues_pageassets_graphiclistitem_textbackground_selected.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
            libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
            gv_skinButton[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        }
    }
    else if ((lp_achievementType == 2)) {
        if ((((gv_player[lp_fourthDimension].lv_loses + gv_player[lp_fourthDimension].lv_win) < 15))) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 84, 84, c_anchorTopLeft, (lv_offsetwidth+lv_offSetButtonshorizontal), (lv_offsetheight+lv_offSetButtonsvertical), StringToText(""), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", c_triggerImageTypeNormal, true, Color(92.16, 79.61, 79.61), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemTintColor(DialogControlLastCreated(), Color(100.00, 50.20, 0.00), PlayerGroupAll());
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", PlayerGroupAll());
            gv_skinBorder[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, ((lv_offsetwidth + lv_offSetButtonshorizontal) + 2), ((lv_offsetheight + lv_offSetButtonsvertical) + 2), StringToText(""), lp_buttonPortrait, c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
            gv_skinPortrait[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension] = DialogControlLastCreated();
            TextExpressionSetToken("Param/Expression/8BA30089", "A", StringExternal("Param/Value/3728C733"));
            TextExpressionSetToken("Param/Expression/8BA30089", "B", StringToText(FixedToString((StringToFixed(gv_requirements[lp_firstDimension][lp_secondDimension][lp_thirdDimension]) * 100.0), 0)));
            TextExpressionSetToken("Param/Expression/8BA30089", "C", StringExternal("Param/Value/49958E24"));
            TextExpressionSetToken("Param/Expression/01850760", "D", StringToText(gv_tooltipName[lp_firstDimension][lp_secondDimension][lp_thirdDimension]));
            TextExpressionSetToken("Param/Expression/01850760", "A", TextWithColor(TextExpressionAssemble("Param/Expression/8BA30089"), Color(90.0, 15.0, 20.0)));
            TextExpressionSetToken("Param/Expression/01850760", "B", StringToText(""));
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 74, 74, c_anchorTopLeft, ((lv_offSetButtonshorizontal + lv_offsetwidth) + 2), ((lv_offSetButtonsvertical + lv_offsetheight) + 2), TextExpressionAssemble("Param/Expression/01850760"), StringToText(""), "");
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\zergling_emissive.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glues_pageassets_graphiclistitem_textbackground_selected.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
            libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
            gv_skinButton[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
            DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_skinPortrait[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_skinBorder[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension], PlayerGroupAll(), false);
            DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
        }
        else {
            lv_winrate = (IntToFixed(gv_player[lp_fourthDimension].lv_win) / (IntToFixed(gv_player[lp_fourthDimension].lv_loses) + IntToFixed(gv_player[lp_fourthDimension].lv_win)));
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 84, 84, c_anchorTopLeft, (lv_offsetwidth+lv_offSetButtonshorizontal), (lv_offsetheight+lv_offSetButtonsvertical), StringToText(""), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", c_triggerImageTypeNormal, true, Color(92.16, 79.61, 79.61), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemTintColor(DialogControlLastCreated(), Color(100.00, 50.20, 0.00), PlayerGroupAll());
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", PlayerGroupAll());
            gv_skinBorder[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, ((lv_offsetwidth + lv_offSetButtonshorizontal) + 2), ((lv_offsetheight + lv_offSetButtonsvertical) + 2), StringToText(""), lp_buttonPortrait, c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
            gv_skinPortrait[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension] = DialogControlLastCreated();
            TextExpressionSetToken("Param/Expression/BAF7C569", "A", StringToText(gv_tooltipName[lp_firstDimension][lp_secondDimension][lp_thirdDimension]));
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 74, 74, c_anchorTopLeft, ((lv_offSetButtonshorizontal + lv_offsetwidth) + 2), ((lv_offSetButtonsvertical + lv_offsetheight) + 2), TextExpressionAssemble("Param/Expression/BAF7C569"), StringToText(""), "");
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\zergling_emissive.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
            libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glues_pageassets_graphiclistitem_textbackground_selected.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
            libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
            gv_skinButton[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
            if ((lv_winrate < StringToFixed(gv_requirements[lp_firstDimension][lp_secondDimension][lp_thirdDimension]))) {
                TextExpressionSetToken("Param/Expression/D9CB65C7", "A", StringExternal("Param/Value/00BE6467"));
                TextExpressionSetToken("Param/Expression/D9CB65C7", "B", StringToText(gv_requirements[lp_firstDimension][lp_secondDimension][lp_thirdDimension]));
                TextExpressionSetToken("Param/Expression/D9CB65C7", "C", StringExternal("Param/Value/E37BE2A0"));
                TextExpressionSetToken("Param/Expression/447E0AF0", "D", StringToText(gv_tooltipName[lp_firstDimension][lp_secondDimension][lp_thirdDimension]));
                TextExpressionSetToken("Param/Expression/447E0AF0", "A", TextWithColor(TextExpressionAssemble("Param/Expression/D9CB65C7"), Color(90.0, 15.0, 20.0)));
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/447E0AF0"), PlayerGroupAll());
                DialogControlSetEnabled(gv_skinPortrait[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension], PlayerGroupAll(), false);
                DialogControlSetEnabled(gv_skinBorder[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension], PlayerGroupAll(), false);
                DialogControlSetEnabled(gv_skinButton[lp_firstDimension][lp_secondDimension][lp_thirdDimension][lp_fourthDimension], PlayerGroupAll(), false);
            }

        }
    }
}

void gf_SkinsUpdateStats () {
    // Automatic Variable Declarations
    playergroup auto557BE56A_g;
    int auto557BE56A_var;
    const int auto58D10399_ae = 5;
    int auto58D10399_var;
    playergroup auto32DB34C3_g;
    int auto32DB34C3_var;
    const int auto37712F2A_ae = 5;
    int auto37712F2A_var;
    playergroup autoCA98D066_g;
    int autoCA98D066_var;
    const int auto99566D70_ae = 5;
    int auto99566D70_var;

    // Implementation
    auto557BE56A_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
    auto557BE56A_var = -1;
    while (true) {
        auto557BE56A_var = PlayerGroupNextPlayer(auto557BE56A_g, auto557BE56A_var);
        if (auto557BE56A_var < 0) { break; }
        DialogDestroy(gv_skinWin[auto557BE56A_var]);
        DialogDestroy(gv_skinKill[auto557BE56A_var]);
        DialogDestroy(gv_skinAchieve[auto557BE56A_var]);
        DialogCreate(400, 400, c_anchorBottom, -870, 475, true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 400, 400, c_anchorBottom, 0, 0, StringToText(""), "Assets\\Textures\\ui_camapaignmenu_dialogbox_base.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_skinKill[auto557BE56A_var] = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        DialogSetImageVisible(gv_skinKill[auto557BE56A_var], false);
        auto58D10399_var = 1;
        for ( ; auto58D10399_var <= auto58D10399_ae; auto58D10399_var += 1 ) {
            gf_SkinsButtons(1, 1, auto58D10399_var, auto557BE56A_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[1][1][auto58D10399_var], 0);
            gf_SkinsButtons(1, 2, auto58D10399_var, auto557BE56A_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_prot.dds", (Color(100,100,100)), gv_images[1][2][auto58D10399_var], 0);
            gf_SkinsButtons(1, 3, auto58D10399_var, auto557BE56A_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[1][3][auto58D10399_var], 0);
            gf_SkinsButtons(1, 4, auto58D10399_var, auto557BE56A_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[1][4][auto58D10399_var], 0);
            gf_SkinsButtons(1, 5, 1, auto557BE56A_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[1][5][1], 0);
            gf_SkinsButtons(1, 5, 2, auto557BE56A_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[1][5][2], 0);
            gf_SkinsButtons(1, 5, 3, auto557BE56A_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[1][5][3], 0);
            gf_SkinsButtons(1, 5, 4, auto557BE56A_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[1][5][4], 0);
        }
    }
    auto32DB34C3_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
    auto32DB34C3_var = -1;
    while (true) {
        auto32DB34C3_var = PlayerGroupNextPlayer(auto32DB34C3_g, auto32DB34C3_var);
        if (auto32DB34C3_var < 0) { break; }
        DialogCreate(400, 324, c_anchorBottom, -870, 475, true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 400, 324, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_camapaignmenu_dialogbox_base.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_skinWin[auto32DB34C3_var] = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        DialogSetImageVisible(gv_skinWin[auto32DB34C3_var], false);
        auto37712F2A_var = 1;
        for ( ; auto37712F2A_var <= auto37712F2A_ae; auto37712F2A_var += 1 ) {
            gf_SkinsButtons(2, 1, auto37712F2A_var, auto32DB34C3_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[2][1][auto37712F2A_var], 1);
            gf_SkinsButtons(2, 2, auto37712F2A_var, auto32DB34C3_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_prot.dds", (Color(100,100,100)), gv_images[2][2][auto37712F2A_var], 1);
            gf_SkinsButtons(2, 3, auto37712F2A_var, auto32DB34C3_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[2][3][auto37712F2A_var], 1);
            gf_SkinsButtons(2, 4, 1, auto32DB34C3_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[2][4][1], 1);
            gf_SkinsButtons(2, 4, 2, auto32DB34C3_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[2][4][2], 1);
            gf_SkinsButtons(2, 4, 3, auto32DB34C3_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[2][4][3], 1);
            gf_SkinsButtons(2, 4, 4, auto32DB34C3_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[2][4][4], 1);
        }
    }
    autoCA98D066_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
    autoCA98D066_var = -1;
    while (true) {
        autoCA98D066_var = PlayerGroupNextPlayer(autoCA98D066_g, autoCA98D066_var);
        if (autoCA98D066_var < 0) { break; }
        DialogCreate(400, 248, c_anchorBottom, -870, 475, true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 400, 248, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_camapaignmenu_dialogbox_base.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_skinAchieve[autoCA98D066_var] = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        DialogSetImageVisible(gv_skinAchieve[autoCA98D066_var], false);
        auto99566D70_var = 1;
        for ( ; auto99566D70_var <= auto99566D70_ae; auto99566D70_var += 1 ) {
            gf_SkinsButtons(3, 1, auto99566D70_var, autoCA98D066_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[3][1][auto99566D70_var], 2);
            gf_SkinsButtons(3, 2, auto99566D70_var, autoCA98D066_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_prot.dds", (Color(100,100,100)), gv_images[3][2][auto99566D70_var], 2);
            gf_SkinsButtons(3, 3, 1, autoCA98D066_var, "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", (Color(20*100/255,134*100/255,107*100/255)), gv_images[3][3][1], 2);
        }
    }
}

void gf_InfoCreate () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(500, 500, c_anchorBottomLeft, 0, 360, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_infoPanel.lv_backgroundDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_camapaignmenu_dialogbox_base.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogCreate(707, 500, c_anchorTopLeft, 100, 25, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    libNtve_gf_DisplayScreenButton(1, TextWithColor(StringToText("Menu"), Color(58.43, 79.22, 100.00)), 121, 86, c_anchorBottomRight, 24, 26, gt_Menu);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    libNtve_gf_SetScreenButtonBorderImage(1, "Risk\\ui_battlenet_challenge_button_normalpressed.dds", "Risk\\ui_battlenet_challenge_button_normaloverpressedover.dds", c_triggerImageTypeNormal);
    gv_infoPanel.lv_mainMenuButtons[1] = DialogControlLastCreated();
    libNtve_gf_DisplayScreenButton(2, TextWithColor(StringToText("Profile"), Color(58.43, 79.22, 100.00)), 136, 86, c_anchorBottomLeft, 372, 117, gt_Profile);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    libNtve_gf_SetScreenButtonBorderImage(2, "Risk\\ui_battlenet_challenge_button_normalpressed.dds", "Risk\\ui_battlenet_challenge_button_normaloverpressedover.dds", c_triggerImageTypeNormal);
    gv_infoPanel.lv_mainMenuButtons[2] = DialogControlLastCreated();
    DialogControlSetEnabled(gv_infoPanel.lv_mainMenuButtons[2], PlayerGroupAll(), false);
    libNtve_gf_DisplayScreenButton(3, TextWithColor(StringToText("Log"), Color(58.43, 79.22, 100.00)), 136, 86, c_anchorBottomLeft, 372, 26, gt_Log);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    libNtve_gf_SetScreenButtonBorderImage(3, "Risk\\ui_battlenet_challenge_button_normalpressed.dds", "Risk\\ui_battlenet_challenge_button_normaloverpressedover.dds", c_triggerImageTypeNormal);
    gv_infoPanel.lv_mainMenuButtons[3] = DialogControlLastCreated();
    DialogControlSetEnabled(gv_infoPanel.lv_mainMenuButtons[3], PlayerGroupAll(), false);
    libNtve_gf_DisplayScreenButton(4, TextWithColor(StringToText("Skins"), Color(58.43, 79.22, 100.00)), 136, 86, c_anchorBottomLeft, 372, 208, null);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    libNtve_gf_SetScreenButtonBorderImage(4, "Risk\\ui_battlenet_challenge_button_normalpressed.dds", "Risk\\ui_battlenet_challenge_button_normaloverpressedover.dds", c_triggerImageTypeNormal);
    gv_infoPanel.lv_mainMenuButtons[4] = DialogControlLastCreated();
    DialogControlSetEnabled(gv_infoPanel.lv_mainMenuButtons[4], PlayerGroupAll(), false);
    libNtve_gf_DisplayScreenButton(5, TextWithColor(StringToText(""), Color(58.43, 79.22, 100.00)), 64, 64, c_anchorBottomLeft, 508, 228, gt_Cards);
    libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_keyNone, PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/BF595410"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    libNtve_gf_SetScreenButtonBorderImage(5, "risk\\Flag\\tgacardnormalpressed1.tga", "risk\\Flag\\tgacardhoverpressed1.tga", c_triggerImageTypeNormal);
    gv_infoPanel.lv_mainMenuButtons[5] = DialogControlLastCreated();
    DialogControlSetEnabled(gv_infoPanel.lv_mainMenuButtons[5], PlayerGroupAll(), false);
    libNtve_gf_DisplayScreenButton(6, TextWithColor(StringToText("Kills"), Color(58.43, 79.22, 100.00)), 133, 90, c_anchorBottomLeft, 0, 372, null);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    libNtve_gf_SetScreenButtonBorderImage(6, "risk\\ui_battlenet_challenge_button_normalpressed.dds", "Risk\\ui_battlenet_challenge_button_normaloverpressedover.dds", c_triggerImageTypeNormal);
    gv_infoPanel.lv_mainMenuButtons[6] = DialogControlLastCreated();
    DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[6], PlayerGroupAll(), false);
    libNtve_gf_DisplayScreenButton(7, TextWithColor(StringToText("Wins"), Color(58.43, 79.22, 100.00)), 133, 90, c_anchorBottomLeft, 133, 372, null);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    libNtve_gf_SetScreenButtonBorderImage(7, "Risk\\ui_battlenet_challenge_button_normalpressed.dds", "Risk\\ui_battlenet_challenge_button_normaloverpressedover.dds", c_triggerImageTypeNormal);
    gv_infoPanel.lv_mainMenuButtons[7] = DialogControlLastCreated();
    DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[7], PlayerGroupAll(), false);
    libNtve_gf_DisplayScreenButton(8, TextWithColor(StringToText("Win Rate"), Color(58.43, 79.22, 100.00)), 133, 90, c_anchorBottomLeft, 266, 372, null);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    libNtve_gf_SetScreenButtonBorderImage(8, "risk\\ui_battlenet_challenge_button_normalpressed.dds", "Risk\\ui_battlenet_challenge_button_normaloverpressedover.dds", c_triggerImageTypeNormal);
    gv_infoPanel.lv_mainMenuButtons[8] = DialogControlLastCreated();
    DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[8], PlayerGroupAll(), false);
    libNtve_gf_DisplayScreenButton(9, TextWithColor(StringToText(""), Color(58.43, 79.22, 100.00)), 64, 64, c_anchorBottomLeft, 508, 164, null);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/28A48EFB"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    libNtve_gf_SetScreenButtonBorderImage(9, "risk\\tgaselectinactivenormalpressed1.tga", "risk\\tgaselectinactivenormalpressed1.tga", c_triggerImageTypeNormal);
    gv_infoPanel.lv_mainMenuButtons[9] = DialogControlLastCreated();
    DialogControlSetEnabled(gv_infoPanel.lv_mainMenuButtons[9], PlayerGroupAll(), false);
    libNtve_gf_DisplayScreenButton(10, TextWithColor(StringToText(""), Color(58.43, 79.22, 100.00)), 64, 64, c_anchorBottomLeft, 508, 164, null);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/D2B562BD"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    libNtve_gf_SetScreenButtonBorderImage(10, "risk\\tgaselectactivenormalpressed1.tga", "risk\\tgaselectactivehoverpressed1.tga", c_triggerImageTypeNormal);
    gv_infoPanel.lv_mainMenuButtons[10] = DialogControlLastCreated();
    DialogControlSetEnabled(gv_infoPanel.lv_mainMenuButtons[10], PlayerGroupAll(), false);
    gf_InfoPanelLog();
    gf_InfoPanelProfile();
}

void gf_AchieveChangeAllUnits (int lp_player, int lp_section) {
    // Variable Declarations
    string lv_behaviourTemp;
    int lv_i;

    // Automatic Variable Declarations
    int autoC6C6EDCC_val;
    int autoA25E41DC_val;
    unitgroup autoF896BB78_g;
    int autoF896BB78_u;
    unit autoF896BB78_var;
    int auto7F5DB595_val;
    unitgroup auto20F7CEC3_g;
    int auto20F7CEC3_u;
    unit auto20F7CEC3_var;
    int autoF0BC6260_val;
    unitgroup auto0EF61081_g;
    int auto0EF61081_u;
    unit auto0EF61081_var;
    int autoE0148A9C_val;
    unitgroup autoD4FC201E_g;
    int autoD4FC201E_u;
    unit autoD4FC201E_var;
    int auto72ADCD73_val;
    unitgroup auto895D3176_g;
    int auto895D3176_u;
    unit auto895D3176_var;
    int auto4CF80F9C_val;
    unitgroup auto587B8C5D_g;
    int auto587B8C5D_u;
    unit auto587B8C5D_var;
    int autoDC183742_val;
    unitgroup autoF1C40549_g;
    int autoF1C40549_u;
    unit autoF1C40549_var;
    int auto96C59C10_val;
    unitgroup auto14330520_g;
    int auto14330520_u;
    unit auto14330520_var;
    int auto484C77BD_val;
    unitgroup auto8FEDC192_g;
    int auto8FEDC192_u;
    unit auto8FEDC192_var;
    int autoAD4B4CAF_val;
    unitgroup auto71D72710_g;
    int auto71D72710_u;
    unit auto71D72710_var;
    int autoC38D2BFF_val;
    unitgroup autoAA9DA85C_g;
    int autoAA9DA85C_u;
    unit autoAA9DA85C_var;
    int auto9E8B8EA9_val;
    unitgroup autoFC59BB36_g;
    int autoFC59BB36_u;
    unit autoFC59BB36_var;
    int auto48EA0A4E_val;
    unitgroup autoD30A7EAD_g;
    int autoD30A7EAD_u;
    unit autoD30A7EAD_var;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    autoC6C6EDCC_val = lp_section;
    if (autoC6C6EDCC_val == ge_AchieveUnitType_Marine) {
        lv_behaviourTemp = "Marine";
        autoA25E41DC_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Marine][lp_player];
        if (autoA25E41DC_val == 1) {
            lv_behaviourTemp = "JunkerMarine";
        }
        else if (autoA25E41DC_val == 2) {
            lv_behaviourTemp = "Spectre";
        }
        else if (autoA25E41DC_val == 3) {
            lv_behaviourTemp = "InfestedMarine";
        }
        else if (autoA25E41DC_val == 4) {
            lv_behaviourTemp = "Warpig";
        }
        else if (autoA25E41DC_val == 5) {
            lv_behaviourTemp = "BlackOpsMarine";
        }
        else if (autoA25E41DC_val == 6) {
            lv_behaviourTemp = "TaurenMarine";
        }
        else if (autoA25E41DC_val == 7) {
            lv_behaviourTemp = "UmojanMarine";
        }
        else {
        }
        autoF896BB78_g = UnitGroup("Marine", lp_player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoF896BB78_u = UnitGroupCount(autoF896BB78_g, c_unitCountAll);
        for (;; autoF896BB78_u -= 1) {
            autoF896BB78_var = UnitGroupUnitFromEnd(autoF896BB78_g, autoF896BB78_u);
            if (autoF896BB78_var == null) { break; }
            UnitBehaviorRemove(autoF896BB78_var, "Marine", 1);
            UnitBehaviorRemove(autoF896BB78_var, "InfestedMarine", 1);
            UnitBehaviorRemove(autoF896BB78_var, "Warpig", 1);
            UnitBehaviorRemove(autoF896BB78_var, "UmojanMarine", 1);
            UnitBehaviorAdd(autoF896BB78_var, "TaurenMarine", autoF896BB78_var, 1);
            UnitBehaviorRemove(autoF896BB78_var, "TaurenMarine", 1);
            UnitBehaviorAdd(autoF896BB78_var, "MurlockMarine", autoF896BB78_var, 1);
            UnitBehaviorRemove(autoF896BB78_var, "MurlockMarine", 1);
            UnitBehaviorRemove(autoF896BB78_var, "Spectre", 1);
            UnitBehaviorRemove(autoF896BB78_var, "BlackOpsMarine", 1);
            UnitBehaviorRemove(autoF896BB78_var, "JunkerMarine", 1);
            UnitBehaviorAdd(autoF896BB78_var, lv_behaviourTemp, autoF896BB78_var, 1);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(autoF896BB78_var), c_animNameDefault, "Stand", 0, c_animTimeDefault);
        }
    }
    else if (autoC6C6EDCC_val == ge_AchieveUnitType_Marauder) {
        lv_behaviourTemp = "Marauder";
        auto7F5DB595_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Marauder][lp_player];
        if (auto7F5DB595_val == 1) {
            lv_behaviourTemp = "MarauderCamo";
        }
        else if (auto7F5DB595_val == 2) {
            lv_behaviourTemp = "DeluxeMarauder";
        }
        else if (auto7F5DB595_val == 3) {
            lv_behaviourTemp = "CovertopsMarauder";
        }
        else if (auto7F5DB595_val == 4) {
            lv_behaviourTemp = "BlackopsMarauder";
        }
        else if (auto7F5DB595_val == 5) {
            lv_behaviourTemp = "JunkerMarauder";
        }
        else if (auto7F5DB595_val == 6) {
            lv_behaviourTemp = "MercMarauder";
        }
        else if (auto7F5DB595_val == 7) {
            lv_behaviourTemp = "UmojanMarauder";
        }
        else {
        }
        auto20F7CEC3_g = UnitGroup("Marauder", lp_player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto20F7CEC3_u = UnitGroupCount(auto20F7CEC3_g, c_unitCountAll);
        for (;; auto20F7CEC3_u -= 1) {
            auto20F7CEC3_var = UnitGroupUnitFromEnd(auto20F7CEC3_g, auto20F7CEC3_u);
            if (auto20F7CEC3_var == null) { break; }
            UnitBehaviorRemove(auto20F7CEC3_var, "Marauder", 1);
            UnitBehaviorRemove(auto20F7CEC3_var, "MarauderCamo", 1);
            UnitBehaviorRemove(auto20F7CEC3_var, "MercMarauder", 1);
            UnitBehaviorRemove(auto20F7CEC3_var, "DeluxeMarauder", 1);
            UnitBehaviorRemove(auto20F7CEC3_var, "BlackopsMarauder", 1);
            UnitBehaviorRemove(auto20F7CEC3_var, "CovertopsMarauder", 1);
            UnitBehaviorRemove(auto20F7CEC3_var, "JunkerMarauder", 1);
            UnitBehaviorRemove(auto20F7CEC3_var, "UmojanMarauder", 1);
            UnitBehaviorAdd(auto20F7CEC3_var, lv_behaviourTemp, auto20F7CEC3_var, 1);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto20F7CEC3_var), c_animNameDefault, "Stand", 0, c_animTimeDefault);
        }
    }
    else if (autoC6C6EDCC_val == ge_AchieveUnitType_Tank) {
        lv_behaviourTemp = "SiegeTank";
        autoF0BC6260_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Tank][lp_player];
        if (autoF0BC6260_val == 1) {
            lv_behaviourTemp = "JunkerTank";
        }
        else if (autoF0BC6260_val == 2) {
            lv_behaviourTemp = "CovertopsTank";
        }
        else if (autoF0BC6260_val == 3) {
            lv_behaviourTemp = "BlackopsTank";
        }
        else if (autoF0BC6260_val == 4) {
            lv_behaviourTemp = "SiegeBreaker";
        }
        else if (autoF0BC6260_val == 5) {
            lv_behaviourTemp = "UmojanTank";
        }
        else if (autoF0BC6260_val == 6) {
            lv_behaviourTemp = "CommandoTank";
        }
        else {
        }
        auto0EF61081_g = UnitGroup("SiegeTank", lp_player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto0EF61081_u = UnitGroupCount(auto0EF61081_g, c_unitCountAll);
        for (;; auto0EF61081_u -= 1) {
            auto0EF61081_var = UnitGroupUnitFromEnd(auto0EF61081_g, auto0EF61081_u);
            if (auto0EF61081_var == null) { break; }
            UnitBehaviorRemove(auto0EF61081_var, "SiegeTank", 1);
            UnitBehaviorRemove(auto0EF61081_var, "JunkerTank", 1);
            UnitBehaviorRemove(auto0EF61081_var, "CovertopsTank", 1);
            UnitBehaviorRemove(auto0EF61081_var, "BlackopsTank", 1);
            UnitBehaviorRemove(auto0EF61081_var, "SiegeBreaker", 1);
            UnitBehaviorRemove(auto0EF61081_var, "UmojanTank", 1);
            UnitBehaviorRemove(auto0EF61081_var, "CommandoTank", 1);
            UnitBehaviorAdd(auto0EF61081_var, lv_behaviourTemp, auto0EF61081_var, 1);
        }
    }
    else if (autoC6C6EDCC_val == ge_AchieveUnitType_Viking) {
        lv_behaviourTemp = "Viking";
        autoE0148A9C_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Viking][lp_player];
        if (autoE0148A9C_val == 1) {
            lv_behaviourTemp = "MechaViking";
        }
        else if (autoE0148A9C_val == 2) {
            lv_behaviourTemp = "MercViking";
        }
        else if (autoE0148A9C_val == 3) {
            lv_behaviourTemp = "UmojanViking";
        }
        else if (autoE0148A9C_val == 4) {
            lv_behaviourTemp = "CovertopsViking";
        }
        else {
        }
        autoD4FC201E_g = UnitGroup("VikingFighter", lp_player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoD4FC201E_u = UnitGroupCount(autoD4FC201E_g, c_unitCountAll);
        for (;; autoD4FC201E_u -= 1) {
            autoD4FC201E_var = UnitGroupUnitFromEnd(autoD4FC201E_g, autoD4FC201E_u);
            if (autoD4FC201E_var == null) { break; }
            UnitBehaviorRemove(autoD4FC201E_var, "Viking", 1);
            UnitBehaviorRemove(autoD4FC201E_var, "MercViking", 1);
            UnitBehaviorRemove(autoD4FC201E_var, "MechaViking", 1);
            UnitBehaviorRemove(autoD4FC201E_var, "UmojanViking", 1);
            UnitBehaviorRemove(autoD4FC201E_var, "CovertopsViking", 1);
            UnitBehaviorAdd(autoD4FC201E_var, lv_behaviourTemp, autoD4FC201E_var, 1);
        }
    }
    else if (autoC6C6EDCC_val == ge_AchieveUnitType_Banshee) {
        lv_behaviourTemp = "Banshee";
        auto72ADCD73_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Banshee][lp_player];
        if (auto72ADCD73_val == 1) {
            lv_behaviourTemp = "JunkerBanshee";
        }
        else if (auto72ADCD73_val == 2) {
            lv_behaviourTemp = "UmojanBanshee";
        }
        else if (auto72ADCD73_val == 3) {
            lv_behaviourTemp = "CovertopsBanshee";
        }
        else if (auto72ADCD73_val == 4) {
            lv_behaviourTemp = "MercBanshee";
        }
        else if (auto72ADCD73_val == 5) {
            lv_behaviourTemp = "BlackopsBanshee";
        }
        else {
        }
        auto895D3176_g = UnitGroup("Banshee", lp_player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto895D3176_u = UnitGroupCount(auto895D3176_g, c_unitCountAll);
        for (;; auto895D3176_u -= 1) {
            auto895D3176_var = UnitGroupUnitFromEnd(auto895D3176_g, auto895D3176_u);
            if (auto895D3176_var == null) { break; }
            UnitBehaviorRemove(auto895D3176_var, "Banshee", 1);
            UnitBehaviorRemove(auto895D3176_var, "MercBanshee", 1);
            UnitBehaviorRemove(auto895D3176_var, "JunkerBanshee", 1);
            UnitBehaviorRemove(auto895D3176_var, "CovertopsBanshee", 1);
            UnitBehaviorRemove(auto895D3176_var, "UmojanBanshee", 1);
            UnitBehaviorRemove(auto895D3176_var, "BlackopsBanshee", 1);
            UnitBehaviorAdd(auto895D3176_var, lv_behaviourTemp, auto895D3176_var, 1);
        }
    }
    else if (autoC6C6EDCC_val == ge_AchieveUnitType_Battlecrusier) {
        lv_behaviourTemp = "Battlecruiser";
        auto4CF80F9C_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Battlecrusier][lp_player];
        if (auto4CF80F9C_val == 1) {
            lv_behaviourTemp = "MercBattlecruiser";
        }
        else if (auto4CF80F9C_val == 2) {
            lv_behaviourTemp = "CovertopsBattlecruiser";
        }
        else if (auto4CF80F9C_val == 3) {
            lv_behaviourTemp = "JunkerBattlecruiser";
        }
        else if (auto4CF80F9C_val == 4) {
            lv_behaviourTemp = "GorgonBattlecruiser";
        }
        else if (auto4CF80F9C_val == 5) {
            lv_behaviourTemp = "UmojanBattlecruiser";
        }
        else if (auto4CF80F9C_val == 6) {
            lv_behaviourTemp = "CerberusBattlecruiser";
        }
        else {
        }
        auto587B8C5D_g = UnitGroup("Battlecruiser", lp_player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto587B8C5D_u = UnitGroupCount(auto587B8C5D_g, c_unitCountAll);
        for (;; auto587B8C5D_u -= 1) {
            auto587B8C5D_var = UnitGroupUnitFromEnd(auto587B8C5D_g, auto587B8C5D_u);
            if (auto587B8C5D_var == null) { break; }
            UnitBehaviorRemove(auto587B8C5D_var, "Battlecruiser", 1);
            UnitBehaviorRemove(auto587B8C5D_var, "MercBattlecruiser", 1);
            UnitBehaviorRemove(auto587B8C5D_var, "CovertopsBattlecruiser", 1);
            UnitBehaviorRemove(auto587B8C5D_var, "JunkerBattlecruiser", 1);
            UnitBehaviorRemove(auto587B8C5D_var, "GorgonBattlecruiser", 1);
            UnitBehaviorRemove(auto587B8C5D_var, "UmojanBattlecruiser", 1);
            UnitBehaviorRemove(auto587B8C5D_var, "CerberusBattlecruiser", 1);
            UnitBehaviorAdd(auto587B8C5D_var, lv_behaviourTemp, auto587B8C5D_var, 1);
        }
    }
    else if (autoC6C6EDCC_val == ge_AchieveUnitType_Starport) {
        lv_behaviourTemp = "Starport";
        autoDC183742_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Starport][lp_player];
        if (autoDC183742_val == 1) {
            lv_behaviourTemp = "MercStarport";
        }
        else {
        }
        autoF1C40549_g = UnitGroup("Starport", lp_player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF1C40549_u = UnitGroupCount(autoF1C40549_g, c_unitCountAll);
        for (;; autoF1C40549_u -= 1) {
            autoF1C40549_var = UnitGroupUnitFromEnd(autoF1C40549_g, autoF1C40549_u);
            if (autoF1C40549_var == null) { break; }
            UnitBehaviorRemove(autoF1C40549_var, "Starport", 1);
            UnitBehaviorRemove(autoF1C40549_var, "MercStarport", 1);
            UnitBehaviorAdd(autoF1C40549_var, lv_behaviourTemp, autoF1C40549_var, 1);
        }
    }
    else if (autoC6C6EDCC_val == ge_AchieveUnitType_Barracks) {
        lv_behaviourTemp = "Barracks";
        auto96C59C10_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Barracks][lp_player];
        if (auto96C59C10_val == 1) {
            lv_behaviourTemp = "MercBarracks";
        }
        else {
        }
        auto14330520_g = UnitGroup("Barracks", lp_player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto14330520_u = UnitGroupCount(auto14330520_g, c_unitCountAll);
        for (;; auto14330520_u -= 1) {
            auto14330520_var = UnitGroupUnitFromEnd(auto14330520_g, auto14330520_u);
            if (auto14330520_var == null) { break; }
            UnitBehaviorRemove(auto14330520_var, "Barracks", 1);
            UnitBehaviorRemove(auto14330520_var, "MercBarracks", 1);
            UnitBehaviorAdd(auto14330520_var, lv_behaviourTemp, auto14330520_var, 1);
        }
    }
    else if (autoC6C6EDCC_val == ge_AchieveUnitType_Goliath) {
        lv_behaviourTemp = "Goliath";
        auto484C77BD_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Goliath][lp_player];
        if (auto484C77BD_val == 1) {
            lv_behaviourTemp = "MercGoliath";
        }
        else if (auto484C77BD_val == 2) {
            lv_behaviourTemp = "BlackopsGoliath";
        }
        else {
        }
        auto8FEDC192_g = UnitGroup("Goliath", lp_player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto8FEDC192_u = UnitGroupCount(auto8FEDC192_g, c_unitCountAll);
        for (;; auto8FEDC192_u -= 1) {
            auto8FEDC192_var = UnitGroupUnitFromEnd(auto8FEDC192_g, auto8FEDC192_u);
            if (auto8FEDC192_var == null) { break; }
            UnitBehaviorRemove(auto8FEDC192_var, "Goliath", 1);
            UnitBehaviorRemove(auto8FEDC192_var, "MercGoliath", 1);
            UnitBehaviorRemove(auto8FEDC192_var, "BlackopsGoliath", 1);
            UnitBehaviorAdd(auto8FEDC192_var, lv_behaviourTemp, auto8FEDC192_var, 1);
        }
    }
    else if (autoC6C6EDCC_val == ge_AchieveUnitType_Hellion) {
        lv_behaviourTemp = "Hellion";
        autoAD4B4CAF_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Hellion][lp_player];
        if (autoAD4B4CAF_val == 1) {
            lv_behaviourTemp = "CovertopsHellion";
        }
        else if (autoAD4B4CAF_val == 2) {
            lv_behaviourTemp = "MercHellion";
        }
        else if (autoAD4B4CAF_val == 3) {
            lv_behaviourTemp = "UmojanHellion";
        }
        else if (autoAD4B4CAF_val == 4) {
            lv_behaviourTemp = "JunkerHellion";
        }
        else if (autoAD4B4CAF_val == 5) {
            lv_behaviourTemp = "CruiserHellion";
        }
        else {
        }
        auto71D72710_g = UnitGroup("Hellion", lp_player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto71D72710_u = UnitGroupCount(auto71D72710_g, c_unitCountAll);
        for (;; auto71D72710_u -= 1) {
            auto71D72710_var = UnitGroupUnitFromEnd(auto71D72710_g, auto71D72710_u);
            if (auto71D72710_var == null) { break; }
            UnitBehaviorRemove(auto71D72710_var, "Hellion", 1);
            UnitBehaviorRemove(auto71D72710_var, "MercHellion", 1);
            UnitBehaviorRemove(auto71D72710_var, "CovertopsHellion", 1);
            UnitBehaviorRemove(auto71D72710_var, "UmojanHellion", 1);
            UnitBehaviorRemove(auto71D72710_var, "JunkerHellion", 1);
            UnitBehaviorRemove(auto71D72710_var, "CruiserHellion", 1);
            UnitBehaviorAdd(auto71D72710_var, lv_behaviourTemp, auto71D72710_var, 1);
        }
    }
    else if (autoC6C6EDCC_val == ge_AchieveUnitType_Medic) {
        lv_behaviourTemp = "Medic";
        autoC38D2BFF_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Medic][lp_player];
        if (autoC38D2BFF_val == 1) {
            lv_behaviourTemp = "KillsquadMedic";
        }
        else if (autoC38D2BFF_val == 2) {
            lv_behaviourTemp = "EliteMedic";
        }
        else {
        }
        autoAA9DA85C_g = UnitGroup("Medic", lp_player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoAA9DA85C_u = UnitGroupCount(autoAA9DA85C_g, c_unitCountAll);
        for (;; autoAA9DA85C_u -= 1) {
            autoAA9DA85C_var = UnitGroupUnitFromEnd(autoAA9DA85C_g, autoAA9DA85C_u);
            if (autoAA9DA85C_var == null) { break; }
            UnitBehaviorRemove(autoAA9DA85C_var, "Medic", 1);
            UnitBehaviorRemove(autoAA9DA85C_var, "KillsquadMedic", 1);
            UnitBehaviorRemove(autoAA9DA85C_var, "EliteMedic", 1);
            UnitBehaviorAdd(autoAA9DA85C_var, lv_behaviourTemp, autoAA9DA85C_var, 1);
        }
    }
    else if (autoC6C6EDCC_val == ge_AchieveUnitType_SCV) {
        lv_behaviourTemp = "SCV";
        auto9E8B8EA9_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_SCV][lp_player];
        if (auto9E8B8EA9_val == 1) {
            lv_behaviourTemp = "InfestedSCV";
        }
        else if (auto9E8B8EA9_val == 2) {
            lv_behaviourTemp = "MercSCV";
        }
        else if (auto9E8B8EA9_val == 3) {
            lv_behaviourTemp = "UmojanSCV";
        }
        else if (auto9E8B8EA9_val == 4) {
            lv_behaviourTemp = "CovertopsSCV";
        }
        else if (auto9E8B8EA9_val == 5) {
            lv_behaviourTemp = "MuleSCV";
        }
        else {
        }
        autoFC59BB36_g = UnitGroup("SCV", lp_player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoFC59BB36_u = UnitGroupCount(autoFC59BB36_g, c_unitCountAll);
        for (;; autoFC59BB36_u -= 1) {
            autoFC59BB36_var = UnitGroupUnitFromEnd(autoFC59BB36_g, autoFC59BB36_u);
            if (autoFC59BB36_var == null) { break; }
            UnitBehaviorRemove(autoFC59BB36_var, "SCV", 1);
            UnitBehaviorRemove(autoFC59BB36_var, "InfestedSCV", 1);
            UnitBehaviorRemove(autoFC59BB36_var, "MercSCV", 1);
            UnitBehaviorRemove(autoFC59BB36_var, "UmojanSCV", 1);
            UnitBehaviorRemove(autoFC59BB36_var, "CovertopsSCV", 1);
            UnitBehaviorRemove(autoFC59BB36_var, "MuleSCV", 1);
            UnitBehaviorAdd(autoFC59BB36_var, lv_behaviourTemp, autoFC59BB36_var, 1);
        }
    }
    else if (autoC6C6EDCC_val == ge_AchieveUnitType_ScienceVessel) {
        lv_behaviourTemp = "Sciencevessel";
        auto48EA0A4E_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_ScienceVessel][lp_player];
        if (auto48EA0A4E_val == 1) {
            lv_behaviourTemp = "SciencevesselPDD";
        }
        else if (auto48EA0A4E_val == 2) {
            lv_behaviourTemp = "SciencevesselMatrixDrone";
        }
        else if (auto48EA0A4E_val == 3) {
            lv_behaviourTemp = "SciencevesselTargetingDrone";
        }
        else {
        }
        autoD30A7EAD_g = UnitGroup("ScienceVessel", lp_player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoD30A7EAD_u = UnitGroupCount(autoD30A7EAD_g, c_unitCountAll);
        for (;; autoD30A7EAD_u -= 1) {
            autoD30A7EAD_var = UnitGroupUnitFromEnd(autoD30A7EAD_g, autoD30A7EAD_u);
            if (autoD30A7EAD_var == null) { break; }
            UnitBehaviorRemove(autoD30A7EAD_var, "Sciencevessel", 1);
            UnitBehaviorRemove(autoD30A7EAD_var, "SciencevesselMatrixDrone", 1);
            UnitBehaviorRemove(autoD30A7EAD_var, "SciencevesselPDD", 1);
            UnitBehaviorRemove(autoD30A7EAD_var, "SciencevesselTargetingDrone", 1);
            UnitBehaviorAdd(autoD30A7EAD_var, lv_behaviourTemp, autoD30A7EAD_var, 1);
        }
    }
    else {
    }
    gf_BankSave(lp_player, false);
}

void gf_AchieveChangeUnit (int lp_player, unit lp_unit) {
    // Variable Declarations
    string lv_behaviourTemp;
    int lv_i;

    // Automatic Variable Declarations
    string autoA326EB1A_val;
    int auto1E83B98F_val;
    int auto5F72EFA5_val;
    int auto8FCDAEE4_val;
    int autoF8E2BC82_val;
    int auto9EB2E24C_val;
    int auto0C3C6563_val;
    int auto8FE8DBC5_val;
    int auto8FDB7A2A_val;
    int auto2ED33FCE_val;
    int auto20E14BAC_val;
    int autoE902DCA0_val;
    int auto19DF6049_val;
    int auto876151B6_val;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    autoA326EB1A_val = UnitGetType(lp_unit);
    if (autoA326EB1A_val == "Marine") {
        lv_behaviourTemp = "Marine";
        auto1E83B98F_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Marine][lp_player];
        if (auto1E83B98F_val == 1) {
            lv_behaviourTemp = "JunkerMarine";
        }
        else if (auto1E83B98F_val == 2) {
            lv_behaviourTemp = "Spectre";
        }
        else if (auto1E83B98F_val == 3) {
            lv_behaviourTemp = "InfestedMarine";
        }
        else if (auto1E83B98F_val == 4) {
            lv_behaviourTemp = "Warpig";
        }
        else if (auto1E83B98F_val == 5) {
            lv_behaviourTemp = "BlackOpsMarine";
        }
        else if (auto1E83B98F_val == 6) {
            lv_behaviourTemp = "TaurenMarine";
        }
        else if (auto1E83B98F_val == 7) {
            lv_behaviourTemp = "UmojanMarine";
        }
        else {
        }
        UnitBehaviorRemove(lp_unit, "Marine", 1);
        UnitBehaviorRemove(lp_unit, "InfestedMarine", 1);
        UnitBehaviorRemove(lp_unit, "Warpig", 1);
        UnitBehaviorRemove(lp_unit, "UmojanMarine", 1);
        UnitBehaviorAdd(lp_unit, "TaurenMarine", lp_unit, 1);
        UnitBehaviorRemove(lp_unit, "TaurenMarine", 1);
        UnitBehaviorAdd(lp_unit, "MurlockMarine", lp_unit, 1);
        UnitBehaviorRemove(lp_unit, "MurlockMarine", 1);
        UnitBehaviorRemove(lp_unit, "Spectre", 1);
        UnitBehaviorRemove(lp_unit, "BlackOpsMarine", 1);
        UnitBehaviorRemove(lp_unit, "JunkerMarine", 1);
        UnitBehaviorAdd(lp_unit, lv_behaviourTemp, lp_unit, 1);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_unit), c_animNameDefault, "Stand", 0, c_animTimeDefault);
    }
    else if (autoA326EB1A_val == "Marauder") {
        lv_behaviourTemp = "Marauder";
        auto5F72EFA5_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Marauder][lp_player];
        if (auto5F72EFA5_val == 1) {
            lv_behaviourTemp = "MarauderCamo";
        }
        else if (auto5F72EFA5_val == 2) {
            lv_behaviourTemp = "DeluxeMarauder";
        }
        else if (auto5F72EFA5_val == 3) {
            lv_behaviourTemp = "CovertopsMarauder";
        }
        else if (auto5F72EFA5_val == 4) {
            lv_behaviourTemp = "BlackopsMarauder";
        }
        else if (auto5F72EFA5_val == 5) {
            lv_behaviourTemp = "JunkerMarauder";
        }
        else if (auto5F72EFA5_val == 6) {
            lv_behaviourTemp = "MercMarauder";
        }
        else if (auto5F72EFA5_val == 7) {
            lv_behaviourTemp = "UmojanMarauder";
        }
        else {
        }
        UnitBehaviorRemove(lp_unit, "Marauder", 1);
        UnitBehaviorRemove(lp_unit, "MarauderCamo", 1);
        UnitBehaviorRemove(lp_unit, "MercMarauder", 1);
        UnitBehaviorRemove(lp_unit, "DeluxeMarauder", 1);
        UnitBehaviorRemove(lp_unit, "BlackopsMarauder", 1);
        UnitBehaviorRemove(lp_unit, "CovertopsMarauder", 1);
        UnitBehaviorRemove(lp_unit, "JunkerMarauder", 1);
        UnitBehaviorRemove(lp_unit, "UmojanMarauder", 1);
        UnitBehaviorAdd(lp_unit, lv_behaviourTemp, lp_unit, 1);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_unit), c_animNameDefault, "Stand", 0, c_animTimeDefault);
    }
    else if (autoA326EB1A_val == "SiegeTank") {
        lv_behaviourTemp = "SiegeTank";
        auto8FCDAEE4_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Tank][lp_player];
        if (auto8FCDAEE4_val == 1) {
            lv_behaviourTemp = "JunkerTank";
        }
        else if (auto8FCDAEE4_val == 2) {
            lv_behaviourTemp = "CovertopsTank";
        }
        else if (auto8FCDAEE4_val == 3) {
            lv_behaviourTemp = "BlackopsTank";
        }
        else if (auto8FCDAEE4_val == 4) {
            lv_behaviourTemp = "SiegeBreaker";
        }
        else if (auto8FCDAEE4_val == 5) {
            lv_behaviourTemp = "UmojanTank";
        }
        else if (auto8FCDAEE4_val == 6) {
            lv_behaviourTemp = "CommandoTank";
        }
        else {
        }
        UnitBehaviorRemove(lp_unit, "SiegeTank", 1);
        UnitBehaviorRemove(lp_unit, "JunkerTank", 1);
        UnitBehaviorRemove(lp_unit, "CovertopsTank", 1);
        UnitBehaviorRemove(lp_unit, "BlackopsTank", 1);
        UnitBehaviorRemove(lp_unit, "SiegeBreaker", 1);
        UnitBehaviorRemove(lp_unit, "UmojanTank", 1);
        UnitBehaviorRemove(lp_unit, "CommandoTank", 1);
        UnitBehaviorAdd(lp_unit, lv_behaviourTemp, lp_unit, 1);
    }
    else if (autoA326EB1A_val == "VikingFighter") {
        lv_behaviourTemp = "Viking";
        autoF8E2BC82_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Viking][lp_player];
        if (autoF8E2BC82_val == 1) {
            lv_behaviourTemp = "MechaViking";
        }
        else if (autoF8E2BC82_val == 2) {
            lv_behaviourTemp = "MercViking";
        }
        else if (autoF8E2BC82_val == 3) {
            lv_behaviourTemp = "UmojanViking";
        }
        else if (autoF8E2BC82_val == 4) {
            lv_behaviourTemp = "CovertopsViking";
        }
        else {
        }
        UnitBehaviorRemove(lp_unit, "Viking", 1);
        UnitBehaviorRemove(lp_unit, "MercViking", 1);
        UnitBehaviorRemove(lp_unit, "MechaViking", 1);
        UnitBehaviorRemove(lp_unit, "UmojanViking", 1);
        UnitBehaviorRemove(lp_unit, "CovertopsViking", 1);
        UnitBehaviorAdd(lp_unit, lv_behaviourTemp, lp_unit, 1);
    }
    else if (autoA326EB1A_val == "Banshee") {
        lv_behaviourTemp = "Banshee";
        auto9EB2E24C_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Banshee][lp_player];
        if (auto9EB2E24C_val == 1) {
            lv_behaviourTemp = "JunkerBanshee";
        }
        else if (auto9EB2E24C_val == 2) {
            lv_behaviourTemp = "UmojanBanshee";
        }
        else if (auto9EB2E24C_val == 3) {
            lv_behaviourTemp = "CovertopsBanshee";
        }
        else if (auto9EB2E24C_val == 4) {
            lv_behaviourTemp = "MercBanshee";
        }
        else if (auto9EB2E24C_val == 5) {
            lv_behaviourTemp = "BlackopsBanshee";
        }
        else {
        }
        UnitBehaviorRemove(lp_unit, "Banshee", 1);
        UnitBehaviorRemove(lp_unit, "MercBanshee", 1);
        UnitBehaviorRemove(lp_unit, "JunkerBanshee", 1);
        UnitBehaviorRemove(lp_unit, "CovertopsBanshee", 1);
        UnitBehaviorRemove(lp_unit, "UmojanBanshee", 1);
        UnitBehaviorRemove(lp_unit, "BlackopsBanshee", 1);
        UnitBehaviorAdd(lp_unit, lv_behaviourTemp, lp_unit, 1);
    }
    else if (autoA326EB1A_val == "Battlecruiser") {
        lv_behaviourTemp = "Battlecruiser";
        auto0C3C6563_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Battlecrusier][lp_player];
        if (auto0C3C6563_val == 1) {
            lv_behaviourTemp = "MercBattlecruiser";
        }
        else if (auto0C3C6563_val == 2) {
            lv_behaviourTemp = "CovertopsBattlecruiser";
        }
        else if (auto0C3C6563_val == 3) {
            lv_behaviourTemp = "JunkerBattlecruiser";
        }
        else if (auto0C3C6563_val == 4) {
            lv_behaviourTemp = "GorgonBattlecruiser";
        }
        else if (auto0C3C6563_val == 5) {
            lv_behaviourTemp = "UmojanBattlecruiser";
        }
        else if (auto0C3C6563_val == 6) {
            lv_behaviourTemp = "CerberusBattlecruiser";
        }
        else {
        }
        UnitBehaviorRemove(lp_unit, "Battlecruiser", 1);
        UnitBehaviorRemove(lp_unit, "MercBattlecruiser", 1);
        UnitBehaviorRemove(lp_unit, "CovertopsBattlecruiser", 1);
        UnitBehaviorRemove(lp_unit, "JunkerBattlecruiser", 1);
        UnitBehaviorRemove(lp_unit, "GorgonBattlecruiser", 1);
        UnitBehaviorRemove(lp_unit, "UmojanBattlecruiser", 1);
        UnitBehaviorRemove(lp_unit, "CerberusBattlecruiser", 1);
        UnitBehaviorAdd(lp_unit, lv_behaviourTemp, lp_unit, 1);
    }
    else if (autoA326EB1A_val == "Starport") {
        lv_behaviourTemp = "Starport";
        auto8FE8DBC5_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Starport][lp_player];
        if (auto8FE8DBC5_val == 1) {
            lv_behaviourTemp = "MercStarport";
        }
        else {
        }
        UnitBehaviorRemove(lp_unit, "Starport", 1);
        UnitBehaviorRemove(lp_unit, "MercStarport", 1);
        UnitBehaviorAdd(lp_unit, lv_behaviourTemp, lp_unit, 1);
    }
    else if (autoA326EB1A_val == "Barracks") {
        lv_behaviourTemp = "Barracks";
        auto8FDB7A2A_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Barracks][lp_player];
        if (auto8FDB7A2A_val == 1) {
            lv_behaviourTemp = "MercBarracks";
        }
        else {
        }
        UnitBehaviorRemove(lp_unit, "Barracks", 1);
        UnitBehaviorRemove(lp_unit, "MercBarracks", 1);
        UnitBehaviorAdd(lp_unit, lv_behaviourTemp, lp_unit, 1);
    }
    else if (autoA326EB1A_val == "Goliath") {
        lv_behaviourTemp = "Goliath";
        auto2ED33FCE_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Goliath][lp_player];
        if (auto2ED33FCE_val == 1) {
            lv_behaviourTemp = "MercGoliath";
        }
        else if (auto2ED33FCE_val == 2) {
            lv_behaviourTemp = "BlackopsGoliath";
        }
        else {
        }
        UnitBehaviorRemove(lp_unit, "Goliath", 1);
        UnitBehaviorRemove(lp_unit, "MercGoliath", 1);
        UnitBehaviorRemove(lp_unit, "BlackopsGoliath", 1);
        UnitBehaviorAdd(lp_unit, lv_behaviourTemp, lp_unit, 1);
    }
    else if (autoA326EB1A_val == "Hellion") {
        lv_behaviourTemp = "Hellion";
        auto20E14BAC_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Hellion][lp_player];
        if (auto20E14BAC_val == 1) {
            lv_behaviourTemp = "CovertopsHellion";
        }
        else if (auto20E14BAC_val == 2) {
            lv_behaviourTemp = "MercHellion";
        }
        else if (auto20E14BAC_val == 3) {
            lv_behaviourTemp = "UmojanHellion";
        }
        else if (auto20E14BAC_val == 4) {
            lv_behaviourTemp = "JunkerHellion";
        }
        else if (auto20E14BAC_val == 5) {
            lv_behaviourTemp = "CruiserHellion";
        }
        else {
        }
        UnitBehaviorRemove(lp_unit, "Hellion", 1);
        UnitBehaviorRemove(lp_unit, "MercHellion", 1);
        UnitBehaviorRemove(lp_unit, "CovertopsHellion", 1);
        UnitBehaviorRemove(lp_unit, "UmojanHellion", 1);
        UnitBehaviorRemove(lp_unit, "JunkerHellion", 1);
        UnitBehaviorRemove(lp_unit, "CruiserHellion", 1);
        UnitBehaviorAdd(lp_unit, lv_behaviourTemp, lp_unit, 1);
    }
    else if (autoA326EB1A_val == "Medic") {
        lv_behaviourTemp = "Medic";
        autoE902DCA0_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_Medic][lp_player];
        if (autoE902DCA0_val == 1) {
            lv_behaviourTemp = "KillsquadMedic";
        }
        else if (autoE902DCA0_val == 2) {
            lv_behaviourTemp = "EliteMedic";
        }
        else {
        }
        UnitBehaviorRemove(lp_unit, "Medic", 1);
        UnitBehaviorRemove(lp_unit, "KillsquadMedic", 1);
        UnitBehaviorRemove(lp_unit, "EliteMedic", 1);
        UnitBehaviorAdd(lp_unit, lv_behaviourTemp, lp_unit, 1);
    }
    else if (autoA326EB1A_val == "SCV") {
        lv_behaviourTemp = "SCV";
        auto19DF6049_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_SCV][lp_player];
        if (auto19DF6049_val == 1) {
            lv_behaviourTemp = "InfestedSCV";
        }
        else if (auto19DF6049_val == 2) {
            lv_behaviourTemp = "MercSCV";
        }
        else if (auto19DF6049_val == 3) {
            lv_behaviourTemp = "UmojanSCV";
        }
        else if (auto19DF6049_val == 4) {
            lv_behaviourTemp = "CovertopsSCV";
        }
        else if (auto19DF6049_val == 5) {
            lv_behaviourTemp = "MuleSCV";
        }
        else {
        }
        UnitBehaviorRemove(lp_unit, "SCV", 1);
        UnitBehaviorRemove(lp_unit, "InfestedSCV", 1);
        UnitBehaviorRemove(lp_unit, "MercSCV", 1);
        UnitBehaviorRemove(lp_unit, "UmojanSCV", 1);
        UnitBehaviorRemove(lp_unit, "CovertopsSCV", 1);
        UnitBehaviorRemove(lp_unit, "MuleSCV", 1);
        UnitBehaviorAdd(lp_unit, lv_behaviourTemp, lp_unit, 1);
    }
    else if (autoA326EB1A_val == "ScienceVessel") {
        lv_behaviourTemp = "Sciencevessel";
        auto876151B6_val = gv_profile.lv_achieveUnitValue[ge_AchieveUnitType_ScienceVessel][lp_player];
        if (auto876151B6_val == 1) {
            lv_behaviourTemp = "SciencevesselPDD";
        }
        else if (auto876151B6_val == 2) {
            lv_behaviourTemp = "SciencevesselMatrixDrone";
        }
        else if (auto876151B6_val == 3) {
            lv_behaviourTemp = "SciencevesselTargetingDrone";
        }
        else {
        }
        UnitBehaviorRemove(lp_unit, "Sciencevessel", 1);
        UnitBehaviorRemove(lp_unit, "SciencevesselMatrixDrone", 1);
        UnitBehaviorRemove(lp_unit, "SciencevesselPDD", 1);
        UnitBehaviorRemove(lp_unit, "SciencevesselTargetingDrone", 1);
        UnitBehaviorAdd(lp_unit, lv_behaviourTemp, lp_unit, 1);
    }
    else {
    }
    gf_BankSave(lp_player, false);
}

void gf_UpdateNewPlayers () {
    // Variable Declarations
    int lv_i;
    playergroup lv_pG;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;
    lv_pG = PlayerGroupEmpty();

    // Implementation
    while ((lv_i <= 12)) {
        if ((gf_ApprovedName(gv_player[lv_i].lv_name) != true)) {
            PlayerGroupAdd(lv_pG, lv_i);
        }

        lv_i = (lv_i + 1);
    }
    DialogCreate(1425, 275, c_anchorTopLeft, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_player[0].lv_mainName = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 475, 275, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glues_dialogbox_base.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 75, c_anchorTop, 10, 30, StringToText("Please enter your Username, the entered text will become your Ranking Name in Risk Legacy."), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    gv_player[0].lv_itemName[0] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 350, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 75, c_anchorBottom, 0, 25, StringToText(""), StringToText("Accept"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    gv_player[0].lv_itemName[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_blue_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_blue_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 475, 275, c_anchorCenter, -480, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glues_dialogbox_base.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 250, c_anchorTop, -475, 30, StringToText("All whom play Risk Legacy must play within the following guidelines or face reprocussions in the form of either temporary or permanent banishment.<n/><n/>1. No Pre-Teaming<n/>2. No Bug Abuse<n/>3. No Disruptful Behaviour"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    DialogSetVisible(DialogLastCreated(), lv_pG, true);
}

void gf_CreateBarAndText (int lp_createddialog, int lp_barType, int lp_barOffSet, int lp_picked) {
    // Variable Declarations
    bool lv_true;
    int lv_temp;
    fixed lv_temp2;
    fixed lv_temp3;
    int lv_progressValue;
    int lv_percentageValue;
    int lv_barProgressYDefault;
    int lv_barBorderYDefault;
    int lv_barTextYDefault;
    int lv_playerGainingScore;
    int lv_playerLosingScore;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_true = true;
    lv_barProgressYDefault = (110 + lp_barOffSet);
    lv_barBorderYDefault = (100 + lp_barOffSet);
    lv_barTextYDefault = (80 + lp_barOffSet);

    // Implementation
    if (((lp_barType == 0))) {
        lv_playerGainingScore = gv_player[lp_picked].lv_win;
        lv_playerLosingScore = gv_player[lp_picked].lv_loses;
    }
    else if (((lp_barType == 1))) {
        lv_playerGainingScore = gv_player[lp_picked].lv_kills;
        lv_playerLosingScore = gv_player[lp_picked].lv_deaths;
    }
    else if (((lp_barType == 2))) {
        lv_playerGainingScore = gv_player[lp_picked].lv_killed;
        lv_playerLosingScore = gv_player[lp_picked].lv_lost;
    }
    if (((lv_playerLosingScore != 0) && (lv_playerGainingScore != 0))) {
        lv_temp = (lv_playerGainingScore + lv_playerLosingScore);
        if (((lv_temp >= 524288))) {
            lv_playerGainingScore = FixedToInt((lv_playerGainingScore / 1000));
            lv_playerLosingScore = FixedToInt((lv_playerLosingScore / 1000));
            lv_temp = (lv_playerGainingScore + lv_playerLosingScore);
            if ((IntToFixed(lv_temp) == 0)) {
            }
            else {
                lv_temp2 = (399.0 * (IntToFixed(lv_playerGainingScore) / IntToFixed(lv_temp)));
                lv_temp3 = (100.0 * (IntToFixed(lv_playerGainingScore) / IntToFixed(lv_temp)));
                lv_progressValue = FixedToInt(lv_temp2);
                lv_percentageValue = FixedToInt(lv_temp3);
            }
        }
        else {
            if ((IntToFixed(lv_temp) == 0)) {
            }
            else {
                lv_temp2 = (399.0 * (IntToFixed(lv_playerGainingScore) / IntToFixed(lv_temp)));
                lv_temp3 = (100.0 * (IntToFixed(lv_playerGainingScore) / IntToFixed(lv_temp)));
                lv_progressValue = FixedToInt(lv_temp2);
                lv_percentageValue = FixedToInt(lv_temp3);
            }
        }
    }
    else if (((lv_playerLosingScore == 0) && (lv_playerGainingScore != 0))) {
        lv_progressValue = 399;
        lv_percentageValue = 100;
    }
    else if (((lv_playerLosingScore != 0) && (lv_playerGainingScore == 0))) {
        lv_progressValue = 0;
        lv_percentageValue = 0;
    }
    else if (((lv_playerLosingScore == 0) && (lv_playerGainingScore == 0))) {
        lv_progressValue = 0;
        lv_percentageValue = 0;
    }
    TextExpressionSetToken("Param/Expression/06F193C8", "B", IntToText(lv_percentageValue));
    TextExpressionSetToken("Param/Expression/06F193C8", "A", StringExternal("Param/Value/B640B66E"));
    libNtve_gf_CreateDialogItemImage(lp_createddialog, 419, 39, c_anchorTopLeft, 40, lv_barBorderYDefault, TextExpressionAssemble("Param/Expression/06F193C8"), "Assets\\Textures\\ui_void_bossbar_progressbar_blue.dds", c_triggerImageTypeBorder, true, Color(28*100/255,167*100/255,234*100/255), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNineSlice, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(lp_createddialog, lv_progressValue, 19, c_anchorTopLeft, 50, lv_barProgressYDefault, StringToText(""), "Assets\\Textures\\storm_colorgrad_tealgreen.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(35.0, 80.0, 100.0), PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(4.0, 71.0, 100.0), PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    if ((lp_barType == 0)) {
        libNtve_gf_CreateDialogItemLabel(lp_createddialog, 270, 40, c_anchorTopLeft, 50, lv_barTextYDefault, StringToText(("Wins: " + IntToString(gv_player[lp_picked].lv_win))), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(lp_createddialog, 270, 40, c_anchorTopRight, 50, lv_barTextYDefault, StringToText(("Losses: " + IntToString(gv_player[lp_picked].lv_loses))), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12Right", PlayerGroupAll());
    }
    else if ((lp_barType == 1)) {
        libNtve_gf_CreateDialogItemLabel(lp_createddialog, 270, 40, c_anchorTopLeft, 50, lv_barTextYDefault, StringToText(("Kills: " + IntToString(gv_player[lp_picked].lv_kills))), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(lp_createddialog, 270, 40, c_anchorTopRight, 50, lv_barTextYDefault, StringToText(("Deaths: " + IntToString(gv_player[lp_picked].lv_deaths))), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12Right", PlayerGroupAll());
    }
    else if ((lp_barType == 2)) {
        libNtve_gf_CreateDialogItemLabel(lp_createddialog, 270, 40, c_anchorTopLeft, 50, lv_barTextYDefault, StringToText(("Killed: " + IntToString(gv_player[lp_picked].lv_killed))), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(lp_createddialog, 270, 40, c_anchorTopRight, 50, lv_barTextYDefault, StringToText(("Lost: " + IntToString(gv_player[lp_picked].lv_lost))), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12Right", PlayerGroupAll());
    }
}

void gf_InfoPanelProfile () {
    int init_i;

    // Variable Declarations
    int lv_i;
    int lv_x;
    int lv_y;
    string[7] lv_requirement;
    string[7] lv_image;

    // Automatic Variable Declarations
    playergroup autoCE220ED9_g;
    int autoCE220ED9_var;
    playergroup auto222C900E_g;
    int auto222C900E_var;
    int auto14850D4E_val;
    playergroup autoE7FFF4C0_g;
    int autoE7FFF4C0_var;
    unitgroup auto1FF70108_g;
    int auto1FF70108_u;
    unit auto1FF70108_var;
    unitgroup auto12D80C48_g;
    int auto12D80C48_u;
    unit auto12D80C48_var;

    // Variable Initialization
    lv_i = 1;
    lv_x = 65;
    lv_y = 75;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_requirement[init_i] = "";
    }

    // Implementation
    DialogCreate(DialogGetWidth(gv_infoPanel.lv_backgroundDialog), DialogGetHeight(gv_infoPanel.lv_backgroundDialog), DialogGetAnchor(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetX(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetY(gv_infoPanel.lv_backgroundDialog), true);
    gv_profile.lv_main = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 166, 70, c_anchorTop, -166, 0, StringToText(""), StringToText("Stats"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Risk\\ui_battlenet_challenge_button_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Risk\\ui_battlenet_challenge_button_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_profile.lv_mainDI[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 166, 70, c_anchorTop, 0, 0, StringToText(""), StringToText("Achievements"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Risk\\ui_battlenet_challenge_button_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Risk\\ui_battlenet_challenge_button_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_profile.lv_mainDI[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 166, 70, c_anchorTop, 166, 0, StringToText(""), StringToText("Settings"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Risk\\ui_battlenet_challenge_button_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Risk\\ui_battlenet_challenge_button_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_profile.lv_mainDI[3] = DialogControlLastCreated();
    DialogCreate(DialogGetWidth(gv_infoPanel.lv_backgroundDialog), DialogGetHeight(gv_infoPanel.lv_backgroundDialog), DialogGetAnchor(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetX(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetY(gv_infoPanel.lv_backgroundDialog), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_profile.lv_statsMain = DialogLastCreated();
    autoCE220ED9_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
    autoCE220ED9_var = -1;
    while (true) {
        autoCE220ED9_var = PlayerGroupNextPlayer(autoCE220ED9_g, autoCE220ED9_var);
        if (autoCE220ED9_var < 0) { break; }
        libNtve_gf_CreateDialogItemButton(gv_profile.lv_statsMain, 57, 57, c_anchorTopLeft, lv_x, lv_y, StringToText(""), IntToText(autoCE220ED9_var), "");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), PlayerName(autoCE220ED9_var), PlayerGroupAll());
        gv_profile.lv_playerSelectionDI[autoCE220ED9_var] = DialogControlLastCreated();
        DialogCreate(DialogGetWidth(gv_infoPanel.lv_backgroundDialog), DialogGetHeight(gv_infoPanel.lv_backgroundDialog), DialogGetAnchor(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetX(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetY(gv_infoPanel.lv_backgroundDialog), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        gv_profile.lv_playerProfile[autoCE220ED9_var] = DialogLastCreated();
        gf_CreateBarAndText(DialogLastCreated(), 0, 130, autoCE220ED9_var);
        gf_CreateBarAndText(DialogLastCreated(), 1, 210, autoCE220ED9_var);
        gf_CreateBarAndText(DialogLastCreated(), 2, 290, autoCE220ED9_var);
        if ((gv_gameInfo.lv_ranked1v1 == ge_Ranked_Enabled)) {
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 450, (StringToText("ELO: ") + IntToText(gv_player[autoCE220ED9_var].lv_currentELObackup1v1)), ColorWithAlpha(0,0,0,0), false, 2.0);
        }
        else {
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 450, (StringToText("ELO: ") + IntToText(gv_player[autoCE220ED9_var].lv_currentELObackup)), ColorWithAlpha(0,0,0,0), false, 2.0);
        }
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
        lv_i = (lv_i + 1);
        lv_x = (lv_x + 62);
        if ((lv_i == 7)) {
            lv_x = 65;
            lv_y = (lv_y + 62);
        }

    }
    auto222C900E_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
    auto222C900E_var = -1;
    while (true) {
        auto222C900E_var = PlayerGroupNextPlayer(auto222C900E_g, auto222C900E_var);
        if (auto222C900E_var < 0) { break; }
        DialogCreate(DialogGetWidth(gv_infoPanel.lv_backgroundDialog), DialogGetHeight(gv_infoPanel.lv_backgroundDialog), DialogGetAnchor(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetX(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetY(gv_infoPanel.lv_backgroundDialog), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        gv_profile.lv_achieveProfile[auto222C900E_var] = DialogLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTop, -110, 85, StringToText("Victory"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
        lv_i = 1;
        lv_x = -166;
        lv_y = 110;
        lv_image[1] = "Assets\\Textures\\btn-unit-zerg-infestedmarine.dds";
        lv_requirement[1] = "10";
        lv_image[2] = "Assets\\Textures\\btn-unit-terran-bansheemercenary.dds";
        lv_requirement[2] = "25";
        lv_image[3] = "Assets\\Textures\\btn-unit-terran-marinemercenary.dds";
        lv_requirement[3] = "50";
        lv_image[4] = "Assets\\Textures\\btn-unit-terran-siegetankmercenary-tank.dds";
        lv_requirement[4] = "100";
        lv_image[5] = "Assets\\Textures\\btn-unit-terran-maraudermercenary.dds";
        lv_requirement[5] = "250";
        lv_image[6] = "Assets\\Textures\\btn-unit-terran-taurenspacemarine.dds";
        lv_requirement[6] = "500";
        while ((lv_i <= 6)) {
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 60, c_anchorTop, lv_x, lv_y, StringToText(""), StringToText(""), "");
            gv_profile.lv_achieveVictoryDI[lv_i][auto222C900E_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTop, (lv_x - 48), (lv_y + 5), StringToText(""), lv_image[lv_i], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            if ((StringToInt(lv_requirement[lv_i]) > gv_player[auto222C900E_var].lv_win)) {
                DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                DialogControlSetEnabled(gv_profile.lv_achieveVictoryDI[lv_i][auto222C900E_var], PlayerGroupAll(), false);
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
                DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
            }
            else {
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
            }
            lv_i = (lv_i + 1);
            lv_y = (lv_y + 62);
        }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTop, 70, 85, StringToText("Kill"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
        lv_i = 1;
        lv_x = 0;
        lv_y = 110;
        lv_image[1] = "Assets\\Textures\\btn-unit-terran-vikingmercenary-fighter.dds";
        lv_requirement[1] = "250000";
        lv_image[2] = "Assets\\Textures\\wireframe-terran-murlocmarine.dds";
        lv_requirement[2] = "500000";
        lv_image[3] = "Assets\\Textures\\btn-unit-terran-spectre.dds";
        lv_requirement[3] = "1000000";
        while ((lv_i <= 3)) {
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 60, c_anchorTop, lv_x, lv_y, StringToText(""), StringToText(""), "");
            gv_profile.lv_achieveKillsDI[lv_i][auto222C900E_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTop, (lv_x - 48), (lv_y + 5), StringToText(""), lv_image[lv_i], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            if ((StringToInt(lv_requirement[lv_i]) > gv_player[auto222C900E_var].lv_kills)) {
                DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                DialogControlSetEnabled(gv_profile.lv_achieveKillsDI[lv_i][auto222C900E_var], PlayerGroupAll(), false);
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
                DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
            }
            else {
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
            }
            lv_i = (lv_i + 1);
            lv_y = (lv_y + 62);
        }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTop, 220, 85, StringToText("Other"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
        lv_i = 1;
        lv_x = 166;
        lv_y = 110;
        lv_image[1] = "Assets\\Textures\\btn-unit-terran-marauderkillsquad.dds";
        lv_requirement[1] = "Tutorial";
        lv_image[2] = "Assets\\Textures\\btn-unit-terran-battlecruiserloki.dds";
        lv_requirement[2] = "Donate $1";
        lv_image[3] = "Assets\\Textures\\btn-building-terran-biodomecommand.dds";
        lv_requirement[3] = "Donate $5";
        lv_image[4] = "Assets\\Textures\\btn-building-terran-merccompound.dds";
        lv_requirement[4] = "Donate $10";
        lv_image[5] = "Assets\\Textures\\ui_tip_questionmark.dds";
        lv_requirement[5] = "Donate $25";
        while ((lv_i <= 5)) {
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 60, c_anchorTop, lv_x, lv_y, StringToText(""), StringToText(""), "");
            gv_profile.lv_achieveOtherDI[lv_i][auto222C900E_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTop, (lv_x - 48), (lv_y + 5), StringToText(""), lv_image[lv_i], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            auto14850D4E_val = lv_i;
            if (auto14850D4E_val == 1) {
                if ((gv_player[auto222C900E_var].lv_playedTutorial == false)) {
                    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                    DialogControlSetEnabled(gv_profile.lv_achieveOtherDI[lv_i][auto222C900E_var], PlayerGroupAll(), false);
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
                    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                }
                else {
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
                }
            }
            else if (auto14850D4E_val == 2) {
                libNtve_gf_SetDialogItemTooltip(gv_profile.lv_achieveOtherDI[lv_i][auto222C900E_var], StringToText("goo.gl/d7y1Qc"), PlayerGroupAll());
                if (((gv_player[auto222C900E_var].lv_iDStatus == ge_PlayerStatus_DonatorLvl1) || (gv_player[auto222C900E_var].lv_iDStatus == ge_PlayerStatus_DonatorLvl2) || (gv_player[auto222C900E_var].lv_iDStatus == ge_PlayerStatus_DonatorLvl3) || (gv_player[auto222C900E_var].lv_iDStatus == ge_PlayerStatus_DonatorLvl4) || (gv_player[auto222C900E_var].lv_iDStatus == ge_PlayerStatus_Admin))) {
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
                }
                else {
                    if ((gv_profile.lv_achieveUnitValue[6][auto222C900E_var] == 1)) {
                        gv_profile.lv_achieveUnitValue[6][auto222C900E_var] = 0;
                    }

                    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                    DialogControlSetEnabled(gv_profile.lv_achieveOtherDI[lv_i][auto222C900E_var], PlayerGroupAll(), false);
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
                    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                }
            }
            else if (auto14850D4E_val == 3) {
                libNtve_gf_SetDialogItemTooltip(gv_profile.lv_achieveOtherDI[lv_i][auto222C900E_var], StringToText("goo.gl/d7y1Qc"), PlayerGroupAll());
                if (((gv_player[auto222C900E_var].lv_iDStatus == ge_PlayerStatus_DonatorLvl2) || (gv_player[auto222C900E_var].lv_iDStatus == ge_PlayerStatus_DonatorLvl3) || (gv_player[auto222C900E_var].lv_iDStatus == ge_PlayerStatus_DonatorLvl4) || (gv_player[auto222C900E_var].lv_iDStatus == ge_PlayerStatus_Admin))) {
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
                }
                else {
                    if ((gv_profile.lv_achieveUnitValue[7][auto222C900E_var] == 1)) {
                        gv_profile.lv_achieveUnitValue[7][auto222C900E_var] = 0;
                    }

                    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                    DialogControlSetEnabled(gv_profile.lv_achieveOtherDI[lv_i][auto222C900E_var], PlayerGroupAll(), false);
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
                    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                }
            }
            else if (auto14850D4E_val == 4) {
                libNtve_gf_SetDialogItemTooltip(gv_profile.lv_achieveOtherDI[lv_i][auto222C900E_var], StringToText("goo.gl/d7y1Qc"), PlayerGroupAll());
                if (((gv_player[auto222C900E_var].lv_iDStatus == ge_PlayerStatus_DonatorLvl3) || (gv_player[auto222C900E_var].lv_iDStatus == ge_PlayerStatus_DonatorLvl4) || (gv_player[auto222C900E_var].lv_iDStatus == ge_PlayerStatus_Admin))) {
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
                }
                else {
                    if ((gv_profile.lv_achieveUnitValue[8][auto222C900E_var] == 1)) {
                        gv_profile.lv_achieveUnitValue[8][auto222C900E_var] = 0;
                    }

                    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                    DialogControlSetEnabled(gv_profile.lv_achieveOtherDI[lv_i][auto222C900E_var], PlayerGroupAll(), false);
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
                    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                }
            }
            else if (auto14850D4E_val == 5) {
                libNtve_gf_SetDialogItemTooltip(gv_profile.lv_achieveOtherDI[lv_i][auto222C900E_var], StringToText("goo.gl/d7y1Qc"), PlayerGroupAll());
                if (((gv_player[auto222C900E_var].lv_iDStatus == ge_PlayerStatus_DonatorLvl4) || (gv_player[auto222C900E_var].lv_iDStatus == ge_PlayerStatus_Admin))) {
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
                }
                else {
                    if ((gv_profile.lv_achieveDonateValue[auto222C900E_var] == 1)) {
                        gv_profile.lv_achieveDonateValue[auto222C900E_var] = 0;
                    }

                    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                    DialogControlSetEnabled(gv_profile.lv_achieveOtherDI[lv_i][auto222C900E_var], PlayerGroupAll(), false);
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
                    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                }
            }
            else {
            }
            lv_i = (lv_i + 1);
            lv_y = (lv_y + 62);
        }
    }
    autoE7FFF4C0_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
    autoE7FFF4C0_var = -1;
    while (true) {
        autoE7FFF4C0_var = PlayerGroupNextPlayer(autoE7FFF4C0_g, autoE7FFF4C0_var);
        if (autoE7FFF4C0_var < 0) { break; }
        if ((autoE7FFF4C0_var >= 1)) {
            DialogCreate(DialogGetWidth(gv_infoPanel.lv_backgroundDialog), DialogGetHeight(gv_infoPanel.lv_backgroundDialog), DialogGetAnchor(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetX(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetY(gv_infoPanel.lv_backgroundDialog), true);
            DialogSetImageVisible(DialogLastCreated(), false);
            gv_profile.lv_settingsProfile[autoE7FFF4C0_var] = DialogLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 50, c_anchorTopLeft, 18, 60, StringToText("Prioritize new defenders by tier"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensedSettings", PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_challenge_button_normaloverpressedover.dds", PlayerGroupAll());
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
            gv_profile.lv_settingsProfileDI[1][autoE7FFF4C0_var] = DialogControlLastCreated();
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 450, 55);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 13, (75 + 0));
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText("Prioritize Lower Tier Units [Default]"));
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText("Prioritize Higher Tier Units"));
            if ((gv_profile.lv_settingsProfileValue[1][autoE7FFF4C0_var] == 0)) {
                DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
                gv_profile.lv_settingsProfileValue[1][autoE7FFF4C0_var] = 1;
            }
            else {
                DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), gv_profile.lv_settingsProfileValue[1][autoE7FFF4C0_var]);
            }
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 50, c_anchorTopLeft, 18, 140, StringToText("Prioritize new defenders by health"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensedSettings", PlayerGroupAll());
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
            gv_profile.lv_settingsProfileDI[2][autoE7FFF4C0_var] = DialogControlLastCreated();
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 450, 55);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 13, (155 + 0));
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText("Prioritize Lower Health Units [Default]"));
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText("Prioritize Higher Health Units"));
            if ((gv_profile.lv_settingsProfileValue[2][autoE7FFF4C0_var] == 0)) {
                DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
                gv_profile.lv_settingsProfileValue[2][autoE7FFF4C0_var] = 1;
            }
            else {
                DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), gv_profile.lv_settingsProfileValue[2][autoE7FFF4C0_var]);
            }
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 50, c_anchorTopLeft, 18, 220, StringToText("Show starting game base pings"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensedSettings", PlayerGroupAll());
            if ((gv_profile.lv_settingsProfileValue[3][autoE7FFF4C0_var] == 1)) {
                libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 10, 233, StringToText(""), true);
            }
            else {
                libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 10, 233, StringToText(""), false);
            }
            gv_profile.lv_settingsProfileDI[3][autoE7FFF4C0_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 50, c_anchorTopLeft, 18, 280, StringToText("Allow others to view your profile"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensedSettings", PlayerGroupAll());
            if ((gv_profile.lv_settingsProfileValue[4][autoE7FFF4C0_var] == 1)) {
                libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 10, 293, StringToText(""), true);
            }
            else {
                libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 10, 293, StringToText(""), false);
                DialogControlSetEnabled(gv_profile.lv_playerSelectionDI[autoE7FFF4C0_var], PlayerGroupAll(), false);
                DialogControlSetEnabled(gv_profile.lv_playerSelectionDI[autoE7FFF4C0_var], PlayerGroupSingle(autoE7FFF4C0_var), true);
            }
            gv_profile.lv_settingsProfileDI[4][autoE7FFF4C0_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 50, c_anchorTopLeft, 18, 340, StringToText("Show nationality flags from each player"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensedSettings", PlayerGroupAll());
            if ((gv_profile.lv_settingsProfileValue[5][autoE7FFF4C0_var] == 1)) {
                libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 10, 353, StringToText(""), true);
                auto12D80C48_g = UnitGroup("DestructibleKorhalFlag", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto12D80C48_u = UnitGroupCount(auto12D80C48_g, c_unitCountAll);
                for (;; auto12D80C48_u -= 1) {
                    auto12D80C48_var = UnitGroupUnitFromEnd(auto12D80C48_g, auto12D80C48_u);
                    if (auto12D80C48_var == null) { break; }
                    gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(autoE7FFF4C0_var), libNtve_gf_MainActorofUnit(auto12D80C48_var), true);
                }
                PlayerGroupRemove(gv_gameInfo.lv_hideFlag, autoE7FFF4C0_var);
            }
            else {
                libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 10, 353, StringToText(""), false);
                auto1FF70108_g = UnitGroup("DestructibleKorhalFlag", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto1FF70108_u = UnitGroupCount(auto1FF70108_g, c_unitCountAll);
                for (;; auto1FF70108_u -= 1) {
                    auto1FF70108_var = UnitGroupUnitFromEnd(auto1FF70108_g, auto1FF70108_u);
                    if (auto1FF70108_var == null) { break; }
                    gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(autoE7FFF4C0_var), libNtve_gf_MainActorofUnit(auto1FF70108_var), false);
                }
                PlayerGroupAdd(gv_gameInfo.lv_hideFlag, autoE7FFF4C0_var);
            }
            gv_profile.lv_settingsProfileDI[5][autoE7FFF4C0_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 50, c_anchorTopLeft, 18, 400, StringToText("Display Kill Value instead of Kills Lost"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensedSettings", PlayerGroupAll());
            if ((gv_profile.lv_settingsProfileValue[6][autoE7FFF4C0_var] == 1)) {
                libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 10, 413, StringToText(""), true);
            }
            else {
                libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 10, 413, StringToText(""), false);
            }
            gv_profile.lv_settingsProfileDI[6][autoE7FFF4C0_var] = DialogControlLastCreated();
        }

    }
}

void gf_InfoPanelUpdateStatsAchievements (int lp_winner) {
    int init_i;

    // Variable Declarations
    int lv_i;
    int lv_x;
    int lv_y;
    string[7] lv_requirement;
    string[7] lv_image;

    // Automatic Variable Declarations
    playergroup autoC0B15507_g;
    int autoC0B15507_var;
    playergroup auto73F3B090_g;
    int auto73F3B090_var;
    int auto750CE139_val;
    playergroup auto275AF4EB_g;
    int auto275AF4EB_var;
    unitgroup auto756CF4DC_g;
    int auto756CF4DC_u;
    unit auto756CF4DC_var;
    unitgroup autoCFBC3917_g;
    int autoCFBC3917_u;
    unit autoCFBC3917_var;

    // Variable Initialization
    lv_i = 1;
    lv_x = 65;
    lv_y = 75;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_requirement[init_i] = "";
    }

    // Implementation
    autoC0B15507_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
    autoC0B15507_var = -1;
    while (true) {
        autoC0B15507_var = PlayerGroupNextPlayer(autoC0B15507_g, autoC0B15507_var);
        if (autoC0B15507_var < 0) { break; }
        DialogDestroy(gv_profile.lv_playerProfile[autoC0B15507_var]);
        DialogCreate(DialogGetWidth(gv_infoPanel.lv_backgroundDialog), DialogGetHeight(gv_infoPanel.lv_backgroundDialog), DialogGetAnchor(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetX(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetY(gv_infoPanel.lv_backgroundDialog), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        gv_profile.lv_playerProfile[autoC0B15507_var] = DialogLastCreated();
        gf_CreateBarAndText(DialogLastCreated(), 0, 130, autoC0B15507_var);
        gf_CreateBarAndText(DialogLastCreated(), 1, 210, autoC0B15507_var);
        gf_CreateBarAndText(DialogLastCreated(), 2, 290, autoC0B15507_var);
        if ((gv_gameInfo.lv_ranked1v1 == ge_Ranked_Enabled)) {
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 450, (StringToText("ELO: ") + IntToText(gv_player[autoC0B15507_var].lv_currentELObackup1v1)), ColorWithAlpha(0,0,0,0), false, 2.0);
        }
        else {
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 450, (StringToText("ELO: ") + IntToText(gv_player[autoC0B15507_var].lv_currentELObackup)), ColorWithAlpha(0,0,0,0), false, 2.0);
        }
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
        if ((gv_player[autoC0B15507_var].lv_fastestWin == 999)) {
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopRight, 50, 450, (StringToText("Fastest Win: ") + StringExternal("Param/Value/50959432")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12Right", PlayerGroupAll());
        }
        else {
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopRight, 50, 450, (StringToText("Fastest Win: ") + IntToText(gv_player[autoC0B15507_var].lv_fastestWin)), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12Right", PlayerGroupAll());
        }
    }
    auto73F3B090_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
    auto73F3B090_var = -1;
    while (true) {
        auto73F3B090_var = PlayerGroupNextPlayer(auto73F3B090_g, auto73F3B090_var);
        if (auto73F3B090_var < 0) { break; }
        DialogDestroy(gv_profile.lv_achieveProfile[auto73F3B090_var]);
        DialogCreate(DialogGetWidth(gv_infoPanel.lv_backgroundDialog), DialogGetHeight(gv_infoPanel.lv_backgroundDialog), DialogGetAnchor(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetX(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetY(gv_infoPanel.lv_backgroundDialog), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        gv_profile.lv_achieveProfile[auto73F3B090_var] = DialogLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTop, -110, 85, StringToText("Victory"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
        lv_i = 1;
        lv_x = -166;
        lv_y = 110;
        lv_image[1] = "Assets\\Textures\\btn-unit-zerg-infestedmarine.dds";
        lv_requirement[1] = "10";
        lv_image[2] = "Assets\\Textures\\btn-unit-terran-bansheemercenary.dds";
        lv_requirement[2] = "25";
        lv_image[3] = "Assets\\Textures\\btn-unit-terran-marinemercenary.dds";
        lv_requirement[3] = "50";
        lv_image[4] = "Assets\\Textures\\btn-unit-terran-siegetankmercenary-tank.dds";
        lv_requirement[4] = "100";
        lv_image[5] = "Assets\\Textures\\btn-unit-terran-maraudermercenary.dds";
        lv_requirement[5] = "250";
        lv_image[6] = "Assets\\Textures\\btn-unit-terran-taurenspacemarine.dds";
        lv_requirement[6] = "500";
        while ((lv_i <= 6)) {
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 60, c_anchorTop, lv_x, lv_y, StringToText(""), StringToText(""), "");
            gv_profile.lv_achieveVictoryDI[lv_i][auto73F3B090_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTop, (lv_x - 48), (lv_y + 5), StringToText(""), lv_image[lv_i], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            if ((StringToInt(lv_requirement[lv_i]) > gv_player[auto73F3B090_var].lv_win)) {
                DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                DialogControlSetEnabled(gv_profile.lv_achieveVictoryDI[lv_i][auto73F3B090_var], PlayerGroupAll(), false);
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
            }
            else {
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
            }
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
            lv_i = (lv_i + 1);
            lv_y = (lv_y + 62);
        }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTop, 70, 85, StringToText("Kill"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
        lv_i = 1;
        lv_x = 0;
        lv_y = 110;
        lv_image[1] = "Assets\\Textures\\btn-unit-terran-vikingmercenary-fighter.dds";
        lv_requirement[1] = "250000";
        lv_image[2] = "Assets\\Textures\\wireframe-terran-murlocmarine.dds";
        lv_requirement[2] = "500000";
        lv_image[3] = "Assets\\Textures\\btn-unit-terran-spectre.dds";
        lv_requirement[3] = "1000000";
        while ((lv_i <= 3)) {
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 60, c_anchorTop, lv_x, lv_y, StringToText(""), StringToText(""), "");
            gv_profile.lv_achieveKillsDI[lv_i][auto73F3B090_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTop, (lv_x - 48), (lv_y + 5), StringToText(""), lv_image[lv_i], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            if ((StringToInt(lv_requirement[lv_i]) > gv_player[auto73F3B090_var].lv_kills)) {
                DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                DialogControlSetEnabled(gv_profile.lv_achieveKillsDI[lv_i][auto73F3B090_var], PlayerGroupAll(), false);
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
            }
            else {
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 68), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
            }
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
            lv_i = (lv_i + 1);
            lv_y = (lv_y + 62);
        }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTop, 220, 85, StringToText("Other"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
        lv_i = 1;
        lv_x = 166;
        lv_y = 110;
        lv_image[1] = "Assets\\Textures\\btn-unit-terran-marauderkillsquad.dds";
        lv_requirement[1] = "Tutorial";
        lv_image[2] = "Assets\\Textures\\btn-unit-terran-battlecruiserloki.dds";
        lv_requirement[2] = "Donate $1";
        lv_image[3] = "Assets\\Textures\\btn-building-terran-biodomecommand.dds";
        lv_requirement[3] = "Donate $5";
        lv_image[4] = "Assets\\Textures\\btn-building-terran-merccompound.dds";
        lv_requirement[4] = "Donate $10";
        lv_image[5] = "Assets\\Textures\\ui_tip_questionmark.dds";
        lv_requirement[5] = "Donate $25";
        while ((lv_i <= 5)) {
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 60, c_anchorTop, lv_x, lv_y, StringToText(""), StringToText(""), "");
            gv_profile.lv_achieveOtherDI[lv_i][auto73F3B090_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTop, (lv_x - 48), (lv_y + 5), StringToText(""), lv_image[lv_i], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            auto750CE139_val = lv_i;
            if (auto750CE139_val == 1) {
                if ((gv_player[auto73F3B090_var].lv_playedTutorial == false)) {
                    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                    DialogControlSetEnabled(gv_profile.lv_achieveOtherDI[lv_i][auto73F3B090_var], PlayerGroupAll(), false);
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                }
                else {
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                }
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
            }
            else if (auto750CE139_val == 2) {
                libNtve_gf_SetDialogItemTooltip(gv_profile.lv_achieveOtherDI[lv_i][auto73F3B090_var], StringToText("tiny.cc/RiskDonate"), PlayerGroupAll());
                if (((gv_player[auto73F3B090_var].lv_iDStatus == ge_PlayerStatus_DonatorLvl1) || (gv_player[auto73F3B090_var].lv_iDStatus == ge_PlayerStatus_DonatorLvl2) || (gv_player[auto73F3B090_var].lv_iDStatus == ge_PlayerStatus_DonatorLvl3) || (gv_player[auto73F3B090_var].lv_iDStatus == ge_PlayerStatus_DonatorLvl4) || (gv_player[auto73F3B090_var].lv_iDStatus == ge_PlayerStatus_Admin))) {
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                }
                else {
                    if ((gv_profile.lv_achieveUnitValue[6][auto73F3B090_var] == 1)) {
                        gv_profile.lv_achieveUnitValue[6][auto73F3B090_var] = 0;
                    }

                    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                    DialogControlSetEnabled(gv_profile.lv_achieveOtherDI[lv_i][auto73F3B090_var], PlayerGroupAll(), false);
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                }
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
            }
            else if (auto750CE139_val == 3) {
                libNtve_gf_SetDialogItemTooltip(gv_profile.lv_achieveOtherDI[lv_i][auto73F3B090_var], StringToText("tiny.cc/RiskDonate"), PlayerGroupAll());
                if (((gv_player[auto73F3B090_var].lv_iDStatus == ge_PlayerStatus_DonatorLvl2) || (gv_player[auto73F3B090_var].lv_iDStatus == ge_PlayerStatus_DonatorLvl3) || (gv_player[auto73F3B090_var].lv_iDStatus == ge_PlayerStatus_DonatorLvl4) || (gv_player[auto73F3B090_var].lv_iDStatus == ge_PlayerStatus_Admin))) {
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                }
                else {
                    if ((gv_profile.lv_achieveUnitValue[7][auto73F3B090_var] == 1)) {
                        gv_profile.lv_achieveUnitValue[7][auto73F3B090_var] = 0;
                    }

                    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                    DialogControlSetEnabled(gv_profile.lv_achieveOtherDI[lv_i][auto73F3B090_var], PlayerGroupAll(), false);
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                }
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
            }
            else if (auto750CE139_val == 4) {
                libNtve_gf_SetDialogItemTooltip(gv_profile.lv_achieveOtherDI[lv_i][auto73F3B090_var], StringToText("tiny.cc/RiskDonate"), PlayerGroupAll());
                if (((gv_player[auto73F3B090_var].lv_iDStatus == ge_PlayerStatus_DonatorLvl3) || (gv_player[auto73F3B090_var].lv_iDStatus == ge_PlayerStatus_DonatorLvl4) || (gv_player[auto73F3B090_var].lv_iDStatus == ge_PlayerStatus_Admin))) {
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                }
                else {
                    if ((gv_profile.lv_achieveUnitValue[8][auto73F3B090_var] == 1)) {
                        gv_profile.lv_achieveUnitValue[8][auto73F3B090_var] = 0;
                    }

                    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                    DialogControlSetEnabled(gv_profile.lv_achieveOtherDI[lv_i][auto73F3B090_var], PlayerGroupAll(), false);
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                }
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
            }
            else if (auto750CE139_val == 5) {
                libNtve_gf_SetDialogItemTooltip(gv_profile.lv_achieveOtherDI[lv_i][auto73F3B090_var], StringToText("tiny.cc/RiskDonate"), PlayerGroupAll());
                if (((gv_player[auto73F3B090_var].lv_iDStatus == ge_PlayerStatus_DonatorLvl4) || (gv_player[auto73F3B090_var].lv_iDStatus == ge_PlayerStatus_Admin))) {
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                }
                else {
                    if ((gv_profile.lv_achieveDonateValue[auto73F3B090_var] == 1)) {
                        gv_profile.lv_achieveDonateValue[auto73F3B090_var] = 0;
                    }

                    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                    DialogControlSetEnabled(gv_profile.lv_achieveOtherDI[lv_i][auto73F3B090_var], PlayerGroupAll(), false);
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, (lv_x + 80), (lv_y + 10), StringToText(("Requires:<n/>" + lv_requirement[lv_i])), ColorWithAlpha(0,0,0,0), false, 2.0);
                    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                }
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
            }
            else {
            }
            lv_i = (lv_i + 1);
            lv_y = (lv_y + 62);
        }
    }
    auto275AF4EB_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
    auto275AF4EB_var = -1;
    while (true) {
        auto275AF4EB_var = PlayerGroupNextPlayer(auto275AF4EB_g, auto275AF4EB_var);
        if (auto275AF4EB_var < 0) { break; }
        if ((auto275AF4EB_var >= 1)) {
            DialogDestroy(gv_profile.lv_settingsProfile[auto275AF4EB_var]);
            DialogCreate(DialogGetWidth(gv_infoPanel.lv_backgroundDialog), DialogGetHeight(gv_infoPanel.lv_backgroundDialog), DialogGetAnchor(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetX(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetY(gv_infoPanel.lv_backgroundDialog), true);
            DialogSetImageVisible(DialogLastCreated(), false);
            gv_profile.lv_settingsProfile[auto275AF4EB_var] = DialogLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 50, c_anchorTopLeft, 18, 60, StringToText("Prioritize new defenders by tier"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensedSettings", PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_challenge_button_normaloverpressedover.dds", PlayerGroupAll());
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
            gv_profile.lv_settingsProfileDI[1][auto275AF4EB_var] = DialogControlLastCreated();
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 450, 55);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 13, (75 + 0));
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText("Prioritize Lower Tier Units [Default]"));
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText("Prioritize Higher Tier Units"));
            if ((gv_profile.lv_settingsProfileValue[1][auto275AF4EB_var] == 0)) {
                DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
                gv_profile.lv_settingsProfileValue[1][auto275AF4EB_var] = 1;
            }
            else {
                DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), gv_profile.lv_settingsProfileValue[1][auto275AF4EB_var]);
            }
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 50, c_anchorTopLeft, 18, 140, StringToText("Prioritize new defenders by health"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensedSettings", PlayerGroupAll());
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
            gv_profile.lv_settingsProfileDI[2][auto275AF4EB_var] = DialogControlLastCreated();
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 450, 55);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 13, (155 + 0));
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText("Prioritize Lower Health Units [Default]"));
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText("Prioritize Higher Health Units"));
            if ((gv_profile.lv_settingsProfileValue[2][auto275AF4EB_var] == 0)) {
                DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
                gv_profile.lv_settingsProfileValue[2][auto275AF4EB_var] = 1;
            }
            else {
                DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), gv_profile.lv_settingsProfileValue[2][auto275AF4EB_var]);
            }
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 50, c_anchorTopLeft, 18, 220, StringToText("Show starting game base pings"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensedSettings", PlayerGroupAll());
            if ((gv_profile.lv_settingsProfileValue[3][auto275AF4EB_var] == 1)) {
                libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 10, 233, StringToText(""), true);
            }
            else {
                libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 10, 233, StringToText(""), false);
            }
            gv_profile.lv_settingsProfileDI[3][auto275AF4EB_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 50, c_anchorTopLeft, 18, 280, StringToText("Allow others to view your profile"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensedSettings", PlayerGroupAll());
            if ((gv_profile.lv_settingsProfileValue[4][auto275AF4EB_var] == 1)) {
                libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 10, 293, StringToText(""), true);
            }
            else {
                libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 10, 293, StringToText(""), false);
                DialogControlSetEnabled(gv_profile.lv_playerSelectionDI[auto275AF4EB_var], PlayerGroupAll(), false);
                DialogControlSetEnabled(gv_profile.lv_playerSelectionDI[auto275AF4EB_var], PlayerGroupSingle(auto275AF4EB_var), true);
            }
            gv_profile.lv_settingsProfileDI[4][auto275AF4EB_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 50, c_anchorTopLeft, 18, 340, StringToText("Show nationality flags from each player"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensedSettings", PlayerGroupAll());
            if ((gv_profile.lv_settingsProfileValue[5][auto275AF4EB_var] == 1)) {
                libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 10, 353, StringToText(""), true);
                autoCFBC3917_g = UnitGroup("DestructibleKorhalFlag", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoCFBC3917_u = UnitGroupCount(autoCFBC3917_g, c_unitCountAll);
                for (;; autoCFBC3917_u -= 1) {
                    autoCFBC3917_var = UnitGroupUnitFromEnd(autoCFBC3917_g, autoCFBC3917_u);
                    if (autoCFBC3917_var == null) { break; }
                    gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(auto275AF4EB_var), libNtve_gf_MainActorofUnit(autoCFBC3917_var), true);
                }
                PlayerGroupRemove(gv_gameInfo.lv_hideFlag, auto275AF4EB_var);
            }
            else {
                libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 10, 353, StringToText(""), false);
                auto756CF4DC_g = UnitGroup("DestructibleKorhalFlag", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto756CF4DC_u = UnitGroupCount(auto756CF4DC_g, c_unitCountAll);
                for (;; auto756CF4DC_u -= 1) {
                    auto756CF4DC_var = UnitGroupUnitFromEnd(auto756CF4DC_g, auto756CF4DC_u);
                    if (auto756CF4DC_var == null) { break; }
                    gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(auto275AF4EB_var), libNtve_gf_MainActorofUnit(auto756CF4DC_var), false);
                }
                PlayerGroupAdd(gv_gameInfo.lv_hideFlag, auto275AF4EB_var);
            }
            gv_profile.lv_settingsProfileDI[5][auto275AF4EB_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 50, c_anchorTopLeft, 18, 400, StringToText("Display kill value"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensedSettings", PlayerGroupAll());
            if ((gv_profile.lv_settingsProfileValue[6][auto275AF4EB_var] == 1)) {
                libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 10, 413, StringToText(""), true);
            }
            else {
                libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 10, 413, StringToText(""), false);
            }
            gv_profile.lv_settingsProfileDI[6][auto275AF4EB_var] = DialogControlLastCreated();
        }

    }
}

void gf_InfoPanelLog () {
    // Variable Declarations
    int lv_i;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    playergroup auto89988D96_g;
    int auto89988D96_var;

    // Variable Initialization
    lv_i = 1;
    lv_x = 25;
    lv_y = 55;

    // Implementation
    DialogCreate(DialogGetWidth(gv_infoPanel.lv_backgroundDialog), DialogGetHeight(gv_infoPanel.lv_backgroundDialog), DialogGetAnchor(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetX(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetY(gv_infoPanel.lv_backgroundDialog), true);
    gv_log.lv_main = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 70, c_anchorTop, -125, 0, StringToText(""), StringToText("Map"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Risk\\ui_battlenet_challenge_button_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Risk\\ui_battlenet_challenge_button_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    gv_log.lv_mainDI[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 70, c_anchorTop, 125, 0, StringToText(""), StringToText("Messages"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Risk\\ui_battlenet_challenge_button_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Risk\\ui_battlenet_challenge_button_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    gv_log.lv_mainDI[2] = DialogControlLastCreated();
    DialogCreate(DialogGetWidth(gv_infoPanel.lv_backgroundDialog), DialogGetHeight(gv_infoPanel.lv_backgroundDialog), DialogGetAnchor(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetX(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetY(gv_infoPanel.lv_backgroundDialog), true);
    gv_log.lv_mapMain = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottom, -75, 25, StringToText(""), StringToText("Previous"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    gv_log.lv_mapDI[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottom, 75, 25, StringToText(""), StringToText("Next"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    gv_log.lv_mapDI[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTop, 5, 79, StringToText("History Turn Time: 0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    gv_log.lv_mapDI[3] = DialogControlLastCreated();
    DialogControlSetEnabled(gv_log.lv_mapDI[1], PlayerGroupAll(), false);
    DialogControlSetEnabled(gv_log.lv_mapDI[2], PlayerGroupAll(), false);
    DialogCreate(DialogGetWidth(gv_infoPanel.lv_backgroundDialog), DialogGetHeight(gv_infoPanel.lv_backgroundDialog), DialogGetAnchor(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetX(gv_infoPanel.lv_backgroundDialog), DialogGetOffsetY(gv_infoPanel.lv_backgroundDialog), true);
    gv_log.lv_messageMain = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTop, 5, 63, StringToText("Message Log"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight10", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 490, 300);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 100);
    gv_log.lv_messageDI = DialogControlLastCreated();
    auto89988D96_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
    auto89988D96_var = -1;
    while (true) {
        auto89988D96_var = PlayerGroupNextPlayer(auto89988D96_g, auto89988D96_var);
        if (auto89988D96_var < 0) { break; }
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 35, c_anchorBottomLeft, lv_x, lv_y, (StringToText("Mute ") + (TextWithColor(PlayerName(auto89988D96_var), gv_player[auto89988D96_var].lv_currentColour) + StringExternal("Param/Value/7D7BCC0C"))), StringToText("Mute"), "");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoCondensed15", PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(auto89988D96_var), PlayerGroupAll());
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupSingle(auto89988D96_var), false);
        gv_log.lv_muteDI[auto89988D96_var] = DialogControlLastCreated();
        lv_i = (lv_i + 1);
        lv_x = (lv_x + 75);
        if ((lv_i == 7)) {
            lv_x = 25;
            lv_y = (lv_y - 35);
        }

    }
}

void gf_InfoPanelCheckMinimapHistory () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_log.lv_minimapTurn <= 60)) {
        if (((IntToFixed(gv_gameInfo.lv_turns) / 3.0) == IntToFixed(gv_log.lv_minimapTurn))) {
            gv_log.lv_lock = (gv_log.lv_lock + 1);
            gf_InfoPanelCreateMinimapHistory(gv_log.lv_minimapTurn);
            gv_log.lv_minimapTurn = (gv_log.lv_minimapTurn + 1);
        }

    }

}

void gf_InfoPanelCreateMinimapHistory (int lp_integer) {
    // Variable Declarations
    fixed lv_minimapX;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto12AD8A35_g;
    int auto12AD8A35_u;
    unit auto12AD8A35_var;

    // Variable Initialization

    // Implementation
    lv_minimapX = ((PointGetX(RegionGetBoundsMax(RegionEntireMap())) / PointGetY(RegionGetBoundsMax(RegionEntireMap()))) * IntToFixed(gv_log.lv_y));
    DialogCreate(FixedToInt(lv_minimapX), gv_log.lv_y, c_anchorBottomLeft, 100, 460, true);
    gv_log.lv_minimapDialog[lp_integer] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), FixedToInt(lv_minimapX), gv_log.lv_y, c_anchorCenter, 0, 0, StringToText(""), "Risk\\RiskRevulsionHistory.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    auto12AD8A35_g = UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), (1 << (c_targetFilterInvulnerable - 32)), (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), gv_gameInfo.lv_maxBases);
    auto12AD8A35_u = UnitGroupCount(auto12AD8A35_g, c_unitCountAll);
    for (;; auto12AD8A35_u -= 1) {
        auto12AD8A35_var = UnitGroupUnitFromEnd(auto12AD8A35_g, auto12AD8A35_u);
        if (auto12AD8A35_var == null) { break; }
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 5, 5, c_anchorBottomLeft, 0, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, (FixedToInt(gf_getMinimapUnitX(auto12AD8A35_var)) - 0), (FixedToInt(gf_getMinimapUnitY(auto12AD8A35_var)) - 0));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), gv_player[UnitGetOwner(auto12AD8A35_var)].lv_currentColour, PlayerGroupAll());
    }
    DialogControlSetEnabled(gv_log.lv_mapDI[2], PlayerGroupAll(), true);
}

trigger auto_gf_MissionStatement_Trigger = null;
int auto_gf_MissionStatement_lp_player;

void gf_MissionStatement (int lp_player) {
    auto_gf_MissionStatement_lp_player = lp_player;

    if (auto_gf_MissionStatement_Trigger == null) {
        auto_gf_MissionStatement_Trigger = TriggerCreate("auto_gf_MissionStatement_TriggerFunc");
    }

    TriggerExecute(auto_gf_MissionStatement_Trigger, false, false);
}

bool auto_gf_MissionStatement_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_MissionStatement_lp_player;

    int init_i;

    // Variable Declarations
    int lv_locPlayer;
    int lv_locCountry;
    unitgroup lv_highlightgroups;
    int[6] lv_mission;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_locPlayer = lp_player;
    lv_highlightgroups = UnitGroupEmpty();
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_mission[init_i] = c_invalidObjectiveId;
    }

    // Implementation
    gf_PingLocationofBases(lp_player);
    return true;
}

void gf_RefreshKilledandLost () {
    // Automatic Variable Declarations
    playergroup autoF867BF4E_g;
    int autoF867BF4E_var;

    // Implementation
    autoF867BF4E_g = gv_gameInfo.lv_playingPlayers;
    autoF867BF4E_var = -1;
    while (true) {
        autoF867BF4E_var = PlayerGroupNextPlayer(autoF867BF4E_g, autoF867BF4E_var);
        if (autoF867BF4E_var < 0) { break; }
        gv_player[autoF867BF4E_var].lv_killed = (gv_player[autoF867BF4E_var].lv_tempKilled + PlayerScoreValueGetAsInt(autoF867BF4E_var, "UnitsKilledValue"));
        gv_player[autoF867BF4E_var].lv_lost = (gv_player[autoF867BF4E_var].lv_tempLost + PlayerScoreValueGetAsInt(autoF867BF4E_var, "UnitsLostValue"));
    }
}

void gf_RefreshWinCondition () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_gameInfo.lv_victoryConditionType == ge_WinConditions_Percent)) {
        gf_VictoryPercentage(0);
        gf_LowerVictoryPercentage();
    }

}

void gf_RefreshScoreboard (int lp_player, int lp_column, text lp_message) {
    // Automatic Variable Declarations
    int autoE71C46EF_val;
    playergroup autoEA545CE2_g;
    int autoEA545CE2_var;
    playergroup auto70B46185_g;
    int auto70B46185_var;

    // Implementation
    autoE71C46EF_val = lp_column;
    if (autoE71C46EF_val == ge_ScoreboardColumn_Name) {
        if ((lp_player != 0) && (gv_player[lp_player].lv_statusValue != ge_Status_Left)) {
            gv_player[lp_player].lv_nickname = lp_message;
            libNtve_gf_SetDialogItemText(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_username], TextWithColor(gv_player[lp_player].lv_nickname, gv_player[lp_player].lv_currentColour), PlayerGroupAll());
        }
        else {
            if ((gv_player[lp_player].lv_statusValue == ge_Status_Left)) {
                gv_player[lp_player].lv_nickname = lp_message;
                libNtve_gf_SetDialogItemText(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_username], TextWithColor(gv_player[lp_player].lv_nickname, Color(50.20, 50.20, 50.20)), PlayerGroupAll());
            }

        }
    }
    else if (autoE71C46EF_val == ge_ScoreboardColumn_Income) {
        if ((lp_player != 0) && (gv_player[lp_player].lv_statusValue != ge_Status_Left)) {
            libNtve_gf_SetDialogItemText(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_income], TextWithColor(IntToText(gv_player[lp_player].lv_income_Current), gv_player[lp_player].lv_currentColour), PlayerGroupAll());
        }
        else {
            if ((gv_player[lp_player].lv_statusValue == ge_Status_Left)) {
                libNtve_gf_SetDialogItemText(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_income], TextWithColor(IntToText(gv_player[lp_player].lv_income_Current), Color(50.20, 50.20, 50.20)), PlayerGroupAll());
            }

        }
    }
    else if (autoE71C46EF_val == ge_ScoreboardColumn_Kills) {
        autoEA545CE2_g = PlayerGroupActive();
        autoEA545CE2_var = -1;
        while (true) {
            autoEA545CE2_var = PlayerGroupNextPlayer(autoEA545CE2_g, autoEA545CE2_var);
            if (autoEA545CE2_var < 0) { break; }
            if ((gv_profile.lv_settingsProfileValue[6][autoEA545CE2_var] == 1)) {
                libNtve_gf_SetDialogItemText(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_kills], TextWithColor(IntToText(PlayerScoreValueGetAsInt(lp_player, "UnitsKilledValue")), gv_player[lp_player].lv_currentColour), PlayerGroupSingle(autoEA545CE2_var));
                if ((gv_player[lp_player].lv_statusValue == ge_Status_Left)) {
                    libNtve_gf_SetDialogItemText(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_kills], TextWithColor(IntToText(PlayerScoreValueGetAsInt(lp_player, "UnitsKilledValue")), Color(50.20, 50.20, 50.20)), PlayerGroupSingle(autoEA545CE2_var));
                }

            }
            else {
                libNtve_gf_SetDialogItemText(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_kills], TextWithColor(IntToText(PlayerScoreValueGetAsInt(lp_player, "UnitsKilledCount")), gv_player[lp_player].lv_currentColour), PlayerGroupSingle(autoEA545CE2_var));
                if ((gv_player[lp_player].lv_statusValue == ge_Status_Left)) {
                    libNtve_gf_SetDialogItemText(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_kills], TextWithColor(IntToText(PlayerScoreValueGetAsInt(lp_player, "UnitsKilledCount")), Color(50.20, 50.20, 50.20)), PlayerGroupSingle(autoEA545CE2_var));
                }

            }
        }
    }
    else if (autoE71C46EF_val == ge_ScoreboardColumn_Death) {
        auto70B46185_g = PlayerGroupActive();
        auto70B46185_var = -1;
        while (true) {
            auto70B46185_var = PlayerGroupNextPlayer(auto70B46185_g, auto70B46185_var);
            if (auto70B46185_var < 0) { break; }
            if ((gv_profile.lv_settingsProfileValue[6][auto70B46185_var] == 1)) {
                libNtve_gf_SetDialogItemText(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_losses], TextWithColor(IntToText(PlayerScoreValueGetAsInt(lp_player, "UnitsLostValue")), gv_player[lp_player].lv_currentColour), PlayerGroupSingle(auto70B46185_var));
                if ((gv_player[lp_player].lv_statusValue == ge_Status_Left)) {
                    libNtve_gf_SetDialogItemText(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_losses], TextWithColor(IntToText(PlayerScoreValueGetAsInt(lp_player, "UnitsLostValue")), Color(50.20, 50.20, 50.20)), PlayerGroupSingle(auto70B46185_var));
                }

            }
            else {
                libNtve_gf_SetDialogItemText(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_losses], TextWithColor(IntToText(PlayerScoreValueGetAsInt(lp_player, "UnitsLostCount")), gv_player[lp_player].lv_currentColour), PlayerGroupSingle(auto70B46185_var));
                if ((gv_player[lp_player].lv_statusValue == ge_Status_Left)) {
                    libNtve_gf_SetDialogItemText(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_losses], TextWithColor(IntToText(PlayerScoreValueGetAsInt(lp_player, "UnitsLostCount")), Color(50.20, 50.20, 50.20)), PlayerGroupSingle(auto70B46185_var));
                }

            }
        }
    }
    else if (autoE71C46EF_val == ge_ScoreboardColumn_Status) {
        libNtve_gf_SetDialogItemImage(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_status], gv_player[lp_player].lv_statusImage, PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_status], StringToText(gv_player[lp_player].lv_statusString), PlayerGroupAll());
    }
    else if (autoE71C46EF_val == ge_ScoreboardColumn_Notification) {
        libNtve_gf_SetDialogItemText(gv_scoreboard.lv_items[gv_scoreboard.lv_getNotificationRow][0], (StringToText("News: ") + lp_message), PlayerGroupAll());
    }
    else if (autoE71C46EF_val == ge_ScoreboardColumn_Colour) {
        gf_SetCurrentColour(lp_player, false);
        libNtve_gf_SetDialogItemTintColor(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_username], gv_player[lp_player].lv_currentColour, PlayerGroupAll());
        libNtve_gf_SetDialogItemTintColor(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_income], gv_player[lp_player].lv_currentColour, PlayerGroupAll());
        libNtve_gf_SetDialogItemTintColor(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_kills], gv_player[lp_player].lv_currentColour, PlayerGroupAll());
        libNtve_gf_SetDialogItemTintColor(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_losses], gv_player[lp_player].lv_currentColour, PlayerGroupAll());
    }
    else if (autoE71C46EF_val == ge_ScoreboardColumn_Gray) {
        gf_SetCurrentColour(lp_player, true);
        libNtve_gf_SetDialogItemTintColor(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_username], Color(50.20, 50.20, 50.20), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_income], StringToText("0"), PlayerGroupAll());
        libNtve_gf_SetDialogItemTintColor(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_income], Color(50.20, 50.20, 50.20), PlayerGroupAll());
        libNtve_gf_SetDialogItemTintColor(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_kills], Color(50.20, 50.20, 50.20), PlayerGroupAll());
        libNtve_gf_SetDialogItemTintColor(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_losses], Color(50.20, 50.20, 50.20), PlayerGroupAll());
    }
    else {
    }
}

void gf_RefreshSortScoreboard () {
    // Automatic Variable Declarations
    playergroup auto2783B618_g;
    int auto2783B618_var;
    playergroup auto7EB71A03_g;
    int auto7EB71A03_var;

    // Implementation
    auto2783B618_g = PlayerGroupActive();
    auto2783B618_var = -1;
    while (true) {
        auto2783B618_var = PlayerGroupNextPlayer(auto2783B618_g, auto2783B618_var);
        if (auto2783B618_var < 0) { break; }
        while (((gv_scoreboard.lv_getRowIDViaPlayer[auto2783B618_var] > 1) && (PlayerStatus(auto2783B618_var) == c_playerStatusActive) && (gv_player[auto2783B618_var].lv_statusValue != ge_Status_Dead) && ((PlayerStatus(gv_scoreboard.lv_getPlayerIDviaRow[(gv_scoreboard.lv_getRowIDViaPlayer[auto2783B618_var] - 1)]) == c_playerStatusLeft) || (gv_player[gv_scoreboard.lv_getRowIDViaPlayer[auto2783B618_var]].lv_statusValue == ge_Status_Dead) || (gv_player[auto2783B618_var].lv_income_Current > gv_player[gv_scoreboard.lv_getPlayerIDviaRow[(gv_scoreboard.lv_getRowIDViaPlayer[auto2783B618_var] - 1)]].lv_income_Current)))) {
            gf_RefreshSwapScoreboardRows(auto2783B618_var, gv_scoreboard.lv_getPlayerIDviaRow[(gv_scoreboard.lv_getRowIDViaPlayer[auto2783B618_var] - 1)]);
        }
    }
    auto7EB71A03_g = PlayerGroupActive();
    auto7EB71A03_var = -1;
    while (true) {
        auto7EB71A03_var = PlayerGroupNextPlayer(auto7EB71A03_g, auto7EB71A03_var);
        if (auto7EB71A03_var < 0) { break; }
        gf_RefreshUpdateSwappedRows(auto7EB71A03_var);
        gf_RefreshScoreBoardColour();
    }
}

void gf_RefreshScoreBoardColour () {
    // Automatic Variable Declarations
    playergroup autoAF0F66D7_g;
    int autoAF0F66D7_var;

    // Implementation
    autoAF0F66D7_g = PlayerGroupActive();
    autoAF0F66D7_var = -1;
    while (true) {
        autoAF0F66D7_var = PlayerGroupNextPlayer(autoAF0F66D7_g, autoAF0F66D7_var);
        if (autoAF0F66D7_var < 0) { break; }
        if (((PlayerType(autoAF0F66D7_var) == c_playerTypeUser) && ((gv_player[autoAF0F66D7_var].lv_statusValue == ge_Status_Active) || (gv_player[autoAF0F66D7_var].lv_statusValue == ge_Status_AFKAwayfromkeyboard)))) {
            gf_RefreshChangeScoreBoardRowColor(autoAF0F66D7_var, gv_player[autoAF0F66D7_var].lv_currentColour);
        }
        else {
            gf_RefreshChangeScoreBoardRowColor(autoAF0F66D7_var, Color(50.20, 50.20, 50.20));
        }
    }
}

void gf_RefreshChangeScoreBoardRowColor (int lp_player, color lp_color) {
    // Automatic Variable Declarations
    playergroup auto43B249DB_g;
    int auto43B249DB_var;

    // Implementation
    auto43B249DB_g = PlayerGroupActive();
    auto43B249DB_var = -1;
    while (true) {
        auto43B249DB_var = PlayerGroupNextPlayer(auto43B249DB_g, auto43B249DB_var);
        if (auto43B249DB_var < 0) { break; }
        libNtve_gf_SetDialogItemColor(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_income], lp_color, PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_kills], lp_color, PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_losses], lp_color, PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_username], lp_color, PlayerGroupAll());
    }
}

void gf_RefreshSwapScoreboardRows (int lp_player1, int lp_player2) {
    // Variable Declarations
    int lv_oldRow1;
    int lv_oldRow2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_oldRow1 = gv_scoreboard.lv_getRowIDViaPlayer[lp_player1];
    lv_oldRow2 = gv_scoreboard.lv_getRowIDViaPlayer[lp_player2];
    gv_scoreboard.lv_getRowIDViaPlayer[lp_player1] = lv_oldRow2;
    gv_scoreboard.lv_getRowIDViaPlayer[lp_player2] = lv_oldRow1;
    gv_scoreboard.lv_getPlayerIDviaRow[lv_oldRow1] = lp_player2;
    gv_scoreboard.lv_getPlayerIDviaRow[lv_oldRow2] = lp_player1;
}

void gf_RefreshUpdateSwappedRows (int lp_player1) {
    // Variable Declarations
    int lv_oldRow1;
    int lv_oldRow2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_RefreshScoreboard(lp_player1, ge_ScoreboardColumn_Income, StringToText(""));
    gf_RefreshScoreboard(lp_player1, ge_ScoreboardColumn_Name, gv_player[lp_player1].lv_nickname);
    gf_RefreshScoreboard(lp_player1, ge_ScoreboardColumn_Kills, StringToText(""));
    gf_RefreshScoreboard(lp_player1, ge_ScoreboardColumn_Death, StringToText(""));
    gf_RefreshScoreboard(lp_player1, ge_ScoreboardColumn_Status, StringToText(""));
    gf_RefreshScoreBoardFlag(lp_player1);
}

void gf_RefreshAllFlag (int lp_player, int lp_country) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_profile.lv_achieveDonateValue[lp_player] == 1)) {
        libNtve_gf_SetDialogItemImage(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_flag], gv_player[lp_player].lv_flagImage, PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_flag], PlayerName(lp_player), PlayerGroupAll());
        gf_ChangeFlagsTexture(lp_player, lp_country);
        if ((lp_country == 0)) {
            if ((gv_gameInfo.lv_anonymous == ge_Anonymous_Enabled)) {
                gf_ChangeNickName(lp_player, StringToText("Anonymous"));
            }
            else {
                gf_ChangeNickName(lp_player, PlayerName(lp_player));
            }
            DialogControlSetVisible(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_flag], PlayerGroupAll(), false);
        }
        else {
            if ((gv_player[lp_player].lv_showHideNationality == true)) {
                if ((gv_gameInfo.lv_anonymous == ge_Anonymous_Enabled)) {
                    gf_ChangeNickName(lp_player, StringToText("Anonymous"));
                }
                else {
                    gf_ChangeNickName(lp_player, PlayerName(lp_player));
                }
            }
            else {
                if ((gv_gameInfo.lv_anonymous == ge_Anonymous_Enabled)) {
                    gf_ChangeNickName(lp_player, StringToText("Anonymous"));
                }
                else {
                    gf_ChangeNickName(lp_player, PlayerName(lp_player));
                }
            }
        }
    }
    else {
        gv_player[lp_player].lv_homeCountry = lp_country;
        libNtve_gf_SetDialogItemImage(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_flag], gv_country[lp_country].lv_flagImage, PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_flag], StringToText(gv_country[lp_country].lv_name), PlayerGroupAll());
        gf_ChangeFlagsTexture(lp_player, lp_country);
        if ((lp_country == 0)) {
            if ((gv_gameInfo.lv_anonymous == ge_Anonymous_Enabled)) {
                gf_ChangeNickName(lp_player, StringToText("Anonymous"));
            }
            else {
                gf_ChangeNickName(lp_player, PlayerName(lp_player));
            }
            DialogControlSetVisible(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_flag], PlayerGroupAll(), false);
        }
        else {
            if ((gv_player[lp_player].lv_showHideNationality == true)) {
                if ((gv_gameInfo.lv_anonymous == ge_Anonymous_Enabled)) {
                    gf_ChangeNickName(lp_player, StringToText(gv_country[lp_country].lv_name));
                }
                else {
                    gf_ChangeNickName(lp_player, PlayerName(lp_player));
                }
            }
            else {
                if ((gv_gameInfo.lv_anonymous == ge_Anonymous_Enabled)) {
                    gf_ChangeNickName(lp_player, StringToText("Anonymous"));
                }
                else {
                    gf_ChangeNickName(lp_player, PlayerName(lp_player));
                }
            }
        }
    }
}

void gf_RefreshScoreBoardFlag (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_player[lp_player].lv_homeCountry != 0)) {
        if ((gv_profile.lv_achieveDonateValue[lp_player] == 1)) {
            libNtve_gf_SetDialogItemImage(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_flag], gv_player[lp_player].lv_flagImage, PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_flag], PlayerName(lp_player), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemImage(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_flag], gv_country[gv_player[lp_player].lv_homeCountry].lv_flagImage, PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_flag], StringToText(gv_country[gv_player[lp_player].lv_homeCountry].lv_name), PlayerGroupAll());
        }
        DialogControlSetPosition(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_username], PlayerGroupAll(), c_anchorTopLeft, 50, DialogControlGetOffsetY(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_username], 1));
        DialogControlSetVisible(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_flag], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_flag], PlayerGroupAll(), false);
        DialogControlSetPosition(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_username], PlayerGroupAll(), c_anchorTopLeft, 18, DialogControlGetOffsetY(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_username], 1));
    }
}

void gf_RefreshPlayerStatus (int lp_player, int lp_status) {
    // Variable Declarations
    int lv_eLOwindiff;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_player[lp_player].lv_statusValue = lp_status;
    if ((lp_status == ge_Status_Left)) {
        gf_RefreshScoreboard(lp_player, ge_ScoreboardColumn_Gray, StringToText(""));
        gv_player[lp_player].lv_statusString = "Left";
        gv_player[lp_player].lv_statusImage = "Risk\\Inactive.dds";
    }
    else if ((lp_status == ge_Status_Dead) && (PlayerStatus(lp_player) == c_playerStatusActive)) {
        gv_player[lp_player].lv_statusString = "Dead";
        gv_player[lp_player].lv_statusImage = "Risk\\Busy.dds";
        gf_BankSave(lp_player, true);
    }
    else if ((lp_status == ge_Status_AFKAwayfromkeyboard)) {
        gv_player[lp_player].lv_statusString = "AFK";
    }
    else if ((lp_status == ge_Status_Active)) {
        gv_player[lp_player].lv_statusString = "Active";
        gv_player[lp_player].lv_statusImage = "Risk\\Active.dds";
        gv_player[lp_player].lv_statusImage = "Risk\\Active.dds";
    }
    else if ((lp_status == ge_Status_Winner)) {
        if ((gv_gameInfo.lv_ranked == ge_Ranked_Enabled)) {
            gv_player[lp_player].lv_statusImage = "Risk\\Active.dds";
            gv_player[lp_player].lv_loses = (gv_player[lp_player].lv_loses - 1);
            gv_player[lp_player].lv_win = (gv_player[lp_player].lv_win + 1);
            gv_player[lp_player].lv_currentELO = gv_player[lp_player].lv_winningELO;
            if ((gv_player[lp_player].lv_fastestWin > gv_gameInfo.lv_turns)) {
                gv_player[lp_player].lv_fastestWin = gv_gameInfo.lv_turns;
            }

            gf_BankSave(lp_player, true);
            gf_InfoPanelUpdateStatsAchievements(1);
            gf_SkinsUpdateStats();
        }

    }
}

void gf_RefreshTimeInfo (int lp_genericGameInformation) {
    // Variable Declarations
    int lv__23;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_genericGameInformation == ge_GenericGameInformation_Time)) {
        gv_gameInfo.lv_currentTime = (gv_gameInfo.lv_currentTime + 1);
    }
    else if ((lp_genericGameInformation == ge_GenericGameInformation_Turn)) {
        gv_gameInfo.lv_turns = (gv_gameInfo.lv_turns + 1);
    }
}

void gf_CreateTeamDialog () {
    int init_i;

    // Variable Declarations
    int lv_xOffSetOfColumns;
    int lv_yOffSetOfRows;
    int lv_yOffAllSetOfRows;
    int lv_xAllOffSetColumns;
    int[16] lv_incrementRow;
    int lv_countrysGroup;

    // Automatic Variable Declarations
    playergroup auto2637AD9A_g;
    int auto2637AD9A_var;
    const int auto62615001_ae = 14;
    int auto62615001_var;
    const int autoF7C1FDB8_ae = 13;
    int autoF7C1FDB8_var;
    playergroup autoF938E037_g;
    int autoF938E037_var;
    int autoB0515C59_ae;
    int autoB0515C59_var;

    // Variable Initialization
    lv_xOffSetOfColumns = 85;
    lv_yOffSetOfRows = 35;
    lv_xAllOffSetColumns = -30;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lv_incrementRow[init_i] = 1;
    }

    // Implementation
    auto2637AD9A_g = PlayerGroupActive();
    auto2637AD9A_var = -1;
    while (true) {
        auto2637AD9A_var = PlayerGroupNextPlayer(auto2637AD9A_g, auto2637AD9A_var);
        if (auto2637AD9A_var < 0) { break; }
        DialogDestroy(gv_countryGroupDialog[auto2637AD9A_var]);
        DialogCreate(600, 250, c_anchorTopLeft, 0, 0, true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 600, 250, c_anchorBottom, 0, 0, StringToText(""), "Assets\\Textures\\ui_camapaignmenu_dialogbox_base.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_countryGroupDialog[auto2637AD9A_var] = DialogLastCreated();
        DialogSetImageVisible(gv_countryGroupDialog[auto2637AD9A_var], false);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        if ((gv_countryMinimizeStatus[auto2637AD9A_var] == 0)) {
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto2637AD9A_var), false);
        }
        else {
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto2637AD9A_var), true);
        }
        auto62615001_var = 0;
        for ( ; auto62615001_var <= auto62615001_ae; auto62615001_var += 1 ) {
            lv_incrementRow[auto62615001_var] = 1;
        }
        autoF7C1FDB8_var = 1;
        for ( ; autoF7C1FDB8_var <= autoF7C1FDB8_ae; autoF7C1FDB8_var += 1 ) {
            if ((gv_countryGroupBonusInc[autoF7C1FDB8_var] != 0)) {
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 100, c_anchorTopLeft, ((lv_xOffSetOfColumns * autoF7C1FDB8_var) + lv_xAllOffSetColumns), ((lv_incrementRow[autoF7C1FDB8_var] * lv_yOffSetOfRows) + lv_yOffAllSetOfRows), (StringExternal("Param/Value/DD5E33D0") + IntToText(gv_countryGroupBonusInc[autoF7C1FDB8_var])), Color(100,100,100), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight18", PlayerGroupAll());
                autoF938E037_g = PlayerGroupActive();
                autoF938E037_var = -1;
                while (true) {
                    autoF938E037_var = PlayerGroupNextPlayer(autoF938E037_g, autoF938E037_var);
                    if (autoF938E037_var < 0) { break; }
                    if ((gv_ownsCountryGroup[autoF7C1FDB8_var] == true) && (gv_countryGroupOwners[autoF7C1FDB8_var][1] == gv_player[autoF938E037_var].lv_team)) {
                        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(22*100/255,128*100/255,0), PlayerGroupSingle(autoF938E037_var));
                    }
                    else {
                        if ((gv_country[autoF7C1FDB8_var].lv_owner != 0)) {
                            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupSingle(autoF938E037_var));
                        }
                    }
                }
                lv_incrementRow[autoF7C1FDB8_var] = (lv_incrementRow[autoF7C1FDB8_var] + 1);
            }

        }
        autoB0515C59_ae = gv_gameInfo.lv_maxCountries;
        autoB0515C59_var = 1;
        for ( ; autoB0515C59_var <= autoB0515C59_ae; autoB0515C59_var += 1 ) {
            if ((gv_country[autoB0515C59_var].lv_incomeGroup != 0)) {
                lv_countrysGroup = gv_country[autoB0515C59_var].lv_incomeGroup;
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 85, 30, c_anchorTopLeft, ((lv_xOffSetOfColumns * lv_countrysGroup) + lv_xAllOffSetColumns), ((lv_incrementRow[lv_countrysGroup] * lv_yOffSetOfRows) + lv_yOffAllSetOfRows), StringToText(gv_country[autoB0515C59_var].lv_name), ColorWithAlpha(0,0,0,0), false, 2.0);
                lv_incrementRow[lv_countrysGroup] = (lv_incrementRow[lv_countrysGroup] + 1);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight12", PlayerGroupAll());
                if ((gv_country[autoB0515C59_var].lv_owner == 0)) {
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(150*100/255,150*100/255,30*100/255), PlayerGroupSingle(auto2637AD9A_var));
                }
                else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(gv_player[auto2637AD9A_var].lv_team), gv_country[autoB0515C59_var].lv_owner) == true)) {
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(22*100/255,128*100/255,0), PlayerGroupSingle(auto2637AD9A_var));
                }
                else if ((gv_country[autoB0515C59_var].lv_owner != 0)) {
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupSingle(auto2637AD9A_var));
                }
            }

        }
    }
    DialogDestroy(gv_countryButtonDialog);
    DialogCreate(800, 400, c_anchorTopLeft, 0, 0, true);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 45, 40, c_anchorTopLeft, 4, 0, StringToText(""), StringToText(""), "Assets\\Textures\\ui_button_unbindkey_normaloverpressedover_bnet.dds");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_unbindkey_normalpressed_bnet.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_countryButtonMinimize = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    gv_countryButtonDialog = DialogLastCreated();
    DialogSetImageVisible(gv_countryButtonDialog, false);
}

void gf_RefreshCountryGroupIncome () {
    int init_i;
    int init_j;

    // Variable Declarations
    playergroup lv_untitledVariable001;
    playergroup[15] lv_team;
    int[15] lv_teamOwnerofCountryGroup;
    bool[14] lv_ownsCountryGroup;
    int[14] lv_predefineNumber;
    int lv_tempGroup;
    int lv_currentOwner;
    int lv_untitledVariable002;
    bool lv_chosenteam;
    bool lv_teamSet;
    int lv_teamOfPlayer;
    int[11] lv_countryGroupCount;
    int[15][16] lv_countryGroupOwners;
    int lv_totalCountryGroups;
    int[14] lv_tempResult;
    int lv_counter;

    // Automatic Variable Declarations
    const int autoF17E3667_ae = 13;
    int autoF17E3667_var;
    const int auto71901CCB_ae = 13;
    int auto71901CCB_var;
    playergroup auto34FDE359_g;
    int auto34FDE359_var;
    int auto69AFBAF9_ae;
    int auto69AFBAF9_var;
    int auto2D5AC8EF_val;
    int auto40AFAF7D_ae;
    int auto40AFAF7D_var;
    const int autoC3F69212_ae = 13;
    int autoC3F69212_var;
    playergroup autoBA6A9F3C_g;
    int autoBA6A9F3C_var;
    int auto37A4F8EB_val;

    // Variable Initialization
    lv_untitledVariable001 = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 14; init_i += 1) {
        lv_team[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= 14; init_i += 1) {
        lv_teamOwnerofCountryGroup[init_i] = 99;
    }
    for (init_i = 0; init_i <= 13; init_i += 1) {
        lv_ownsCountryGroup[init_i] = true;
    }
    lv_teamOfPlayer = 1;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_countryGroupCount[init_i] = 1;
    }
    for (init_i = 0; init_i <= 14; init_i += 1) {
        for (init_j = 0; init_j <= 15; init_j += 1) {
            lv_countryGroupOwners[init_i][init_j] = 99;
        }
    }
    lv_counter = 1;

    // Implementation
    gv_countryGroupBonusInc[1] = 1;
    gv_countryGroupBonusInc[2] = 2;
    gv_countryGroupBonusInc[3] = 2;
    gv_countryGroupBonusInc[4] = 1;
    gv_countryGroupBonusInc[5] = 2;
    gv_countryGroupBonusInc[6] = 1;
    if ((gv_gameInfo.lv_mode == ge_Mode_Solo)) {
        autoF17E3667_var = 1;
        for ( ; autoF17E3667_var <= autoF17E3667_ae; autoF17E3667_var += 1 ) {
            gv_ownsCountryGroup[autoF17E3667_var] = true;
            gv_countryGroupCount[autoF17E3667_var] = 1;
        }
        auto71901CCB_var = 1;
        for ( ; auto71901CCB_var <= auto71901CCB_ae; auto71901CCB_var += 1 ) {
            auto34FDE359_g = PlayerGroupActive();
            auto34FDE359_var = -1;
            while (true) {
                auto34FDE359_var = PlayerGroupNextPlayer(auto34FDE359_g, auto34FDE359_var);
                if (auto34FDE359_var < 0) { break; }
                if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(auto71901CCB_var), auto34FDE359_var) == true)) {
                    PlayerGroupAdd(gv_teams[auto71901CCB_var], auto34FDE359_var);
                    gv_player[auto34FDE359_var].lv_team = auto71901CCB_var;
                }

            }
        }
        auto69AFBAF9_ae = gv_gameInfo.lv_maxCountries;
        auto69AFBAF9_var = 1;
        for ( ; auto69AFBAF9_var <= auto69AFBAF9_ae; auto69AFBAF9_var += 1 ) {
            lv_currentOwner = gv_country[auto69AFBAF9_var].lv_owner;
            lv_teamOfPlayer = gv_player[lv_currentOwner].lv_team;
            lv_tempGroup = gv_country[auto69AFBAF9_var].lv_incomeGroup;
            auto2D5AC8EF_val = gv_country[auto69AFBAF9_var].lv_incomeGroup;
            if (auto2D5AC8EF_val == 1) {
                gv_countryGroupOwners[1][gv_countryGroupCount[1]] = lv_teamOfPlayer;
                gv_countryGroupCount[1] += 1;
            }
            else if (auto2D5AC8EF_val == 2) {
                gv_countryGroupOwners[2][gv_countryGroupCount[2]] = lv_teamOfPlayer;
                gv_countryGroupCount[2] += 1;
            }
            else if (auto2D5AC8EF_val == 3) {
                gv_countryGroupOwners[3][gv_countryGroupCount[3]] = lv_teamOfPlayer;
                gv_countryGroupCount[3] += 1;
            }
            else if (auto2D5AC8EF_val == 4) {
                gv_countryGroupOwners[4][gv_countryGroupCount[4]] = lv_teamOfPlayer;
                gv_countryGroupCount[4] += 1;
            }
            else if (auto2D5AC8EF_val == 5) {
                gv_countryGroupOwners[5][gv_countryGroupCount[5]] = lv_teamOfPlayer;
                gv_countryGroupCount[5] += 1;
            }
            else if (auto2D5AC8EF_val == 6) {
                gv_countryGroupOwners[6][gv_countryGroupCount[6]] = lv_teamOfPlayer;
                gv_countryGroupCount[6] += 1;
            }
            else {
            }
        }
        lv_totalCountryGroups = 6;
        auto40AFAF7D_ae = lv_totalCountryGroups;
        auto40AFAF7D_var = 1;
        for ( ; auto40AFAF7D_var <= auto40AFAF7D_ae; auto40AFAF7D_var += 1 ) {
            if ((gv_countryGroupOwners[auto40AFAF7D_var][1] != 99)) {
                lv_tempResult[auto40AFAF7D_var] = gv_countryGroupOwners[auto40AFAF7D_var][1];
                lv_counter = 1;
                while ((lv_counter < gv_countryGroupCount[auto40AFAF7D_var])) {
                    if ((lv_tempResult[auto40AFAF7D_var] == gv_countryGroupOwners[auto40AFAF7D_var][lv_counter])) {
                    }
                    else {
                        gv_ownsCountryGroup[auto40AFAF7D_var] = false;
                    }
                    lv_counter += 1;
                }
            }

        }
        autoC3F69212_var = 1;
        for ( ; autoC3F69212_var <= autoC3F69212_ae; autoC3F69212_var += 1 ) {
            autoBA6A9F3C_g = PlayerGroupActive();
            autoBA6A9F3C_var = -1;
            while (true) {
                autoBA6A9F3C_var = PlayerGroupNextPlayer(autoBA6A9F3C_g, autoBA6A9F3C_var);
                if (autoBA6A9F3C_var < 0) { break; }
                if ((gv_ownsCountryGroup[autoC3F69212_var] == true) && (gv_countryGroupOwners[autoC3F69212_var][1] == gv_player[autoBA6A9F3C_var].lv_team)) {
                    auto37A4F8EB_val = autoC3F69212_var;
                    if (auto37A4F8EB_val == 1) {
                        gv_player[autoBA6A9F3C_var].lv_income_Current = (gv_player[autoBA6A9F3C_var].lv_income_Current + gv_countryGroupBonusInc[1]);
                    }
                    else if (auto37A4F8EB_val == 2) {
                        gv_player[autoBA6A9F3C_var].lv_income_Current = (gv_player[autoBA6A9F3C_var].lv_income_Current + gv_countryGroupBonusInc[2]);
                    }
                    else if (auto37A4F8EB_val == 3) {
                        gv_player[autoBA6A9F3C_var].lv_income_Current = (gv_player[autoBA6A9F3C_var].lv_income_Current + gv_countryGroupBonusInc[3]);
                    }
                    else if (auto37A4F8EB_val == 4) {
                        gv_player[autoBA6A9F3C_var].lv_income_Current = (gv_player[autoBA6A9F3C_var].lv_income_Current + gv_countryGroupBonusInc[4]);
                    }
                    else if (auto37A4F8EB_val == 5) {
                        gv_player[autoBA6A9F3C_var].lv_income_Current = (gv_player[autoBA6A9F3C_var].lv_income_Current + gv_countryGroupBonusInc[5]);
                    }
                    else if (auto37A4F8EB_val == 6) {
                        gv_player[autoBA6A9F3C_var].lv_income_Current = (gv_player[autoBA6A9F3C_var].lv_income_Current + gv_countryGroupBonusInc[6]);
                    }
                    else {
                    }
                }

            }
        }
    }

}

void gf_RefreshIncome () {
    // Variable Declarations
    int lv_temp;
    int lv__23;
    playergroup lv_playergroup;
    int[15] lv_firstturn;

    // Automatic Variable Declarations
    playergroup auto510BB8CC_g;
    int auto510BB8CC_var;
    playergroup auto92882CA7_g;
    int auto92882CA7_var;

    // Variable Initialization
    lv__23 = 1;
    lv_playergroup = gf_returnPlayerGroup(PlayerGroupAll(), true, true, false);

    // Implementation
    auto510BB8CC_g = lv_playergroup;
    auto510BB8CC_var = -1;
    while (true) {
        auto510BB8CC_var = PlayerGroupNextPlayer(auto510BB8CC_g, auto510BB8CC_var);
        if (auto510BB8CC_var < 0) { break; }
        gv_player[auto510BB8CC_var].lv_income_Previous = gv_player[auto510BB8CC_var].lv_income_Current;
        gv_player[auto510BB8CC_var].lv_income_Current = 4;
    }
    if ((gv_gameInfo.lv_mode == ge_Mode_Solo)) {
        gf_RefreshCountryGroupIncome();
    }

    while ((lv__23 <= gv_gameInfo.lv_maxCountries)) {
        if ((gv_country[lv__23].lv_owner != 0)) {
            gv_player[gv_country[lv__23].lv_owner].lv_income_Current = (gv_player[gv_country[lv__23].lv_owner].lv_income_Current + gv_country[lv__23].lv_income);
            TextTagCreate((StringToText("<img path=\"Assets\\Textures\\icon-energy-nobg.dds\" width=\"27\" height=\"27\"/> ") + IntToText(gv_country[lv__23].lv_income)), 20, UnitGetPosition(gv_country[lv__23].lv_spawnStructure), 1.75, true, false, PlayerGroupSingle(gv_country[lv__23].lv_owner));
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(45.88, 87.45, 83.53));
            TextTagSetFontSize(TextTagLastCreated(), 32);
            TextTagSetVelocity(TextTagLastCreated(), 0.25, 90.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 10.0);
        }

        lv__23 = (lv__23 + 1);
    }
    auto92882CA7_g = lv_playergroup;
    auto92882CA7_var = -1;
    while (true) {
        auto92882CA7_var = PlayerGroupNextPlayer(auto92882CA7_g, auto92882CA7_var);
        if (auto92882CA7_var < 0) { break; }
        gf_RefreshScoreboard(auto92882CA7_var, ge_ScoreboardColumn_Income, StringToText(""));
    }
}

void gf_RefreshAddIncome () {
    // Variable Declarations
    int lv__23;

    // Automatic Variable Declarations
    playergroup autoFCB5A49D_g;
    int autoFCB5A49D_var;

    // Variable Initialization

    // Implementation
    autoFCB5A49D_g = gf_returnPlayerGroup(PlayerGroupAll(), true, true, false);
    autoFCB5A49D_var = -1;
    while (true) {
        autoFCB5A49D_var = PlayerGroupNextPlayer(autoFCB5A49D_g, autoFCB5A49D_var);
        if (autoFCB5A49D_var < 0) { break; }
        PlayerModifyPropertyInt(autoFCB5A49D_var, c_playerPropMinerals, c_playerPropOperAdd, gv_player[autoFCB5A49D_var].lv_income_Current);
    }
}

void gf_RefreshConscriptManager () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    if ((gv_gameInfo.lv_conscripts == ge_Spawn_Enabled)) {
        while ((lv_i <= gv_gameInfo.lv_maxCountries)) {
            gf_RefreshConscriptUnit(lv_i);
            lv_i = (lv_i + 1);
        }
    }

}

trigger auto_gf_RefreshConscriptUnit_Trigger = null;
int auto_gf_RefreshConscriptUnit_lp_country;

void gf_RefreshConscriptUnit (int lp_country) {
    auto_gf_RefreshConscriptUnit_lp_country = lp_country;

    if (auto_gf_RefreshConscriptUnit_Trigger == null) {
        auto_gf_RefreshConscriptUnit_Trigger = TriggerCreate("auto_gf_RefreshConscriptUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_RefreshConscriptUnit_Trigger, false, false);
}

bool auto_gf_RefreshConscriptUnit_TriggerFunc (bool testConds, bool runActions) {
    int lp_country = auto_gf_RefreshConscriptUnit_lp_country;

    // Variable Declarations
    int lv_i;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;
    lv_unit = gv_country[lp_country].lv_spawnStructure;

    // Implementation
    if ((gv_country[lp_country].lv_owner != 0)) {
        while ((gv_country[lp_country].lv_owner != 0) && (UnitGroupCount(gv_country[lp_country].lv_spawnGroup, c_unitCountAlive) < gv_country[lp_country].lv_spawnLimit) && (lv_i <= gv_country[lp_country].lv_spawnEachRound)) {
            PlayerModifyPropertyInt(UnitGetOwner(lv_unit), c_playerPropMinerals, c_playerPropOperAdd, 1);
            UnitIssueOrder(lv_unit, Order(AbilityCommand("BarracksTrain2", 0)), c_orderQueueReplace);
            lv_i = (lv_i + 1);
            Wait(0.5, c_timeGame);
        }
    }

    return true;
}

void gf_RefreshNotification (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_totalBase;

    // Automatic Variable Declarations
    playergroup autoA0E544B0_g;
    int autoA0E544B0_var;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    if ((gv_gameInfo.lv_mode == ge_Mode_Team)) {
        lv_totalBase = 0;
        autoA0E544B0_g = PlayerGroupAlliance(c_playerGroupAlly, lp_player);
        autoA0E544B0_var = -1;
        while (true) {
            autoA0E544B0_var = PlayerGroupNextPlayer(autoA0E544B0_g, autoA0E544B0_var);
            if (autoA0E544B0_var < 0) { break; }
            lv_totalBase = (lv_totalBase + gv_player[autoA0E544B0_var].lv_income_Current);
        }
        if ((gv_teamMajority == false) && (lv_totalBase >= gv_gameInfo.lv_gameTeamNotificationAmount)) {
            gv_teamMajority = true;
            gf_ChatMessage(lp_player, (StringToText("<c val=\"FF0000\">Warning!</c> - ") + TextWithColor(gv_player[lp_player].lv_nickname, gv_player[lp_player].lv_currentColour) + StringToText("'s team controls ") + IntToText(((lv_totalBase * 100) / gv_gameInfo.lv_maxBases)) + StringToText("% of the map!")), 2);
        }

    }
    else {
        gv_player[lp_player].lv_over30 = false;
        if ((gv_player[lp_player].lv_bases >= gv_gameInfo.lv_gameNotificationAmount) && (PlayerStatus(lp_player) == c_playerStatusActive)) {
            gf_ChatMessage(lp_player, (StringToText("<c val=\"FF0000\">Warning!</c> - ") + TextWithColor(gv_player[lp_player].lv_nickname, gv_player[lp_player].lv_currentColour) + StringToText(" controls ") + IntToText(((gv_player[lp_player].lv_bases * 100) / gv_gameInfo.lv_maxBases)) + StringToText("% of the map!")), 2);
            gv_player[lp_player].lv_over30 = true;
        }

    }
    if ((PlayerStatus(lp_player) == c_playerStatusActive) && (UnitGroupCount(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        gf_RefreshPlayerStatus(lp_player, ge_Status_Active);
    }
    else if ((PlayerStatus(lp_player) == c_playerStatusActive) && (UnitGroupCount(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gf_RefreshPlayerStatus(lp_player, ge_Status_Dead);
    }
    else if ((PlayerStatus(lp_player) == c_playerStatusLeft)) {
        gf_RefreshPlayerStatus(lp_player, ge_Status_Left);
    }
}

trigger auto_gf_RefreshShowBases_Trigger = null;

void gf_RefreshShowBases () {
    if (auto_gf_RefreshShowBases_Trigger == null) {
        auto_gf_RefreshShowBases_Trigger = TriggerCreate("auto_gf_RefreshShowBases_TriggerFunc");
    }

    TriggerExecute(auto_gf_RefreshShowBases_Trigger, false, false);
}

bool auto_gf_RefreshShowBases_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup auto7CDBABD6_g;
    int auto7CDBABD6_var;
    playergroup autoDC077594_g;
    int autoDC077594_var;

    // Variable Initialization

    // Implementation
    while ((lv_i <= gv_gameInfo.lv_maxBases)) {
        auto7CDBABD6_g = gf_returnPlayerGroup(PlayerGroupAll(), true, true, false);
        auto7CDBABD6_var = -1;
        while (true) {
            auto7CDBABD6_var = PlayerGroupNextPlayer(auto7CDBABD6_g, auto7CDBABD6_var);
            if (auto7CDBABD6_var < 0) { break; }
            libNtve_gf_ShareVisionofUnit(gv_base[lv_i].lv_base, true, auto7CDBABD6_var);
        }
        lv_i = (lv_i + 1);
    }
    lv_i = 0;
    Wait(0.001, c_timeGame);
    while ((lv_i <= gv_gameInfo.lv_maxBases)) {
        autoDC077594_g = gf_returnPlayerGroup(PlayerGroupAll(), true, true, false);
        autoDC077594_var = -1;
        while (true) {
            autoDC077594_var = PlayerGroupNextPlayer(autoDC077594_g, autoDC077594_var);
            if (autoDC077594_var < 0) { break; }
            libNtve_gf_ShareVisionofUnit(gv_base[lv_i].lv_base, false, autoDC077594_var);
        }
        lv_i = (lv_i + 1);
    }
    return true;
}

void gf_ChangeNickName (int lp_player, text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    gv_player[lp_player].lv_nickname = lp_text;
}

void gf_RandomizePlayerColour () {
    // Variable Declarations
    int lv_colourRandomize;
    bool[14] lv_usedColours;
    int lv_countPlayers;
    int[13] lv_playerIndex;
    int lv_i;
    int lv_ii;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;
    lv_ii = 1;

    // Implementation
    gv_colours[1] = 1;
    gv_colours[2] = 2;
    gv_colours[3] = 3;
    gv_colours[4] = 4;
    gv_colours[5] = 5;
    gv_colours[6] = 6;
    gv_colours[7] = 12;
    gv_colours[8] = 8;
    gv_colours[9] = 9;
    gv_colours[10] = 10;
    gv_colours[11] = 11;
    gv_colours[12] = 13;
    gv_colours[13] = 15;
    while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            while (true) {
                lv_colourRandomize = RandomInt(1, 13);
                if ((lv_usedColours[lv_colourRandomize] == false)) {
                    lv_usedColours[lv_colourRandomize] = true;
                    gv_player[lv_i].lv_defaultColour = libNtve_gf_ConvertPlayerColorToColor(gv_colours[lv_colourRandomize]);
                    gv_player[lv_i].lv_currentColour = libNtve_gf_ConvertPlayerColorToColor(gv_colours[lv_colourRandomize]);
                    gv_player[lv_i].lv_currentColour2 = gv_colours[lv_colourRandomize];
                    PlayerSetColorIndex(lv_i, 0, true);
                    break;
                }

            }
        }

        lv_i = (lv_i + 1);
    }
}

void gf_SetCurrentColour (int lp_player, bool lp_boolean) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_boolean == true)) {
        gv_player[lp_player].lv_currentColour = Color(50.20, 50.20, 50.20);
    }
    else {
        gv_player[lp_player].lv_currentColour = gv_player[lp_player].lv_defaultColour;
        if ((gv_log.lv_muteDI[lp_player] != c_invalidDialogControlId)) {
            libNtve_gf_SetDialogItemTooltip(gv_log.lv_muteDI[lp_player], ((StringToText("Mute ") + TextWithColor(PlayerName(lp_player), gv_player[lp_player].lv_currentColour)) + StringToText(" from your chat.")), PlayerGroupAll());
        }

    }
}

string gf_AttributeBonusString (int lp_attributeBonusIndex) {
    // Variable Declarations
    string lv_attributeString;

    // Automatic Variable Declarations
    int autoFC6C0E02_val;

    // Variable Initialization
    lv_attributeString = "";

    // Implementation
    autoFC6C0E02_val = lp_attributeBonusIndex;
    if (autoFC6C0E02_val == 0) {
        lv_attributeString = "Light";
    }
    else if (autoFC6C0E02_val == 1) {
        lv_attributeString = "Armored";
    }
    else if (autoFC6C0E02_val == 2) {
        lv_attributeString = "Biological";
    }
    else if (autoFC6C0E02_val == 3) {
        lv_attributeString = "Mechanical";
    }
    else if (autoFC6C0E02_val == 4) {
        lv_attributeString = "Robotic";
    }
    else if (autoFC6C0E02_val == 5) {
        lv_attributeString = "Psionic";
    }
    else if (autoFC6C0E02_val == 6) {
        lv_attributeString = "Massive";
    }
    else if (autoFC6C0E02_val == 8) {
        lv_attributeString = "Hover";
    }
    else if (autoFC6C0E02_val == 9) {
        lv_attributeString = "Structure";
    }
    else if (autoFC6C0E02_val == 10) {
        lv_attributeString = "Heroic";
    }
    else if (autoFC6C0E02_val == 11) {
        lv_attributeString = "Summoned";
    }
    else if (autoFC6C0E02_val == 12) {
        lv_attributeString = "User1";
    }
    else if (autoFC6C0E02_val == 13) {
        lv_attributeString = "MapBoss";
    }
    else {
    }
    return lv_attributeString;
}

text gf_TooltipLineFunc (string lp_string1, string lp_font1, string lp_string2, string lp_font2) {
    // Variable Declarations
    text lv_textResult;
    string lv_string1;
    string lv_font1;
    string lv_string2;
    string lv_font2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_string1 = "";
    lv_string2 = "";

    // Implementation
    lv_textResult = StringToText((("</n>" + "<s val=\"" + (lp_font1) + "\">" + lp_string1 + ": </s>" + "<s val=\"" + (lv_font2) + "\">" + lp_string2 + "</s>")));
    return lv_textResult;
}

trigger auto_gf_RespawnTree_Trigger = null;
point auto_gf_RespawnTree_lp_deadTreePosition;

void gf_RespawnTree (point lp_deadTreePosition) {
    auto_gf_RespawnTree_lp_deadTreePosition = lp_deadTreePosition;

    if (auto_gf_RespawnTree_Trigger == null) {
        auto_gf_RespawnTree_Trigger = TriggerCreate("auto_gf_RespawnTree_TriggerFunc");
    }

    TriggerExecute(auto_gf_RespawnTree_Trigger, false, false);
}

bool auto_gf_RespawnTree_TriggerFunc (bool testConds, bool runActions) {
    point lp_deadTreePosition = auto_gf_RespawnTree_lp_deadTreePosition;

    // Variable Declarations
    point lv_deadTreePoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_deadTreePoint = lp_deadTreePosition;

    // Implementation
    Wait(450.0, c_timeReal);
    UnitCreate(1, "UnbuildableRocksDestructible", c_unitCreateIgnorePlacement, 15, lv_deadTreePoint, libNtve_gf_RandomAngle());
    return true;
}

void gf_BountyAddition (unit lp_dyingUnit, point lp_dyingPosition, int lp_dying, int lp_killing) {
    // Variable Declarations
    int lv_bountyAdded;
    unit lv_triggeringUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringUnit = EventUnit();

    // Implementation
    if ((gv_gameInfo.lv_bounty != ge_Bounty_Disabled) && (lp_dying != lp_killing)) {
        gv_player[lp_killing].lv_bounty = (gv_player[lp_killing].lv_bounty + UnitTypeGetCost(UnitGetType(lp_dyingUnit), c_unitCostMinerals));
        if ((gv_player[lp_killing].lv_bounty >= gv_gameInfo.lv_bountyValue)) {
            lv_bountyAdded = FixedToInt((gv_player[lp_killing].lv_bounty / gv_gameInfo.lv_bountyValue));
            PlayerModifyPropertyInt(lp_killing, c_playerPropMinerals, c_playerPropOperAdd, lv_bountyAdded);
            gv_player[lp_killing].lv_bounty = ModF(gv_player[lp_killing].lv_bounty, gv_gameInfo.lv_bountyValue);
            TextTagCreate((StringToText("<img path=\"Assets\\Textures\\icon-energy-nobg.dds\" width=\"21\" height=\"21\"/>") + IntToText(lv_bountyAdded)), 15, lp_dyingPosition, 1.5, true, false, PlayerGroupSingle(lp_killing));
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(45.88, 87.45, 83.53));
            TextTagSetFontSize(TextTagLastCreated(), 24);
            TextTagSetVelocity(TextTagLastCreated(), 0.25, 90.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 7.0);
        }

    }

}

void gf_AnonymizeUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_gameInfo.lv_anonymous == ge_Anonymous_Enabled)) {
        UnitSetInfoText(lp_unit, StringToText(""), StringToText(""), StringToText(""));
        UnitSetTeamColorIndex(lp_unit, gv_player[UnitGetOwner(lp_unit)].lv_currentColour2);
    }

}

void gf_AnonymizeAllUnit () {
    // Automatic Variable Declarations
    unitgroup auto0C415149_g;
    int auto0C415149_u;
    unit auto0C415149_var;

    // Implementation
    if ((gv_gameInfo.lv_anonymous == ge_Anonymous_Enabled)) {
        auto0C415149_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto0C415149_u = UnitGroupCount(auto0C415149_g, c_unitCountAll);
        for (;; auto0C415149_u -= 1) {
            auto0C415149_var = UnitGroupUnitFromEnd(auto0C415149_g, auto0C415149_u);
            if (auto0C415149_var == null) { break; }
            UnitSetInfoText(auto0C415149_var, StringToText(""), StringToText(""), StringToText(""));
            UnitSetTeamColorIndex(auto0C415149_var, gv_player[UnitGetOwner(auto0C415149_var)].lv_currentColour2);
        }
    }

}

void gf_ChangeDefender (unit lp_new, unit lp_old) {
    // Variable Declarations
    point lv_loc;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_loc = UnitGetPosition(lp_new);

    // Implementation
    UnitSetPosition(lp_old, lv_loc, false);
    UnitSetPosition(lp_new, gv_base[FixedToInt(UnitGetCustomValue(lp_old, 11))].lv_position, false);
    UnitBehaviorRemove(lp_old, "Defender", 1);
    UnitBehaviorAdd(lp_old, "Loadable", lp_old, 1);
    UnitBehaviorRemove(lp_new, "Loadable", 1);
    UnitBehaviorAdd(lp_new, "Defender", lp_new, 1);
    UnitSetCustomValue(lp_new, 11, UnitGetCustomValue(lp_old, 11));
    UnitSetCustomValue(lp_new, 10, UnitGetCustomValue(lp_old, 10));
    gv_base[FixedToInt(UnitGetCustomValue(lp_old, 11))].lv_defender = lp_new;
    UnitSetPropertyFixed(lp_new, c_unitPropLife, (UnitGetPropertyFixed(lp_new, c_unitPropLife, c_unitPropCurrent) - 20.0));
}

void gf_ShowHideActorForPlayerGroup (playergroup lp_players, actor lp_actor, bool lp_show) {
    // Variable Declarations
    actor lv_agent;
    playergroup lv_otherPlayers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_otherPlayers = PlayerGroupActive();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, lv_otherPlayers);
    UIFlyerHelperOverride(lp_players, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
    UIFlyerHelperOverride(lv_otherPlayers, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
    ActorSend(lp_actor, "Create TriggerPerPlayerActorAgent");
    lv_agent = ActorFromActor(lp_actor, "::LastCreatedActual");
    ActorSend(lp_actor, "AliasAdd _TriggerTarget");
    if ((lp_show == true)) {
        ActorSend(lv_agent, "Signal Show");
    }
    else {
        ActorSend(lv_agent, "Signal Hide");
    }
    ActorSend(lp_actor, "AliasRemove _TriggerTarget");
    ActorSend(lv_agent, "Destroy");
    UIFlyerHelperClearOverride(PlayerGroupAll());
}

void gf_SetNationality (int lp_player, int lp_country) {
    // Automatic Variable Declarations
    // Implementation
    gv_player[lp_player].lv_homeCountry = lp_country;
    if ((lp_country == 0)) {
        gv_player[lp_player].lv_showHideNationality = false;
    }
    else {
        gv_player[lp_player].lv_showHideNationality = true;
    }
    if ((gv_gameInfo.lv_anonymous == ge_Anonymous_Enabled)) {
        if ((gv_player[lp_player].lv_showHideNationality == true)) {
            gf_ChangeNickName(lp_player, StringToText(gv_country[lp_country].lv_name));
        }
        else {
            gf_ChangeNickName(lp_player, StringToText("Anonymous"));
        }
    }
    else {
        gf_ChangeNickName(lp_player, PlayerName(lp_player));
    }
    if ((lp_country == 0)) {
        gf_ShowHideAllFlag(lp_player, false);
        DialogControlSetPosition(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_username], PlayerGroupAll(), c_anchorTopLeft, 18, DialogControlGetOffsetY(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_username], 1));
        DialogControlSetVisible(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_flag], PlayerGroupAll(), false);
    }
    else {
        gf_ChangeFlagsTexture(lp_player, lp_country);
        gf_ShowHideAllFlag(lp_player, true);
        DialogControlSetPosition(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_username], PlayerGroupAll(), c_anchorTopLeft, 50, DialogControlGetOffsetY(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_username], 1));
        libNtve_gf_SetDialogItemImage(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_flag], gv_country[lp_country].lv_flagImage, PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_flag], StringToText(gv_country[lp_country].lv_name), PlayerGroupAll());
        DialogControlSetVisible(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lp_player]][gv_scoreboard.lv_flag], PlayerGroupAll(), true);
    }
}

void gf_ShowHideAllFlag (int lp_player, bool lp_showHide) {
    // Automatic Variable Declarations
    unitgroup autoC4EB7EC9_g;
    int autoC4EB7EC9_u;
    unit autoC4EB7EC9_var;

    // Implementation
    gv_player[lp_player].lv_showHideNationality = lp_showHide;
    autoC4EB7EC9_g = UnitGroupFilterPlayer(gv_gameInfo.lv_flagGroup, lp_player, 0);
    autoC4EB7EC9_u = UnitGroupCount(autoC4EB7EC9_g, c_unitCountAll);
    for (;; autoC4EB7EC9_u -= 1) {
        autoC4EB7EC9_var = UnitGroupUnitFromEnd(autoC4EB7EC9_g, autoC4EB7EC9_u);
        if (autoC4EB7EC9_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoC4EB7EC9_var, lp_showHide);
        gf_ShowHideActorForPlayerGroup(gv_gameInfo.lv_hideFlag, libNtve_gf_MainActorofUnit(autoC4EB7EC9_var), false);
    }
}

void gf_ShowHideIndvFlag (bool lp_showHide, int lp_base) {
    // Automatic Variable Declarations
    // Implementation
}

void gf_RefreshIndividualFlag (int lp_player, int lp_base) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_profile.lv_achieveDonateValue[lp_player] == 1)) {
        ActorSend(libNtve_gf_MainActorofUnit(gv_base[lp_base].lv_flag), libNtve_gf_TextureSelectByID(gv_player[lp_player].lv_flagTexture));
    }
    else {
        ActorSend(libNtve_gf_MainActorofUnit(gv_base[lp_base].lv_flag), libNtve_gf_TextureSelectByID(gv_country[gv_player[lp_player].lv_homeCountry].lv_flagTexture));
    }
}

void gf_ChangeFlagsTexture (int lp_player, int lp_flag_by_country_id) {
    // Automatic Variable Declarations
    unitgroup autoC978A01E_g;
    int autoC978A01E_u;
    unit autoC978A01E_var;
    unitgroup auto49A5E254_g;
    int auto49A5E254_u;
    unit auto49A5E254_var;

    // Implementation
    if ((gv_profile.lv_achieveDonateValue[lp_player] == 1)) {
        autoC978A01E_g = UnitGroupFilterPlayer(gv_gameInfo.lv_flagGroup, lp_player, 0);
        autoC978A01E_u = UnitGroupCount(autoC978A01E_g, c_unitCountAll);
        for (;; autoC978A01E_u -= 1) {
            autoC978A01E_var = UnitGroupUnitFromEnd(autoC978A01E_g, autoC978A01E_u);
            if (autoC978A01E_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(autoC978A01E_var), libNtve_gf_TextureSelectByID(gv_player[lp_player].lv_flagTexture));
        }
    }
    else {
        auto49A5E254_g = UnitGroupFilterPlayer(gv_gameInfo.lv_flagGroup, lp_player, 0);
        auto49A5E254_u = UnitGroupCount(auto49A5E254_g, c_unitCountAll);
        for (;; auto49A5E254_u -= 1) {
            auto49A5E254_var = UnitGroupUnitFromEnd(auto49A5E254_g, auto49A5E254_u);
            if (auto49A5E254_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(auto49A5E254_var), libNtve_gf_TextureSelectByID(gv_country[gv_player[lp_player].lv_homeCountry].lv_flagTexture));
        }
    }
}

void gf_RandomimizeNationality (int lp_player, int lp_country, bool lp_boolean) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto497CC491_g;
    int auto497CC491_u;
    unit auto497CC491_var;

    // Variable Initialization

    // Implementation
    if ((lp_boolean == true)) {
        gf_SetNationality(lp_player, lp_country);
    }
    else {
        if ((UnitGroupCount(UnitGroup("SpawnZone", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            auto497CC491_g = UnitGroup("SpawnZone", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto497CC491_u = UnitGroupCount(auto497CC491_g, c_unitCountAll);
            for (;; auto497CC491_u -= 1) {
                auto497CC491_var = UnitGroupUnitFromEnd(auto497CC491_g, auto497CC491_u);
                if (auto497CC491_var == null) { break; }
                lv_unit = auto497CC491_var;
                break;
            }
            gf_SetNationality(lp_player, gf_getCustomUnitValue(lv_unit, 10));
        }

    }
}

void gf_PauseAndHaloGlow (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_temp;

    // Automatic Variable Declarations
    unitgroup autoBFF6ADB3_g;
    int autoBFF6ADB3_u;
    unit autoBFF6ADB3_var;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    PlayerGroupAdd(gv_gameInfo.lv_winParty, lp_player);
    VisEnable(c_visTypeMask, false);
    VisEnable(c_visTypeFog, false);
    UnitPauseAll(true);
    autoBFF6ADB3_g = UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBFF6ADB3_u = UnitGroupCount(autoBFF6ADB3_g, c_unitCountAll);
    for (;; autoBFF6ADB3_u -= 1) {
        autoBFF6ADB3_var = UnitGroupUnitFromEnd(autoBFF6ADB3_g, autoBFF6ADB3_u);
        if (autoBFF6ADB3_var == null) { break; }
        libNtve_gf_MakeUnitUncommandable(autoBFF6ADB3_var, true);
        if ((UnitGetOwner(autoBFF6ADB3_var) == lp_player)) {
            ActorSend(libNtve_gf_MainActorofUnit(autoBFF6ADB3_var), "HaloStart");
            ActorSend(libNtve_gf_MainActorofUnit(autoBFF6ADB3_var), "GlowStart");
            UnitIssueOrder(autoBFF6ADB3_var, Order(AbilityCommand("stop", 2)), c_orderQueueReplace);
        }

    }
    while ((lv_temp <= 12)) {
        gf_ChangeNickName(0, PlayerName(lv_temp));
        if ((PlayerStatus(lv_temp) == c_playerStatusActive)) {
            gf_BankSave(lv_temp, true);
            if (((gv_player[lv_temp].lv_win + gv_player[lv_temp].lv_loses) >= 10)) {
                gv_player[lv_temp].lv_points = gf_getPoints(lv_temp);
            }

        }

        lv_temp = (lv_temp + 1);
    }
    SoundPlay(SoundLink("TValerian02ASwann00059", -1), PlayerGroupAll(), 100.0, 0.0);
}

void gf_VictoryPercentage (int lp_untitledParameter001) {
    // Variable Declarations
    int[13] lv_teamBase;
    int lv_i;

    // Automatic Variable Declarations
    playergroup autoEC82C811_g;
    int autoEC82C811_var;
    playergroup auto28DCBACB_g;
    int auto28DCBACB_var;
    unitgroup autoF28FCB55_g;
    int autoF28FCB55_u;
    unit autoF28FCB55_var;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    if (((gv_gameInfo.lv_mode == ge_Mode_Quick) || (gv_gameInfo.lv_mode == ge_Mode_Custome))) {
        while ((lv_i <= 12)) {
            if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive) && ((PlayerGroupCount(gf_returnPlayerGroup(PlayerGroupAll(), true, false, false)) == 1) || (gv_gameInfo.lv_victoryConditionPercentage <= FixedToInt(((gv_player[lv_i].lv_bases * 100.0) / gv_gameInfo.lv_maxBases)))))) {
                gv_gameInfo.lv_gameOver = true;
                gf_RefreshPlayerStatus(lv_i, ge_Status_Winner);
                TriggerEnable(gt_Refresh, false);
                gf_PauseAndHaloGlow(lv_i);
                break;
            }

            lv_i = (lv_i + 1);
        }
    }
    else {
        autoEC82C811_g = GameAttributePlayersForTeam(1);
        autoEC82C811_var = -1;
        while (true) {
            autoEC82C811_var = PlayerGroupNextPlayer(autoEC82C811_g, autoEC82C811_var);
            if (autoEC82C811_var < 0) { break; }
            lv_teamBase[1] = (lv_teamBase[1] + gv_player[autoEC82C811_var].lv_bases);
        }
        auto28DCBACB_g = GameAttributePlayersForTeam(2);
        auto28DCBACB_var = -1;
        while (true) {
            auto28DCBACB_var = PlayerGroupNextPlayer(auto28DCBACB_g, auto28DCBACB_var);
            if (auto28DCBACB_var < 0) { break; }
            lv_teamBase[2] = (lv_teamBase[2] + gv_player[auto28DCBACB_var].lv_bases);
        }
        if ((gv_gameInfo.lv_mode == ge_Mode_Team)) {
            while ((lv_i <= 12)) {
                if (((PlayerGroupCount(gf_returnPlayerGroup(PlayerGroupAll(), true, false, false)) == 1) || (gv_gameInfo.lv_teamVictoryConditionPercentage <= FixedToInt(((lv_teamBase[lv_i] * 100.0) / gv_gameInfo.lv_maxBases))))) {
                    gv_gameInfo.lv_gameOver = true;
                    TriggerEnable(gt_Refresh, false);
                    VisEnable(c_visTypeMask, false);
                    VisEnable(c_visTypeFog, false);
                    UnitPauseAll(true);
                    autoF28FCB55_g = UnitGroupFilterAlliance(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PlayerGroupPlayer(GameAttributePlayersForTeam(lv_i), 1), c_unitAllianceAlly, 0);
                    autoF28FCB55_u = UnitGroupCount(autoF28FCB55_g, c_unitCountAll);
                    for (;; autoF28FCB55_u -= 1) {
                        autoF28FCB55_var = UnitGroupUnitFromEnd(autoF28FCB55_g, autoF28FCB55_u);
                        if (autoF28FCB55_var == null) { break; }
                        libNtve_gf_MakeUnitUncommandable(autoF28FCB55_var, true);
                        ActorSend(libNtve_gf_MainActorofUnit(autoF28FCB55_var), "HaloStart");
                        ActorSend(libNtve_gf_MainActorofUnit(autoF28FCB55_var), "GlowStart");
                        UnitIssueOrder(autoF28FCB55_var, Order(AbilityCommand("stop", 2)), c_orderQueueReplace);
                    }
                    SoundPlay(SoundLink("TValerian02ASwann00059", -1), PlayerGroupAll(), 100.0, 0.0);
                    break;
                }

                lv_i = (lv_i + 1);
            }
        }

    }
    lv_i = 1;
    if ((gv_gameInfo.lv_ranked1v1 == ge_Ranked_Enabled)) {
        while ((lv_i <= 12)) {
            if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive) && ((PlayerGroupCount(gf_returnPlayerGroup(libNtve_gf_UnionOfPlayerGroups(GameAttributePlayersForTeam(1), GameAttributePlayersForTeam(2)), true, false, false)) == 1) || (gv_gameInfo.lv_victoryConditionPercentage <= FixedToInt(((gv_player[lv_i].lv_bases * 100.0) / gv_gameInfo.lv_maxBases)))))) {
                gv_gameInfo.lv_gameOver = true;
                gv_player[lv_i].lv_currentELO1v1 = gv_player[lv_i].lv_winningELO1v1;
                TextExpressionSetToken("Param/Expression/6E09634A", "A", PlayerName(lv_i));
                TextExpressionSetToken("Param/Expression/6E09634A", "B", IntToText(gv_player[lv_i].lv_currentELO1v1));
                gf_ChatMessage(1, TextExpressionAssemble("Param/Expression/6E09634A"), 2);
                gf_BankSave(lv_i, true);
                TriggerEnable(gt_Refresh, false);
                gf_PauseAndHaloGlow(lv_i);
                break;
            }

            lv_i = (lv_i + 1);
        }
    }

}

void gf_LowerVictoryPercentage () {
    // Variable Declarations
    int lv_startTurn;
    int lv_endingPercentage;
    int lv_turnsPerPercent;
    int lv_i;
    int lv_toggle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_startTurn = 80;
    lv_endingPercentage = 50;
    lv_turnsPerPercent = 4;
    lv_i = 1;

    // Implementation
    if ((lv_toggle == 0) && (true) && (gv_gameInfo.lv_mode == ge_Mode_Quick)) {
        DialogDestroy(gv_victoryPercentageDialog);
        DialogCreate(288, 70, c_anchorTopRight, 555, 0, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        gv_victoryPercentageDialog = DialogLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 288, 70, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_camapaignmenu_dialogbox_base.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeHorizontalBorder, PlayerGroupAll());
        TextExpressionSetToken("Param/Expression/ED27D514", "A", IntToText(gv_gameInfo.lv_victoryConditionPercentage));
        libNtve_gf_CreateDialogItemLabel(gv_victoryPercentageDialog, 300, 50, c_anchorTopLeft, 45, 25, TextExpressionAssemble("Param/Expression/ED27D514"), Color(100.0, 100.0, 100.0), false, 2.0);
        gv_victoryPercentageDialog = DialogLastCreated();
        lv_toggle = (lv_toggle + 1);
        DialogSetVisible(gv_victoryPercentageDialog, PlayerGroupAll(), true);
    }

    if (((gv_gameInfo.lv_turns >= lv_startTurn) && (gv_gameInfo.lv_victoryConditionPercentage != FixedToInt(50.0)))) {
        gv_gameInfo.lv_turnsAccumulatedTillPercentDecrease = (gv_gameInfo.lv_turnsAccumulatedTillPercentDecrease + 1);
        if ((gv_gameInfo.lv_turnsAccumulatedTillPercentDecrease == lv_turnsPerPercent)) {
            gv_gameInfo.lv_victoryConditionPercentage = (gv_gameInfo.lv_victoryConditionPercentage - lv_i);
            gv_victoryPercentageItem = DialogControlLastCreated();
            gv_gameInfo.lv_turnsAccumulatedTillPercentDecrease = 0;
        }
    }

}

void gf_BaseConquestSequence (unit lp_killing, unit lp_dying) {
    // Variable Declarations
    int lv_player_Killing;
    int lv_player_Dying;
    unit lv_unit_Defender;
    int lv_integer_BaseID;
    int lv_integer_CountryID;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player_Killing = UnitGetOwner(lp_killing);
    lv_player_Dying = UnitGetOwner(lp_dying);
    lv_integer_BaseID = gf_getCustomUnitValue(lp_dying, 11);
    lv_integer_CountryID = gf_getCustomUnitValue(lp_dying, 10);

    // Implementation
    if ((gf_ConditionsRequirementsForConquest(lp_killing, lp_dying) == true)) {
        lv_unit_Defender = gf_PrioritizeDefender(lp_killing, 6.0);
        if (((UnitGetType(lv_unit_Defender) == "Interceptor") || (UnitGetType(lv_unit_Defender) == "Diamondback") || (UnitHasBehavior(lv_unit_Defender, "WaterUnit") == true) || (UnitHasBehavior(lv_unit_Defender, "WaterUnit2") == true))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_unit_Defender), UnitGetPosition(lv_unit_Defender));
            gf_AchieveChangeUnit(UnitGetOwner(UnitLastCreated()), UnitLastCreated());
            gf_AnonymizeUnit(UnitLastCreated());
            lv_unit_Defender = UnitLastCreated();
        }

        gv_player[lv_player_Killing].lv_bases = (gv_player[lv_player_Killing].lv_bases + 1);
        gv_player[lv_player_Dying].lv_bases = (gv_player[lv_player_Dying].lv_bases - 1);
        if ((UnitGetOwner(lp_dying) != UnitGetOwner(lp_killing)) && (gv_gameInfo.lv_card == ge_Cards_Enabled)) {
            if ((UnitHasBehavior(gv_base[lv_integer_BaseID].lv_base, "CardCooldown") == false) && (PlayerGetPropertyInt(UnitGetOwner(lp_killing), c_playerPropVespene) < 30)) {
                PlayerModifyPropertyInt(UnitGetOwner(lp_killing), c_playerPropVespene, c_playerPropOperAdd, 1);
                UnitBehaviorAdd(gv_base[lv_integer_BaseID].lv_base, "CardCooldown", gv_base[lv_integer_BaseID].lv_base, 1);
                if ((PlayerGetPropertyInt(UnitGetOwner(lp_killing), c_playerPropVespene) >= 3)) {
                    libNtve_gf_SetDialogItemImage(gv_infoPanel.lv_mainMenuButtons[5], "risk\\cardyellownormalpressed1.dds", PlayerGroupSingle(UnitGetOwner(lp_killing)));
                    libNtve_gf_SetDialogItemImage2(gv_infoPanel.lv_mainMenuButtons[5], "risk\\cardyellowhoverpressed1.dds", PlayerGroupSingle(UnitGetOwner(lp_killing)));
                }

            }

        }

        gf_DefenderSettings(lv_unit_Defender, lp_dying, true);
        gf_CountryConquestSequence(lv_player_Killing, lv_player_Dying, gf_getCustomUnitValue(lv_unit_Defender, 10));
        Wait(0.0, c_timeGame);
        gf_ShowHideIndvFlag(gv_player[UnitGetOwner(lp_killing)].lv_showHideNationality, lv_integer_BaseID);
        gf_RefreshIndividualFlag(UnitGetOwner(lp_killing), lv_integer_BaseID);
        gf_AchieveChangeUnit(UnitGetOwner(gv_base[lv_integer_BaseID].lv_base), gv_base[lv_integer_BaseID].lv_base);
        gf_AnonymizeUnit(gv_base[lv_integer_BaseID].lv_base);
    }

}

void gf_DefenderSettings (unit lp_new, unit lp_old, bool lp_bool) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_bool == true)) {
        UnitSetPosition(lp_new, UnitGetPosition(gv_base[FixedToInt(UnitGetCustomValue(lp_old, 11))].lv_circle), false);
    }

    if ((UnitGetType(lp_new) == "Interceptor")) {
        libNtve_gf_ReplaceUnit(lp_new, "Marine", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        gv_base[FixedToInt(UnitGetCustomValue(lp_old, 11))].lv_defender = libNtve_gf_LastReplacedUnit();
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 11, UnitGetCustomValue(lp_old, 11));
        UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 10, UnitGetCustomValue(lp_old, 10));
        UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "Defender", libNtve_gf_LastReplacedUnit(), 1);
        UnitBehaviorRemove(libNtve_gf_LastReplacedUnit(), "Loadable", 1);
        UnitSetPropertyFixed(libNtve_gf_LastReplacedUnit(), c_unitPropShields, 0.0);
    }
    else {
        gv_base[FixedToInt(UnitGetCustomValue(lp_old, 11))].lv_defender = lp_new;
        UnitSetCustomValue(lp_new, 11, UnitGetCustomValue(lp_old, 11));
        UnitSetCustomValue(lp_new, 10, UnitGetCustomValue(lp_old, 10));
        UnitBehaviorAdd(lp_new, "Defender", lp_new, 1);
        UnitBehaviorRemove(lp_new, "Loadable", 1);
        UnitSetPropertyFixed(lp_new, c_unitPropShields, 0.0);
    }
    gf_SetupBaseOwnership(UnitGetOwner(lp_new), FixedToInt(UnitGetCustomValue(lp_old, 11)));
}

void gf_CountryConquestSequence (int lp_capturingPlayer, int lp_losingPlayer, int lp_country) {
    // Variable Declarations
    int lv__23;

    // Automatic Variable Declarations
    unitgroup auto22C51DF1_g;
    int auto22C51DF1_u;
    unit auto22C51DF1_var;

    // Variable Initialization

    // Implementation
    auto22C51DF1_g = UnitGroupFilterPlayer(gv_country[lp_country].lv_bases, lp_capturingPlayer, 0);
    auto22C51DF1_u = UnitGroupCount(auto22C51DF1_g, c_unitCountAll);
    for (;; auto22C51DF1_u -= 1) {
        auto22C51DF1_var = UnitGroupUnitFromEnd(auto22C51DF1_g, auto22C51DF1_u);
        if (auto22C51DF1_var == null) { break; }
        lv__23 = (lv__23 + 1);
    }
    if ((UnitGroupCount(gv_country[lp_country].lv_bases, c_unitCountAlive) == lv__23)) {
        if ((gv_player[lp_losingPlayer].lv_homeCountry == lp_country) && (lp_capturingPlayer != lp_losingPlayer)) {
            DialogControlSetVisible(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[EventPlayer()]][gv_scoreboard.lv_flag], PlayerGroupAll(), false);
            DialogControlSetPosition(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[EventPlayer()]][gv_scoreboard.lv_username], PlayerGroupAll(), c_anchorTopLeft, 18, DialogControlGetOffsetY(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[EventPlayer()]][gv_scoreboard.lv_username], 1));
            gf_ShowHideAllFlag(lp_losingPlayer, false);
            gf_RefreshAllFlag(lp_losingPlayer, 0);
        }

        gv_country[lp_country].lv_owner = lp_capturingPlayer;
        gv_player[lp_capturingPlayer].lv_countries = (gv_player[lp_capturingPlayer].lv_countries + 1);
        gv_player[lp_losingPlayer].lv_countries = (gv_player[lp_losingPlayer].lv_countries - 1);
        UnitSetOwner(gv_country[lp_country].lv_spawnStructure, lp_capturingPlayer, true);
        UnitIssueOrder(gv_country[lp_country].lv_spawnStructure, OrderTargetingUnit(AbilityCommand("Rally", 0), gv_country[lp_country].lv_spawnStructure), c_orderQueueReplace);
        if ((gv_player[lp_capturingPlayer].lv_countries == 1) && (gv_player[lp_capturingPlayer].lv_showHideNationality != true)) {
            gf_SetNationality(lp_capturingPlayer, lp_country);
        }

        gf_RefreshScoreboard(0, ge_ScoreboardColumn_Notification, (TextWithColor(PlayerName(lp_capturingPlayer), gv_player[lp_capturingPlayer].lv_currentColour) + StringToText(" has claimed ") + StringToText(gv_country[lp_country].lv_name)));
    }
    else {
        if ((UnitGroupCount(gv_country[lp_country].lv_bases, c_unitCountAlive) == (lv__23 - 1))) {
        }

        gv_country[lp_country].lv_owner = 0;
        UnitSetOwner(gv_country[lp_country].lv_spawnStructure, 0, true);
        UnitIssueOrder(gv_country[lp_country].lv_spawnStructure, OrderTargetingUnit(AbilityCommand("Rally", 0), gv_country[lp_country].lv_spawnStructure), c_orderQueueReplace);
    }
    gf_SpawnControlGroup(lp_capturingPlayer, lp_losingPlayer);
}

void gf_SpawnControlGroup (int lp_killing, int lp_dead) {
    // Automatic Variable Declarations
    unitgroup auto0CABB414_g;
    int auto0CABB414_u;
    unit auto0CABB414_var;
    unitgroup autoF8527DC3_g;
    int autoF8527DC3_u;
    unit autoF8527DC3_var;

    // Implementation
    UnitControlGroupClear(lp_killing, 9);
    auto0CABB414_g = UnitGroup("SpawnZone", lp_killing, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0CABB414_u = UnitGroupCount(auto0CABB414_g, c_unitCountAll);
    for (;; auto0CABB414_u -= 1) {
        auto0CABB414_var = UnitGroupUnitFromEnd(auto0CABB414_g, auto0CABB414_u);
        if (auto0CABB414_var == null) { break; }
        UnitControlGroupAddUnit(lp_killing, 9, auto0CABB414_var);
    }
    UnitControlGroupClear(lp_dead, 9);
    autoF8527DC3_g = UnitGroup("SpawnZone", lp_dead, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF8527DC3_u = UnitGroupCount(autoF8527DC3_g, c_unitCountAll);
    for (;; autoF8527DC3_u -= 1) {
        autoF8527DC3_var = UnitGroupUnitFromEnd(autoF8527DC3_g, autoF8527DC3_u);
        if (autoF8527DC3_var == null) { break; }
        UnitControlGroupAddUnit(lp_dead, 9, autoF8527DC3_var);
    }
}

bool gf_ConditionsRequirementsForConquest (unit lp_killing, unit lp_dying) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_dying == gv_base[gf_getCustomUnitValue(lp_dying, 11)].lv_defender) && (gf_UnitTypeCondition(lp_killing) == true) && (gf_UnitTypeCondition(lp_dying) == true) && (gf_BaseReadyToBeConquered(lp_killing, lp_dying) == true)) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_UnitTypeCondition (unit lp_unit) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((UnitGetType(lp_unit) != null)) {
        if ((UnitGetType(lp_unit) == gv_gameInfo.lv_unitType[lv_i]) && (true)) {
            return true;
        }

        lv_i = (lv_i + 1);
    }
    return false;
}

bool gf_BaseReadyToBeConquered (unit lp_killing, unit lp_dying) {
    // Variable Declarations
    unitgroup lv_temp_group;

    // Automatic Variable Declarations
    unitgroup auto654A12A7_g;
    int auto654A12A7_u;
    unit auto654A12A7_var;

    // Variable Initialization
    lv_temp_group = UnitGroupEmpty();

    // Implementation
    auto654A12A7_g = UnitGroup(null, c_playerAny, RegionCircle(gv_base[gf_getCustomUnitValue(lp_dying, 11)].lv_position, 1.6), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
    auto654A12A7_u = UnitGroupCount(auto654A12A7_g, c_unitCountAll);
    for (;; auto654A12A7_u -= 1) {
        auto654A12A7_var = UnitGroupUnitFromEnd(auto654A12A7_g, auto654A12A7_u);
        if (auto654A12A7_var == null) { break; }
        if ((gf_UnitTypeCondition(auto654A12A7_var) == true)) {
            UnitGroupAdd(lv_temp_group, auto654A12A7_var);
        }

    }
    if ((UnitGroupCount(UnitGroupFilterPlayer(lv_temp_group, UnitGetOwner(lp_dying), 0), c_unitCountAlive) > 0)) {
        gf_DefenderSettings(UnitGroupRandomUnit(UnitGroupFilterPlayer(lv_temp_group, UnitGetOwner(lp_dying), 0), c_unitCountAlive), lp_dying, true);
        return false;
    }
    else if ((UnitGroupCount(UnitGroupFilterPlayer(lv_temp_group, UnitGetOwner(lp_killing), 0), c_unitCountAlive) == UnitGroupCount(lv_temp_group, c_unitCountAlive))) {
        return true;
    }
    return false;
}

void gf_setCustomValueOfUnit (unit lp_unit, int lp_integer) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetCustomValue(lp_unit, 11, IntToFixed(lp_integer));
    UnitSetCustomValue(lp_unit, 10, UnitGetCustomValue(gv_base[lp_integer].lv_base, 10));
}

int gf_getIndexOfLargestInteger (int lp_setting) {
    // Variable Declarations
    int lv_max;
    int lv_indexOfMaxValue;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_indexOfMaxValue = -1;

    // Implementation
    while ((gv_customSetting.lv_string_Value[lp_setting][lv_i] != "")) {
        if ((lv_max < gv_customSetting.lv_settings_Vote[lp_setting][lv_i])) {
            lv_max = gv_customSetting.lv_settings_Vote[lp_setting][lv_i];
            lv_indexOfMaxValue = lv_i;
        }

        lv_i = (lv_i + 1);
    }
    return lv_indexOfMaxValue;
}

bool gf_ApprovedName (string lp_string) {
    // Variable Declarations
    bool lv_bool;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((StringLength(lp_string) >= 3) && (StringLength(lp_string) <= 12)) && (StringContains(lp_string, " ", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "`", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "~", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "1", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "!", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "2", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "@", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "3", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "#", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "4", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "$", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "5", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "%", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "6", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "^", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "7", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "&", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "8", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "*", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "9", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "(", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "0", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, ")", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "-", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "_", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "=", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "+", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "[", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "{", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "]", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "}", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "\\", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "|", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, ";", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, ":", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "'", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "\"", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, ",", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "<", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, ".", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, ">", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "/", c_stringAnywhere, c_stringCase) == false) && (StringContains(lp_string, "?", c_stringAnywhere, c_stringCase) == false)) {
        lv_bool = true;
    }
    else {
        lv_bool = false;
    }
    return lv_bool;
}

fixed gf_getMinimapUnitX (unit lp_unit) {
    // Variable Declarations
    fixed lv_mapWidth;
    fixed lv_miniWidth;
    fixed lv_mapPosX;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mapWidth = libNtve_gf_WidthOfRegion(RegionEntireMap());
    lv_miniWidth = DialogGetWidth(gv_log.lv_minimapDialog[0]);
    lv_mapPosX = PointGetX(UnitGetPosition(lp_unit));

    // Implementation
    return ((lv_mapPosX * lv_miniWidth) / lv_mapWidth);
}

fixed gf_getMinimapUnitY (unit lp_unit) {
    // Variable Declarations
    fixed lv_mapHeight;
    fixed lv_miniHeight;
    fixed lv_mapPosY;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mapHeight = libNtve_gf_HeightOfRegion(RegionEntireMap());
    lv_miniHeight = DialogGetHeight(gv_log.lv_minimapDialog[0]);
    lv_mapPosY = PointGetY(UnitGetPosition(lp_unit));

    // Implementation
    return ((lv_mapPosY * lv_miniHeight) / lv_mapHeight);
}

int gf_getPoints (int lp_player) {
    // Variable Declarations
    fixed lv_points;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_points = (((IntToFixed(gv_player[lp_player].lv_win) / IntToFixed(gv_player[lp_player].lv_loses)) + (IntToFixed(gv_player[lp_player].lv_kills) / IntToFixed(gv_player[lp_player].lv_deaths))) * 1000.0);
    return FixedToInt(lv_points);
}

int gf_getCustomUnitValue (unit lp_unit, int lp_integer) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, lp_integer));
}

int gf_getNextActivePlayer (int lp_player, bool lp_bool) {
    // Variable Declarations
    int lv_nextPlayer;
    bool lv_bool;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nextPlayer = lp_player;

    // Implementation
    while ((lv_bool == false)) {
        if ((lv_nextPlayer > gv_gameInfo.lv_maxPlayers)) {
            lv_nextPlayer = 1;
        }
        else {
            lv_nextPlayer = (lv_nextPlayer + 1);
        }
        if ((PlayerGroupHasPlayer(gf_returnPlayerGroup(PlayerGroupAll(), true, lp_bool, false), lv_nextPlayer) == true)) {
            return lv_nextPlayer;
        }

    }
    return lv_nextPlayer;
}

playergroup gf_returnPlayerGroup (playergroup lp_playergrp, bool lp_bool_users, bool lp_bool_npc, bool lp_bool_spectators) {
    // Variable Declarations
    playergroup lv_plrgrp;

    // Automatic Variable Declarations
    playergroup auto7E4B5B2E_g;
    int auto7E4B5B2E_var;

    // Variable Initialization
    lv_plrgrp = PlayerGroupEmpty();

    // Implementation
    auto7E4B5B2E_g = lp_playergrp;
    auto7E4B5B2E_var = -1;
    while (true) {
        auto7E4B5B2E_var = PlayerGroupNextPlayer(auto7E4B5B2E_g, auto7E4B5B2E_var);
        if (auto7E4B5B2E_var < 0) { break; }
        if ((lp_bool_npc == true) && (PlayerType(auto7E4B5B2E_var) == c_playerTypeComputer) && (auto7E4B5B2E_var != 0)) {
            PlayerGroupAdd(lv_plrgrp, auto7E4B5B2E_var);
        }

        if ((lp_bool_users == true) && (PlayerType(auto7E4B5B2E_var) == c_playerTypeUser) && (PlayerStatus(auto7E4B5B2E_var) != c_playerStatusUnused) && (PlayerStatus(auto7E4B5B2E_var) != c_playerStatusLeft)) {
            PlayerGroupAdd(lv_plrgrp, auto7E4B5B2E_var);
        }

        if ((lp_bool_spectators == true) && (PlayerType(auto7E4B5B2E_var) == c_playerTypeSpectator)) {
            PlayerGroupAdd(lv_plrgrp, auto7E4B5B2E_var);
        }

    }
    return lv_plrgrp;
}

bool gf_PlayerMeetsCondition (int lp_player, bool lp_bool_users, bool lp_bool_npc, bool lp_bool_spectators) {
    // Variable Declarations
    playergroup lv_plrgrp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_plrgrp = PlayerGroupEmpty();

    // Implementation
    if ((lp_bool_npc == true) && (PlayerType(lp_player) == c_playerTypeComputer) && (lp_player != 0)) {
        return true;
    }

    if ((lp_bool_users == true) && (PlayerType(lp_player) == c_playerTypeUser) && (PlayerStatus(lp_player) == c_playerStatusActive)) {
        return true;
    }

    if ((lp_bool_spectators == true) && (PlayerType(PlayerGroupLoopCurrentDeprecated()) == c_playerTypeSpectator)) {
        return true;
    }

    return false;
}

unit gf_PrioritizeDefender (unit lp_attacker_Unit, fixed lp_radius) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_unitGroup;
    int lv_iD_UnitPriorizationType;
    int lv_temp;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoDD474270_g;
    int autoDD474270_u;
    unit autoDD474270_var;
    unitgroup auto6658FA7C_g;
    int auto6658FA7C_u;
    unit auto6658FA7C_var;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();
    lv_iD_UnitPriorizationType = 1000;

    // Implementation
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, UnitGetOwner(lp_attacker_Unit), RegionCircle(UnitGetPosition(lp_attacker_Unit), lp_radius), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), lv_unitGroup);
    autoDD474270_g = lv_unitGroup;
    autoDD474270_u = UnitGroupCount(autoDD474270_g, c_unitCountAll);
    for (;; autoDD474270_u -= 1) {
        autoDD474270_var = UnitGroupUnitFromEnd(autoDD474270_g, autoDD474270_u);
        if (autoDD474270_var == null) { break; }
        if ((UnitHasBehavior(autoDD474270_var, "Defender") == true)) {
            UnitGroupRemove(lv_unitGroup, autoDD474270_var);
        }

    }
    lv_unitGroup = gf_getUnitsSortedByPrioritization(UnitGetOwner(lp_attacker_Unit), lv_unitGroup);
    auto6658FA7C_g = lv_unitGroup;
    auto6658FA7C_u = UnitGroupCount(auto6658FA7C_g, c_unitCountAll);
    for (;; auto6658FA7C_u -= 1) {
        auto6658FA7C_var = UnitGroupUnitFromEnd(auto6658FA7C_g, auto6658FA7C_u);
        if (auto6658FA7C_var == null) { break; }
    }
    lv_unit = gf_getUnitSortedByHealth(UnitGetOwner(lp_attacker_Unit), lv_unitGroup);
    return lv_unit;
}

unitgroup gf_getUnitsSortedByPrioritization (int lp_player, unitgroup lp_unitGroupParam) {
    // Variable Declarations
    unitgroup lv_unitGroup;
    int lv_iD_UnitPriorizationType;
    int lv_temp;

    // Automatic Variable Declarations
    unitgroup auto22AE5921_g;
    int auto22AE5921_u;
    unit auto22AE5921_var;
    unitgroup autoE408C7C3_g;
    int autoE408C7C3_u;
    unit autoE408C7C3_var;
    unitgroup autoC6D1BB56_g;
    int autoC6D1BB56_u;
    unit autoC6D1BB56_var;
    unitgroup auto608AE46F_g;
    int auto608AE46F_u;
    unit auto608AE46F_var;

    // Variable Initialization
    lv_unitGroup = lp_unitGroupParam;
    lv_iD_UnitPriorizationType = -1;

    // Implementation
    if ((gv_profile.lv_settingsProfileValue[1][lp_player] == 1)) {
        lv_iD_UnitPriorizationType = 1000;
        auto22AE5921_g = lv_unitGroup;
        auto22AE5921_u = UnitGroupCount(auto22AE5921_g, c_unitCountAll);
        for (;; auto22AE5921_u -= 1) {
            auto22AE5921_var = UnitGroupUnitFromEnd(auto22AE5921_g, auto22AE5921_u);
            if (auto22AE5921_var == null) { break; }
            lv_temp = gf_getPriorizationValueOfUnitType(auto22AE5921_var);
            if ((lv_temp < lv_iD_UnitPriorizationType)) {
                lv_iD_UnitPriorizationType = lv_temp;
            }

        }
    }
    else if ((gv_profile.lv_settingsProfileValue[1][lp_player] == 2)) {
        lv_iD_UnitPriorizationType = 0;
        autoE408C7C3_g = lv_unitGroup;
        autoE408C7C3_u = UnitGroupCount(autoE408C7C3_g, c_unitCountAll);
        for (;; autoE408C7C3_u -= 1) {
            autoE408C7C3_var = UnitGroupUnitFromEnd(autoE408C7C3_g, autoE408C7C3_u);
            if (autoE408C7C3_var == null) { break; }
            lv_temp = gf_getPriorizationValueOfUnitType(autoE408C7C3_var);
            if ((lv_temp > lv_iD_UnitPriorizationType)) {
                lv_iD_UnitPriorizationType = lv_temp;
            }

        }
    }
    autoC6D1BB56_g = lv_unitGroup;
    autoC6D1BB56_u = UnitGroupCount(autoC6D1BB56_g, c_unitCountAll);
    for (;; autoC6D1BB56_u -= 1) {
        autoC6D1BB56_var = UnitGroupUnitFromEnd(autoC6D1BB56_g, autoC6D1BB56_u);
        if (autoC6D1BB56_var == null) { break; }
        if ((lv_iD_UnitPriorizationType == -1)) {
        }
        else if ((UnitGetType(autoC6D1BB56_var) != gv_gameInfo.lv_unitType_Priorization[0][lv_iD_UnitPriorizationType])) {
            UnitGroupRemove(lv_unitGroup, autoC6D1BB56_var);
        }
    }
    auto608AE46F_g = lv_unitGroup;
    auto608AE46F_u = UnitGroupCount(auto608AE46F_g, c_unitCountAll);
    for (;; auto608AE46F_u -= 1) {
        auto608AE46F_var = UnitGroupUnitFromEnd(auto608AE46F_g, auto608AE46F_u);
        if (auto608AE46F_var == null) { break; }
    }
    return lv_unitGroup;
}

unit gf_getUnitSortedByHealth (int lp_player, unitgroup lp_unitGroup) {
    // Variable Declarations
    fixed lv_life;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto67CF78CC_g;
    int auto67CF78CC_u;
    unit auto67CF78CC_var;
    unitgroup auto283EA176_g;
    int auto283EA176_u;
    unit auto283EA176_var;

    // Variable Initialization
    lv_life = 10000.0;

    // Implementation
    if ((gv_profile.lv_settingsProfileValue[2][lp_player] == 1)) {
        lv_life = 100000.0;
        auto67CF78CC_g = lp_unitGroup;
        auto67CF78CC_u = UnitGroupCount(auto67CF78CC_g, c_unitCountAll);
        for (;; auto67CF78CC_u -= 1) {
            auto67CF78CC_var = UnitGroupUnitFromEnd(auto67CF78CC_g, auto67CF78CC_u);
            if (auto67CF78CC_var == null) { break; }
            if ((UnitGetPropertyFixed(auto67CF78CC_var, c_unitPropLife, c_unitPropCurrent) < lv_life)) {
                lv_unit = auto67CF78CC_var;
                lv_life = UnitGetPropertyFixed(auto67CF78CC_var, c_unitPropLife, c_unitPropCurrent);
            }

        }
        return lv_unit;
    }
    else if ((gv_profile.lv_settingsProfileValue[2][lp_player] == 2)) {
        lv_life = 0.0;
        auto283EA176_g = lp_unitGroup;
        auto283EA176_u = UnitGroupCount(auto283EA176_g, c_unitCountAll);
        for (;; auto283EA176_u -= 1) {
            auto283EA176_var = UnitGroupUnitFromEnd(auto283EA176_g, auto283EA176_u);
            if (auto283EA176_var == null) { break; }
            if ((UnitGetPropertyFixed(auto283EA176_var, c_unitPropLife, c_unitPropCurrent) > lv_life)) {
                lv_unit = auto283EA176_var;
                lv_life = UnitGetPropertyFixed(auto283EA176_var, c_unitPropLife, c_unitPropCurrent);
            }

        }
        return lv_unit;
    }
    return UnitGroupRandomUnit(lp_unitGroup, c_unitCountAlive);
}

int gf_getPriorizationValueOfUnitType (unit lp_unit) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((gv_gameInfo.lv_unitType[lv_i] != null)) {
        if ((UnitGetType(lp_unit) == gv_gameInfo.lv_unitType[lv_i])) {
            break;
        }

        lv_i = (lv_i + 1);
    }
    return lv_i;
}

bool gf_AnyoneElseHasNationality (int lp_player, int lp_country) {
    // Variable Declarations
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    playergroup auto632D26CD_g;
    int auto632D26CD_var;

    // Variable Initialization
    lv_playerGroup = gf_returnPlayerGroup(PlayerGroupAll(), true, true, false);

    // Implementation
    PlayerGroupRemove(lv_playerGroup, lp_player);
    auto632D26CD_g = lv_playerGroup;
    auto632D26CD_var = -1;
    while (true) {
        auto632D26CD_var = PlayerGroupNextPlayer(auto632D26CD_g, auto632D26CD_var);
        if (auto632D26CD_var < 0) { break; }
        if ((gv_player[auto632D26CD_var].lv_homeCountry == lp_country)) {
            return true;
        }

    }
    return false;
}

int gf_calculateELO (int lp_player, fixed lp_win, bool lp_quick) {
    // Variable Declarations
    int lv_totalELO;
    int lv_eLOGain;
    int lv_averageELO;
    int lv_k;
    int lv_i;
    fixed lv_expectedScore;
    int lv_eLODifference;
    int lv_currentELO;
    int lv_eLO;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    playergroup auto67C8EF25_g;
    int auto67C8EF25_var;

    // Variable Initialization
    lv_k = 30;
    lv_playerGroup = PlayerGroupEmpty();

    // Implementation
    if ((lp_quick == true)) {
        lv_currentELO = gv_player[lp_player].lv_currentELO;
        lv_playerGroup = PlayerGroupActive();
    }
    else {
        lv_currentELO = gv_player[lp_player].lv_currentELO1v1;
        lv_playerGroup = libNtve_gf_UnionOfPlayerGroups(GameAttributePlayersForTeam(1), GameAttributePlayersForTeam(2));
    }
    auto67C8EF25_g = lv_playerGroup;
    auto67C8EF25_var = -1;
    while (true) {
        auto67C8EF25_var = PlayerGroupNextPlayer(auto67C8EF25_g, auto67C8EF25_var);
        if (auto67C8EF25_var < 0) { break; }
        if ((lp_player != auto67C8EF25_var)) {
            if ((lp_quick == true)) {
                lv_totalELO = (lv_totalELO + gv_player[auto67C8EF25_var].lv_currentELO);
            }
            else {
                lv_totalELO = (lv_totalELO + gv_player[auto67C8EF25_var].lv_currentELO1v1);
            }
            lv_i = (lv_i + 1);
        }

    }
    lv_averageELO = RoundI((lv_totalELO / lv_i));
    lv_eLODifference = (lv_averageELO - lv_currentELO);
    lv_expectedScore = (1.0 / (1.0 + Pow(10.0, ((lv_averageELO - lv_currentELO) / 400.0))));
    lv_eLOGain = RoundI((IntToFixed(lv_k) * (lp_win - lv_expectedScore)));
    if ((lp_quick == true) && (lp_win == 0.0)) {
        lv_eLOGain = (lv_eLOGain / PlayerGroupCount(gf_returnPlayerGroup(PlayerGroupActive(), true, false, false)));
    }

    lv_eLO = (lv_currentELO + lv_eLOGain);
    return lv_eLO;
}

void gf_AddUnitEntersUnitRegionEvent (trigger lp_trigger, region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventUnitRegion (lp_trigger, null, lp_region, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Game
//--------------------------------------------------------------------------------------------------
bool gt_SetupGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SetupID, false, false);
    TriggerExecute(gt_SetupBank, false, false);
    TriggerExecute(gt_SetupUnits, false, false);
    TriggerExecute(gt_SetupCountries, false, true);
    TriggerExecute(gt_SetupBases, false, true);
    TriggerExecute(gt_SetupUI, true, true);
    TriggerExecute(gt_SetupPlayer, true, true);
    if ((GameAttributeGameValue("1") != "0003")) {
        gf_ChatMessage(1, (StringToText("<c val=\"CCCC33\">Annoucement</c> - Risk Legacy Discord for feedback and more") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
        gf_ChatMessage(1, (StringToText("<c val=\"CCCC33\">Annoucement</c> - http://discord.gg/zyWFBVT") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
        gf_ChatMessage(1, (StringExternal("Param/Value/04E4E0DC") + IntToText(PlayerGroupCount(gv_gameInfo.lv_playingPlayers))), 2);
    }

    TriggerExecute(gt_SetupScreenFade, true, true);
    TriggerExecute(gt_SetupGameMode, true, true);
    TriggerExecute(gt_GameInitialization, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupGame_Init () {
    gt_SetupGame = TriggerCreate("gt_SetupGame_Func");
    TriggerAddEventMapInit(gt_SetupGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup ID
//--------------------------------------------------------------------------------------------------
bool gt_SetupID_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-840619";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_Admin;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\donate\\UnitedNations.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "CrazyRusski";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "2-S2-1-3133830";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_Admin;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\donate\\UnitedNations.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "CrazyRusski";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-3055377";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_Admin;
    gv_bank.lv_iDFlagImage[lv_i] = "Risk\\Flag\\FaroeIslands.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "FaroeIslands";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "2-S2-1-232528";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_Admin;
    gv_bank.lv_iDFlagImage[lv_i] = "Risk\\Flag\\FaroeIslands.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "FaroeIslands";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-7563095";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\donate\\PsychoPyro.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "PsychoPyro";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-4635003";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\Flag\\Germany.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "Germany";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "2-S2-1-3964889";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\Flag\\joepasta.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "Joepasta";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-3135671";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_Admin;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\donate\\gadsden.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "Gadsden";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-1971994";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\donate\\RoyalFrench.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "Albania22";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-5501088";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\donate\\soviet flag.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "Sovietflag";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-1407364";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\donate\\pasta.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "Albania3";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-9783362";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\donate\\mars.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "Mars";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-8506406";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\donate\\lilpeep.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "lilpeep";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-20840500";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\Flag\\ConfederateFlag.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "Confederate";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-3338162";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\donate\\demonskull.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "Demonskull";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-3896133";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\donate\\soviet flag.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "Sovietflag";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-8625078";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\donate\\lllllllllll.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "lllllllllll";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-838925";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\donate\\Lewiddyion.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "Lewiddyion";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-552169";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\donate\\Slimrim.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "Slimrim";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-2504012";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl3;
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-3411995";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl1;
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-2480827";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl2;
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-2383405";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\Flag\\UnitedKingdom.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "UnitedKingdom";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-2252468";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl3;
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-3893874";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl1;
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-3732625";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\Donate\\Slimrim.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "Slimrim";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-1245555";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\Donate\\digitek.dds";
    gv_bank.lv_iDFlagTexture[lv_i] = "digitek";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-3687071";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl3;
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-4635007";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_Admin;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\donate\\Axis.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "Axis";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "2-S2-1-1416808";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl3;
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-4013216";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl2;
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-293981";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "Risk\\Donate\\Karjala.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "Karjala";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-344678";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "Risk\\Donate\\Lewiddyion.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "Lewiddyion";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-4185367";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\Donate\\Feature.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "Feature";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "2-S2-1-1182412";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl2;
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-3527912";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl3;
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-3247769";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl3;
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-1072636";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl3;
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-114649";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl2;
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-3978363";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "Risk\\Donate\\TombStone.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "TombStone";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-290944";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl1;
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-3348053";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl1;
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-1536358";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\donate\\UnitedNations.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "Optimal";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-3808079";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "Risk\\Donate\\Snow.dds";
    gv_bank.lv_iDFlagTexture[lv_i] = "Snow";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-465240";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl2;
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-529990";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl3;
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-3049049";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_DonatorLvl4;
    gv_bank.lv_iDFlagImage[lv_i] = "Risk\\Donate\\Wingcrafter.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "Wingcrafter";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-3719067";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_Admin;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\donate\\UnitedNations.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "CrazyRusski";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-3391721";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_Admin;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\donate\\UnitedNations.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "Wingcrafter";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-1951839";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_Admin;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\donate\\UnitedNations.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "CrazyRusski";
    lv_i = (lv_i + 1);
    gv_bank.lv_iDList[lv_i] = "1-S2-1-1547074";
    gv_bank.lv_iDStatus[lv_i] = ge_PlayerStatus_Admin;
    gv_bank.lv_iDFlagImage[lv_i] = "risk\\donate\\UnitedNations.tga";
    gv_bank.lv_iDFlagTexture[lv_i] = "CrazyRusski";
    gv_bank.lv_iDListMax = lv_i;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupID_Init () {
    gt_SetupID = TriggerCreate("gt_SetupID_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Bank
//--------------------------------------------------------------------------------------------------
bool gt_SetupBank_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto6896EF1B_g;
    int auto6896EF1B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_BankPreload();
    gf_BankOpen();
    auto6896EF1B_g = gf_returnPlayerGroup(PlayerGroupAll(), true, false, false);
    auto6896EF1B_var = -1;
    while (true) {
        auto6896EF1B_var = PlayerGroupNextPlayer(auto6896EF1B_g, auto6896EF1B_var);
        if (auto6896EF1B_var < 0) { break; }
        if ((PlayerType(auto6896EF1B_var) != c_playerTypeComputer)) {
            gf_BankLoad(auto6896EF1B_var);
            gf_BankIDList(auto6896EF1B_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupBank_Init () {
    gt_SetupBank = TriggerCreate("gt_SetupBank_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Units
//--------------------------------------------------------------------------------------------------
bool gt_SetupUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_type;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_type = 0;
    lv_i = 0;
    gv_gameInfo.lv_unitType[lv_i] = "Marine";
    gv_gameInfo.lv_unitType_Priorization[lv_type][lv_i] = "Marine";
    lv_i = (lv_i + 1);
    gv_gameInfo.lv_unitType[lv_i] = "ConscriptMarine";
    gv_gameInfo.lv_unitType_Priorization[lv_type][lv_i] = "ConscriptMarine";
    lv_i = (lv_i + 1);
    gv_gameInfo.lv_unitType[lv_i] = "Marauder";
    gv_gameInfo.lv_unitType_Priorization[lv_type][lv_i] = "Marauder";
    lv_i = (lv_i + 1);
    gv_gameInfo.lv_unitType[lv_i] = "Medic";
    gv_gameInfo.lv_unitType_Priorization[lv_type][lv_i] = "Medic";
    lv_i = (lv_i + 1);
    gv_gameInfo.lv_unitType[lv_i] = "SCV";
    gv_gameInfo.lv_unitType_Priorization[lv_type][lv_i] = "SCV";
    lv_i = (lv_i + 1);
    gv_gameInfo.lv_unitType[lv_i] = "Ghost";
    gv_gameInfo.lv_unitType_Priorization[lv_type][lv_i] = "Ghost";
    lv_i = (lv_i + 1);
    gv_gameInfo.lv_unitType[lv_i] = "Hellion";
    gv_gameInfo.lv_unitType_Priorization[lv_type][lv_i] = "Hellion";
    lv_i = (lv_i + 1);
    gv_gameInfo.lv_unitType[lv_i] = "Vulture";
    gv_gameInfo.lv_unitType_Priorization[lv_type][lv_i] = "Vulture";
    lv_i = (lv_i + 1);
    gv_gameInfo.lv_unitType[lv_i] = "Goliath";
    gv_gameInfo.lv_unitType_Priorization[lv_type][lv_i] = "Goliath";
    lv_i = (lv_i + 1);
    gv_gameInfo.lv_unitType[lv_i] = "SiegeTank";
    gv_gameInfo.lv_unitType_Priorization[lv_type][lv_i] = "SiegeTank";
    lv_i = (lv_i + 1);
    gv_gameInfo.lv_unitType[lv_i] = "ThorAP";
    gv_gameInfo.lv_unitType_Priorization[lv_type][lv_i] = "ThorAP";
    lv_i = (lv_i + 1);
    gv_gameInfo.lv_unitType[lv_i] = "VikingFighter";
    gv_gameInfo.lv_unitType_Priorization[lv_type][lv_i] = "VikingFighter";
    lv_i = (lv_i + 1);
    gv_gameInfo.lv_unitType[lv_i] = "Wraith";
    gv_gameInfo.lv_unitType_Priorization[lv_type][lv_i] = "Wraith";
    lv_i = (lv_i + 1);
    gv_gameInfo.lv_unitType[lv_i] = "Banshee";
    gv_gameInfo.lv_unitType_Priorization[lv_type][lv_i] = "Banshee";
    lv_i = (lv_i + 1);
    gv_gameInfo.lv_unitType[lv_i] = "Raven";
    gv_gameInfo.lv_unitType_Priorization[lv_type][lv_i] = "Raven";
    lv_i = (lv_i + 1);
    gv_gameInfo.lv_unitType[lv_i] = "Battlecruiser";
    gv_gameInfo.lv_unitType_Priorization[lv_type][lv_i] = "Battlecruiser";
    lv_i = (lv_i + 1);
    gv_gameInfo.lv_unitType[lv_i] = "Diamondback";
    gv_gameInfo.lv_unitType_Priorization[lv_type][lv_i] = "Diamondback";
    lv_i = (lv_i + 1);
    gv_gameInfo.lv_unitType[lv_i] = "Hercules";
    gv_gameInfo.lv_unitType_Priorization[lv_type][lv_i] = "Hercules";
    lv_i = (lv_i + 1);
    gv_gameInfo.lv_unitType[lv_i] = "ScienceVessel";
    gv_gameInfo.lv_unitType_Priorization[lv_type][lv_i] = "ScienceVessel";
    lv_i = (lv_i + 1);
    gv_gameInfo.lv_unitType[lv_i] = "Interceptor";
    gv_gameInfo.lv_unitType_Priorization[lv_type][lv_i] = "Interceptor";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupUnits_Init () {
    gt_SetupUnits = TriggerCreate("gt_SetupUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Countries
//--------------------------------------------------------------------------------------------------
bool gt_SetupCountries_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__23;
    int lv_iD;

    // Automatic Variable Declarations
    unitgroup auto7C5018F9_g;
    int auto7C5018F9_u;
    unit auto7C5018F9_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_country[0].lv_flagTexture = "Nothing";
    gv_country[0].lv_flagImage = "Assets\\Textures\\white32.dds";
    while ((gv_setUpCountries == false)) {
        gf_PredefineCountries(lv__23);
        gv_gameInfo.lv_maxCountries = (gv_gameInfo.lv_maxCountries + 1);
        auto7C5018F9_g = gv_country[lv__23].lv_bases;
        auto7C5018F9_u = UnitGroupCount(auto7C5018F9_g, c_unitCountAll);
        for (;; auto7C5018F9_u -= 1) {
            auto7C5018F9_var = UnitGroupUnitFromEnd(auto7C5018F9_g, auto7C5018F9_u);
            if (auto7C5018F9_var == null) { break; }
            gv_gameInfo.lv_maxBases = (gv_gameInfo.lv_maxBases + 1);
            lv_iD = (1 + lv_iD);
            UnitSetCustomValue(auto7C5018F9_var, 10, IntToFixed(lv__23));
            UnitSetCustomValue(auto7C5018F9_var, 11, IntToFixed(lv_iD));
            gv_base[lv_iD].lv_base = auto7C5018F9_var;
            UnitGroupAdd(gv_gameInfo.lv_allCountries, auto7C5018F9_var);
        }
        UnitSetCustomValue(gv_country[lv__23].lv_spawnStructure, 10, IntToFixed(lv__23));
        gv_country[lv__23].lv_income = UnitGroupCount(gv_country[lv__23].lv_bases, c_unitCountAlive);
        gv_country[lv__23].lv_spawnLimit = (UnitGroupCount(gv_country[lv__23].lv_bases, c_unitCountAlive) * 2);
        if ((UnitGroupCount(gv_country[lv__23].lv_bases, c_unitCountAlive) == 1)) {
            gv_country[lv__23].lv_spawnEachRound = 1;
        }
        else {
            gv_country[lv__23].lv_spawnEachRound = FixedToInt(((IntToFixed(UnitGroupCount(gv_country[lv__23].lv_bases, c_unitCountAlive)) / 2.0) * 1.5));
        }
        gv_country[lv__23].lv_name = gv_country[lv__23].lv_name;
        gv_country[lv__23].lv_spawnPoint = UnitGetPosition(gv_country[lv__23].lv_spawnStructure);
        if ((lv__23 != 0)) {
            TextTagCreate(StringToText((gv_country[lv__23].lv_name + (": " + IntToString(gv_country[lv__23].lv_income)))), 25, UnitGetPosition(gv_country[lv__23].lv_spawnStructure), 0.5, true, false, PlayerGroupAll());
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 100.00));
        }

        lv__23 = (1 + lv__23);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupCountries_Init () {
    gt_SetupCountries = TriggerCreate("gt_SetupCountries_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Bases
//--------------------------------------------------------------------------------------------------
bool gt_SetupBases_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__23;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__23 = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv__23 <= gv_gameInfo.lv_maxBases)) {
        gf_SetupBase(0, lv__23);
        lv__23 = (lv__23 + 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupBases_Init () {
    gt_SetupBases = TriggerCreate("gt_SetupBases_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup UI
//--------------------------------------------------------------------------------------------------
bool gt_SetupUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_eLOdiff;

    // Automatic Variable Declarations
    playergroup auto2571D136_g;
    int auto2571D136_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    VisEnable(c_visTypeMask, false);
    VisEnable(c_visTypeFog, false);
    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetSpeedLocked(true);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, false);
    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeInfoPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    auto2571D136_g = gf_returnPlayerGroup(PlayerGroupAll(), true, true, false);
    auto2571D136_var = -1;
    while (true) {
        auto2571D136_var = PlayerGroupNextPlayer(auto2571D136_g, auto2571D136_var);
        if (auto2571D136_var < 0) { break; }
        TechTreeUnitHelpDefault(auto2571D136_var, false);
        HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
        PlayerOptionOverride(auto2571D136_var, "simplecommandcard", "0");
        PlayerOptionOverride(auto2571D136_var, "commandhotkeytext", "1");
    }
    TriggerExecute(gt_SetupCustomChatUI, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupUI_Init () {
    gt_SetupUI = TriggerCreate("gt_SetupUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Player
//--------------------------------------------------------------------------------------------------
bool gt_SetupPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_eLOdiff;

    // Automatic Variable Declarations
    playergroup auto53E72382_g;
    int auto53E72382_var;
    playergroup autoDC554DCF_g;
    int autoDC554DCF_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto53E72382_g = PlayerGroupAll();
    auto53E72382_var = -1;
    while (true) {
        auto53E72382_var = PlayerGroupNextPlayer(auto53E72382_g, auto53E72382_var);
        if (auto53E72382_var < 0) { break; }
        PlayerModifyPropertyInt(auto53E72382_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, 1750);
        libNtve_gf_SetAlliance(auto53E72382_var, 0, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(0, auto53E72382_var, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAllianceOneWay(auto53E72382_var, 15, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAllianceOneWay(15, auto53E72382_var, libNtve_ge_AllianceSetting_Neutral);
    }
    libNtve_gf_SetPlayerGroupAlliance(gf_returnPlayerGroup(PlayerGroupAll(), true, true, false), libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_AddPlayerGroupToPlayerGroup(gf_returnPlayerGroup(PlayerGroupAll(), true, false, false), gv_gameInfo.lv_playingPlayers);
    autoDC554DCF_g = PlayerGroupActive();
    autoDC554DCF_var = -1;
    while (true) {
        autoDC554DCF_var = PlayerGroupNextPlayer(autoDC554DCF_g, autoDC554DCF_var);
        if (autoDC554DCF_var < 0) { break; }
        if ((PlayerType(autoDC554DCF_var) == c_playerTypeComputer) && (PlayerType(autoDC554DCF_var) == c_playerTypeUser) && (GameAttributePlayerValue("1", autoDC554DCF_var) != "0002")) {
            PlayerGroupRemove(gv_gameInfo.lv_startingPlayers, autoDC554DCF_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupPlayer_Init () {
    gt_SetupPlayer = TriggerCreate("gt_SetupPlayer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Screen Fade
//--------------------------------------------------------------------------------------------------
bool gt_SetupScreenFade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialog = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(1000, 1000, c_anchorCenter, 0, 0, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 225, 150, c_anchorCenter, 0, 0, StringToText(""), "Risk\\Risk_Loading.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    lv_dialog = DialogControlLastCreated();
    DialogControlFadeTransparency(lv_dialog, PlayerGroupAll(), 5.0, 100.0);
    if ((gv_gameInfo.lv_newbInGame == true)) {
        gf_UpdateNewPlayers();
    }

    Wait(6.0, c_timeReal);
    DialogDestroy(DialogControlGetDialog(lv_dialog));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupScreenFade_Init () {
    gt_SetupScreenFade = TriggerCreate("gt_SetupScreenFade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Game Mode
//--------------------------------------------------------------------------------------------------
bool gt_SetupGameMode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoEB3B1A21_g;
    int autoEB3B1A21_u;
    unit autoEB3B1A21_var;
    string autoE6F992E1_val;
    playergroup auto1591E78E_g;
    int auto1591E78E_var;

    // Variable Initialization
    lv_i = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameAttributeGameValue("1") != "0003")) {
        autoEB3B1A21_g = UnitGroup("MissileTurret", 0, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoEB3B1A21_u = UnitGroupCount(autoEB3B1A21_g, c_unitCountAll);
        for (;; autoEB3B1A21_u -= 1) {
            autoEB3B1A21_var = UnitGroupUnitFromEnd(autoEB3B1A21_g, autoEB3B1A21_u);
            if (autoEB3B1A21_var == null) { break; }
            UnitRemove(autoEB3B1A21_var);
        }
    }

    autoE6F992E1_val = GameAttributeGameValue("1");
    if (autoE6F992E1_val == "0001") {
        gv_gameInfo.lv_mode = ge_Mode_Quick;
        TriggerExecute(gt_SetupVictoryPercentageDisplay, true, false);
    }
    else if (autoE6F992E1_val == "0007") {
        gv_gameSettings.lv_territorialDistribution = ge_TerritorialDistribution_Random1v1;
        while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
            libNtve_gf_SetPlayerGroupAlliance(GameAttributePlayersForTeam(lv_i), libNtve_ge_AllianceSetting_AllyWithSharedVision);
            lv_i = (lv_i + 1);
        }
        gv_gameInfo.lv_mode = ge_Mode__1v1;
    }
    else if (autoE6F992E1_val == "0006") {
        gv_gameInfo.lv_mode = ge_Mode_Empire;
        gv_gameSettings.lv_territorialDistribution = ge_TerritorialDistribution_RandomRegion;
    }
    else if (autoE6F992E1_val == "0002") {
        gf_SetCustomSettings();
    }
    else if (autoE6F992E1_val == "0003") {
        TriggerExecute(gt_TutorialMode, true, false);
        gv_gameInfo.lv_mode = ge_Mode_Tutorial;
    }
    else if (autoE6F992E1_val == "0004") {
        auto1591E78E_g = PlayerGroupAll();
        auto1591E78E_var = -1;
        while (true) {
            auto1591E78E_var = PlayerGroupNextPlayer(auto1591E78E_g, auto1591E78E_var);
            if (auto1591E78E_var < 0) { break; }
            PlayerSetAlliance(auto1591E78E_var, c_allianceIdSpend, 1, true);
            PlayerSetAlliance(auto1591E78E_var, c_allianceIdControl, 1, true);
        }
        gv_gameInfo.lv_mode = ge_Mode_Solo;
    }
    else if (autoE6F992E1_val == "0005") {
        gv_gameInfo.lv_mode = ge_Mode_Team;
        while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
            libNtve_gf_SetPlayerGroupAlliance(GameAttributePlayersForTeam(lv_i), libNtve_ge_AllianceSetting_AllyWithSharedVision);
            lv_i = (lv_i + 1);
        }
    }
    else {
    }
    Wait(1.0, c_timeGame);
    if ((GameAttributeGameValue("1") != "0003")) {
        gf_ApplySetting();
    }

    if (((GameAttributeGameValue("1") == "0005") || (GameAttributeGameValue("1") == "0007"))) {
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, true);
        UISetResourceTradingAllowed(c_resourceTypeTerrazine, false);
        UISetResourceTradingAllowed(c_resourceTypeCustom, false);
    }

    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupGameMode_Init () {
    gt_SetupGameMode = TriggerCreate("gt_SetupGameMode_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Initialization
//--------------------------------------------------------------------------------------------------
bool gt_GameInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup auto016F5A24_g;
    int auto016F5A24_var;
    playergroup auto9B701A94_g;
    int auto9B701A94_var;
    playergroup auto1C2D8CAF_g;
    int auto1C2D8CAF_var;
    playergroup auto863ACB2E_g;
    int auto863ACB2E_var;
    playergroup auto2C78A9F9_g;
    int auto2C78A9F9_var;

    // Variable Initialization
    lv_i = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
        if ((gv_profile.lv_achieveDonateValue[lv_i] == 1)) {
            gf_ShowHideAllFlag(lv_i, true);
            DialogControlSetVisible(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lv_i]][gv_scoreboard.lv_flag], PlayerGroupAll(), true);
            DialogControlSetPosition(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lv_i]][gv_scoreboard.lv_username], PlayerGroupAll(), c_anchorTopLeft, 53, DialogControlGetOffsetY(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[lv_i]][gv_scoreboard.lv_username], 1));
            gf_RefreshAllFlag(lv_i, 68);
        }

        if ((GameAttributePlayerValue("1", lv_i) != "0002") && (gv_player[lv_i].lv_hackerDetect == false) && (gv_gameInfo.lv_ranked == ge_Ranked_Enabled)) {
            gv_player[lv_i].lv_loses = (gv_player[lv_i].lv_loses + 1);
            gv_player[lv_i].lv_currentELObackup = gv_player[lv_i].lv_currentELO;
            gv_player[lv_i].lv_winningELO = gf_calculateELO(lv_i, 1.0, true);
            gv_player[lv_i].lv_currentELO = gf_calculateELO(lv_i, 0.0, true);
            gf_BankSave(lv_i, false);
        }
        else {
            if ((gv_player[lv_i].lv_hackerDetect == true)) {
                gf_BankHackerDetected(lv_i);
            }

        }
        if ((gv_player[lv_i].lv_iDStatus == ge_PlayerStatus_Banned)) {
            GameOver(lv_i, c_gameOverDefeat, false, true);
        }

        lv_i = (lv_i + 1);
    }
    if ((gv_gameInfo.lv_ranked1v1 == ge_Ranked_Enabled)) {
        auto016F5A24_g = libNtve_gf_UnionOfPlayerGroups(GameAttributePlayersForTeam(1), GameAttributePlayersForTeam(2));
        auto016F5A24_var = -1;
        while (true) {
            auto016F5A24_var = PlayerGroupNextPlayer(auto016F5A24_g, auto016F5A24_var);
            if (auto016F5A24_var < 0) { break; }
            TextExpressionSetToken("Param/Expression/6B812729", "A", PlayerName(auto016F5A24_var));
            TextExpressionSetToken("Param/Expression/6B812729", "B", IntToText(gv_player[auto016F5A24_var].lv_currentELO1v1));
            gf_ChatMessage(1, TextExpressionAssemble("Param/Expression/6B812729"), 2);
            gv_player[auto016F5A24_var].lv_currentELObackup1v1 = gv_player[auto016F5A24_var].lv_currentELO1v1;
            gv_player[auto016F5A24_var].lv_winningELO1v1 = gf_calculateELO(auto016F5A24_var, 1.0, false);
            gv_player[auto016F5A24_var].lv_currentELO1v1 = gf_calculateELO(auto016F5A24_var, 0.0, false);
            gf_BankSave(auto016F5A24_var, false);
        }
    }

    if (((gv_gameInfo.lv_mode == ge_Mode_Empire) || (gv_gameInfo.lv_mode == ge_Mode_Solo))) {
        auto9B701A94_g = gf_returnPlayerGroup(PlayerGroupAll(), true, true, false);
        auto9B701A94_var = -1;
        while (true) {
            auto9B701A94_var = PlayerGroupNextPlayer(auto9B701A94_g, auto9B701A94_var);
            if (auto9B701A94_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto9B701A94_var, "UnknownUpgrade", 1);
        }
    }

    auto1C2D8CAF_g = gv_gameInfo.lv_playingPlayers;
    auto1C2D8CAF_var = -1;
    while (true) {
        auto1C2D8CAF_var = PlayerGroupNextPlayer(auto1C2D8CAF_g, auto1C2D8CAF_var);
        if (auto1C2D8CAF_var < 0) { break; }
        CameraPan(auto1C2D8CAF_var, Point(58.5, 190.5), 0.0, -1, 10.0, false);
        gv_player[auto1C2D8CAF_var].lv_bases = UnitGroupCount(UnitGroup(null, auto1C2D8CAF_var, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    auto863ACB2E_g = gv_gameInfo.lv_playingPlayers;
    auto863ACB2E_var = -1;
    while (true) {
        auto863ACB2E_var = PlayerGroupNextPlayer(auto863ACB2E_g, auto863ACB2E_var);
        if (auto863ACB2E_var < 0) { break; }
        gv_player[auto863ACB2E_var].lv_tempKilled = gv_player[auto863ACB2E_var].lv_killed;
        gv_player[auto863ACB2E_var].lv_tempLost = gv_player[auto863ACB2E_var].lv_lost;
    }
    gv_player[0].lv_bases = UnitGroupCount(UnitGroup(null, 0, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    TriggerExecute(gt_SetupCurrencyBar, true, true);
    gv_gameInfo.lv_gameStarted = true;
    TriggerExecute(gt_SetupScoreboard, true, true);
    if ((gv_gameInfo.lv_mode == ge_Mode_Team)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/D32533F7"));
    }

    gf_InfoCreate();
    gf_SkinsCreate();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, true);
    DialogControlSetEnabled(gv_infoPanel.lv_mainMenuButtons[1], PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_infoPanel.lv_mainMenuButtons[2], PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_infoPanel.lv_mainMenuButtons[3], PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_infoPanel.lv_mainMenuButtons[4], PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_infoPanel.lv_mainMenuButtons[9], PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_infoPanel.lv_mainMenuButtons[10], PlayerGroupAll(), true);
    DialogControlSetVisible(gv_infoPanel.lv_mainMenuButtons[10], PlayerGroupAll(), false);
    lv_i = (lv_i + 1);
    if ((gv_gameInfo.lv_card == ge_Cards_Enabled)) {
        DialogControlSetEnabled(gv_infoPanel.lv_mainMenuButtons[5], PlayerGroupAll(), true);
    }

    if (((gv_customSetting.lv_column_TerritorialDistribution == 2) || (gv_customSetting.lv_column_TerritorialDistribution == 3))) {
    }

    gf_AnonymizeAllUnit();
    Wait(2.0, c_timeGame);
    auto2C78A9F9_g = gf_returnPlayerGroup(PlayerGroupAll(), true, false, false);
    auto2C78A9F9_var = -1;
    while (true) {
        auto2C78A9F9_var = PlayerGroupNextPlayer(auto2C78A9F9_g, auto2C78A9F9_var);
        if (auto2C78A9F9_var < 0) { break; }
        PlayerScoreValueSetFromInt(auto2C78A9F9_var, "UnitsTrainedCount", 0);
        if ((GameAttributeGameValue("1") != "0003")) {
            gf_MissionStatement(auto2C78A9F9_var);
        }

    }
    gf_InfoPanelUpdateStatsAchievements(0);
    DialogControlSetVisible(gv_profile.lv_mainDI[2], PlayerGroupAll(), false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 100.0, true);
    SoundPlayForPlayer(SoundLink("AC_UI_Countdown_5MxNone", -1), c_maxPlayers, PlayerGroupAll(), 250.0, 0.0);
    Wait(4.5, c_timeGame);
    TimerStart(gv_gameInfo.lv_timer, 1.0, true, c_timeReal);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 100.0, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 100.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameInitialization_Init () {
    gt_GameInitialization = TriggerCreate("gt_GameInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Scoreboard
//--------------------------------------------------------------------------------------------------
bool gt_SetupScoreboard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_storeLength;
    int lv_row;
    int lv_pickRandomPlayer;
    int[14] lv_playerIndex;
    int lv_ii;
    playergroup lv_scrambled_Players;
    playergroup lv_cB_PlayerGroup;
    int lv_cB_StoreLength;
    int lv_cB_CalculateImageSize;

    // Automatic Variable Declarations
    playergroup auto8F0407A7_g;
    int auto8F0407A7_var;
    playergroup autoD34ADC48_g;
    int autoD34ADC48_var;

    // Variable Initialization
    lv_storeLength = 30;
    lv_ii = 1;
    lv_scrambled_Players = PlayerGroupEmpty();
    lv_cB_PlayerGroup = PlayerGroupActive();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(490, 388, c_anchorTopRight, 0, 80, true);
    gv_scoreboard.lv_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 18, lv_storeLength, StringToText("Players"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
    if ((gv_gameInfo.lv_alliance == ge_Alliance_EnabledFree)) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 180, lv_storeLength, StringToText("Ally"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
    }

    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 235, lv_storeLength, StringToText("Inc"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 290, lv_storeLength, StringExternal("Param/Value/3A493895"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
    gv_scoreboard.lv_kill = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 350, lv_storeLength, StringExternal("Param/Value/D7FC7C45"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
    gv_scoreboard.lv_death = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 410, lv_storeLength, StringToText("Status"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
    lv_storeLength = (30 + lv_storeLength);
    if ((gv_gameInfo.lv_anonymous == ge_Anonymous_Enabled)) {
        gf_RandomizePlayerColour();
        while (true) {
            lv_pickRandomPlayer = RandomInt(1, 12);
            if ((PlayerGroupHasPlayer(gf_returnPlayerGroup(PlayerGroupAll(), true, true, false), lv_pickRandomPlayer) == true) && (PlayerGroupHasPlayer(lv_scrambled_Players, lv_pickRandomPlayer) == false) && (lv_ii <= PlayerGroupCount(gf_returnPlayerGroup(PlayerGroupAll(), true, true, false)))) {
                lv_playerIndex[lv_ii] = lv_pickRandomPlayer;
                PlayerGroupAdd(lv_scrambled_Players, lv_pickRandomPlayer);
                lv_ii = (lv_ii + 1);
            }

            if ((lv_ii > PlayerGroupCount(gf_returnPlayerGroup(PlayerGroupAll(), true, true, false)))) {
                break;
            }

        }
        lv_ii = 1;
        while ((PlayerGroupHasPlayer(gf_returnPlayerGroup(PlayerGroupAll(), true, true, false), lv_playerIndex[lv_ii]) == true)) {
            lv_row = (1 + lv_row);
            gf_RefreshPlayerStatus(lv_playerIndex[lv_ii], ge_Status_Active);
            gv_scoreboard.lv_getRowIDViaPlayer[lv_playerIndex[lv_ii]] = lv_row;
            gv_scoreboard.lv_getPlayerIDviaRow[lv_row] = lv_playerIndex[lv_ii];
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 15, c_anchorTopLeft, 20, (lv_storeLength + 3), StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
            gv_scoreboard.lv_items[lv_row][gv_scoreboard.lv_flag] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 18, lv_storeLength, gv_player[lv_playerIndex[lv_ii]].lv_nickname, gv_player[lv_playerIndex[lv_ii]].lv_currentColour, false, 2.0);
            gv_scoreboard.lv_items[lv_row][gv_scoreboard.lv_username] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
            if ((gv_gameInfo.lv_alliance == ge_Alliance_EnabledFree)) {
                libNtve_gf_CreateDialogItemCheckBox(gv_scoreboard.lv_dialog, 20, 20, c_anchorTopLeft, 183, (lv_storeLength - 1), StringToText(""), false);
                gv_scoreboard.lv_items[lv_row][gv_scoreboard.lv_alliance] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(lv_ii), PlayerGroupAll());
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
                DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupSingle(lv_playerIndex[lv_ii]), false);
                DialogControlSetVisible(gv_scoreboard.lv_items[lv_row][gv_scoreboard.lv_alliance], PlayerGroupSingle(lv_ii), false);
            }

            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 235, lv_storeLength, StringToText("4"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex[lv_ii], false)), false, 2.0);
            gv_scoreboard.lv_items[lv_row][gv_scoreboard.lv_income] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 290, lv_storeLength, StringToText("0"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex[lv_ii], false)), false, 2.0);
            gv_scoreboard.lv_items[lv_row][gv_scoreboard.lv_kills] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 350, lv_storeLength, StringToText("0"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex[lv_ii], false)), false, 2.0);
            gv_scoreboard.lv_items[lv_row][gv_scoreboard.lv_losses] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 20, c_anchorTopLeft, 422, lv_storeLength, StringToText("Active"), "Risk\\Active.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            gv_scoreboard.lv_items[lv_row][gv_scoreboard.lv_status] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
            lv_storeLength = (27 + lv_storeLength);
            lv_ii = (lv_ii + 1);
        }
    }
    else if ((gv_gameInfo.lv_anonymous == ge_Anonymous_Disabled)) {
        auto8F0407A7_g = gf_returnPlayerGroup(PlayerGroupAll(), true, true, false);
        auto8F0407A7_var = -1;
        while (true) {
            auto8F0407A7_var = PlayerGroupNextPlayer(auto8F0407A7_g, auto8F0407A7_var);
            if (auto8F0407A7_var < 0) { break; }
            gv_player[auto8F0407A7_var].lv_defaultColour = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto8F0407A7_var, false));
            gv_player[auto8F0407A7_var].lv_currentColour = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto8F0407A7_var, false));
            lv_row = (1 + lv_row);
            gf_RefreshPlayerStatus(auto8F0407A7_var, ge_Status_Active);
            gv_scoreboard.lv_getRowIDViaPlayer[auto8F0407A7_var] = lv_row;
            gv_scoreboard.lv_getPlayerIDviaRow[lv_row] = auto8F0407A7_var;
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 15, c_anchorTopLeft, 18, (lv_storeLength + 3), StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_scoreboard.lv_items[lv_row][gv_scoreboard.lv_flag] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight18", PlayerGroupAll());
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 18, lv_storeLength, gv_player[auto8F0407A7_var].lv_nickname, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto8F0407A7_var, false)), false, 2.0);
            gv_scoreboard.lv_items[lv_row][gv_scoreboard.lv_username] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
            if ((gv_gameInfo.lv_alliance == ge_Alliance_EnabledFree)) {
                libNtve_gf_CreateDialogItemCheckBox(gv_scoreboard.lv_dialog, 20, 20, c_anchorTopLeft, 183, (lv_storeLength - 1), StringToText(""), false);
                gv_scoreboard.lv_items[lv_row][gv_scoreboard.lv_alliance] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(auto8F0407A7_var), PlayerGroupAll());
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
                DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupSingle(auto8F0407A7_var), false);
                DialogControlSetVisible(gv_scoreboard.lv_items[lv_row][gv_scoreboard.lv_alliance], PlayerGroupSingle(auto8F0407A7_var), false);
            }

            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 235, lv_storeLength, StringToText("4"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto8F0407A7_var, false)), false, 2.0);
            gv_scoreboard.lv_items[lv_row][gv_scoreboard.lv_income] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 290, lv_storeLength, StringToText("0"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto8F0407A7_var, false)), false, 2.0);
            gv_scoreboard.lv_items[lv_row][gv_scoreboard.lv_kills] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 350, lv_storeLength, StringToText("0"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto8F0407A7_var, false)), false, 2.0);
            gv_scoreboard.lv_items[lv_row][gv_scoreboard.lv_losses] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 20, c_anchorTopLeft, 422, lv_storeLength, StringToText("Active"), "Risk\\Active.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            gv_scoreboard.lv_items[lv_row][gv_scoreboard.lv_status] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
            lv_storeLength = (27 + lv_storeLength);
            lv_ii = (lv_ii + 1);
        }
    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 475, 50, c_anchorTopLeft, 18, (lv_storeLength - 12), StringToText("__________________________________________________________________________________________________________________________________________________________________________________________________________________________________"), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoLight18", PlayerGroupAll());
    lv_row = (1 + lv_row);
    lv_storeLength = (10 + lv_storeLength);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 470, 50, c_anchorTopLeft, 18, (lv_storeLength - 0), StringToText("News: "), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
    gv_scoreboard.lv_items[lv_row][0] = DialogControlLastCreated();
    gv_scoreboard.lv_getNotificationRow = lv_row;
    lv_storeLength = (40 + lv_storeLength);
    DialogSetSize(DialogLastCreated(), 490, lv_storeLength);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), ((lv_storeLength + 5) - (13 / PlayerGroupCount(gf_returnPlayerGroup(PlayerGroupAll(), true, true, false)))), c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_camapaignmenu_dialogbox_base.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_scoreboard.lv_background = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 100, PlayerGroupAll());
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogCreate(490, 400, c_anchorTopRight, 0, 80, true);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 45, 40, c_anchorTopRight, -4, 2, StringToText("Minimize this scoreboard"), StringToText(""), "Assets\\Textures\\ui_button_unbindkey_normaloverpressedover_bnet.dds");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_unbindkey_normalpressed_bnet.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_scoreboard.lv_minimize = DialogControlLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    autoD34ADC48_g = gf_returnPlayerGroup(PlayerGroupAll(), true, true, false);
    autoD34ADC48_var = -1;
    while (true) {
        autoD34ADC48_var = PlayerGroupNextPlayer(autoD34ADC48_g, autoD34ADC48_var);
        if (autoD34ADC48_var < 0) { break; }
        gf_SetCurrentColour(autoD34ADC48_var, false);
        if ((gv_gameInfo.lv_anonymous == ge_Anonymous_Enabled)) {
            gf_ChangeNickName(autoD34ADC48_var, StringToText("Anonymous"));
        }
        else {
            gf_ChangeNickName(autoD34ADC48_var, PlayerName(autoD34ADC48_var));
        }
        libNtve_gf_SetDialogItemTooltip(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[autoD34ADC48_var]][gv_scoreboard.lv_username], (StringToText("Battle.net ID - ") + StringToText(PlayerHandle(autoD34ADC48_var))), PlayerGroupSingle(autoD34ADC48_var));
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupScoreboard_Init () {
    gt_SetupScoreboard = TriggerCreate("gt_SetupScoreboard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Victory Percentage Display
//--------------------------------------------------------------------------------------------------
bool gt_SetupVictoryPercentageDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_storeLength;
    int lv_row;
    int lv_pickRandomPlayer;
    int[14] lv_playerIndex;
    int lv_ii;
    playergroup lv_scrambled_Players;
    playergroup lv_cB_PlayerGroup;
    int lv_cB_StoreLength;
    int lv_cB_CalculateImageSize;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_storeLength = 30;
    lv_ii = 1;
    lv_scrambled_Players = PlayerGroupEmpty();
    lv_cB_PlayerGroup = PlayerGroupActive();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(300, 80, c_anchorTopLeft, 0, 0, true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 240, 80, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_camapaignmenu_dialogbox_base.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_victoryPercentageDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, 18, lv_storeLength, StringToText(("Victory Percentage: " + "70" + "%")), libNtve_gf_ConvertPlayerColorToColor(0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RobotoMedium 18", PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupVictoryPercentageDisplay_Init () {
    gt_SetupVictoryPercentageDisplay = TriggerCreate("gt_SetupVictoryPercentageDisplay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Custom Chat UI
//--------------------------------------------------------------------------------------------------
bool gt_SetupCustomChatUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup autoA4802E08_g;
    int autoA4802E08_var;

    // Variable Initialization
    lv_i = 1;

    // Actions
    if (!runActions) {
        return true;
    }

        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\angel_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " 0:)";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\angry_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " >:(";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\bandit_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :bandit";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\beer_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :beer";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\drink_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :drink";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\dancing_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :dance";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\bigsmile_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :D";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\blushing_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :$";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\bow_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :bow";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\brokenheart_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " </3";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\bug_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :bug";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\cake_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :cake";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\call_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :call";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\cash_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :cash";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\clapping_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :clap";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\coffee_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :coffee";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\cool_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " B)";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\crying_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :'(";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\devil_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " }:D";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\doh_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " >:o";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\drunk_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " %)";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\dull_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " -.-";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\emo_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :emo";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\envy_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :envy";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\evilgrin_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " >:D";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\facepalm_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :facepalm";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\finger_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :finger";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\fingerscrossed_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :fingerscrossed";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\flower_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :flower";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\giggle_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :giggle";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\handshake_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :handshake";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\happy_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :)";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\heart_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " <3";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\highfive_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :high5";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\hug_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :teddy";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\inlove_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :inlove";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\itwasntme_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :wasntme";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\kiss_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :*";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\lalala_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :ignore";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\lipssealed_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :X";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\mail_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :mail";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\makeup_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :makeup";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\mmm_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :mmm";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\mooning_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :moon";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\movie_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :movie";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\muscle_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :muscle";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\music_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :music";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\ninja_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :ninja";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\no_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :no";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\party_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :party";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\phone_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :phone";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\pizza_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :pizza";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\poolparty_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :pool";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\puking_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :@";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\rain_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :rain";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\rock_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :rock";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\sadsmile_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :(";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\sleepy_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :zzz";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\smirk_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :smirk";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\smoking_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :smoke";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\speechless_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :|";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\star_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :star";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\surprised_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :O";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\swear_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :swear";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\sweating_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :sweat";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\tmi_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :tmi";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\tongueout_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :P";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\tumbleweed_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :tumble";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\waiting_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :waiting";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\wait_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :wait";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\whew_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :whew";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\wink_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " ;)";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\wondering_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :wonder";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\worried_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :S";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\wtf_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " >:O";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\yawning_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :yawn";
        lv_i = (lv_i + 1);
        gv_chat.lv_emoticonIcon[lv_i] = " <img path=\"Risk\\Chat\\yes_80.dds\" width=\"25\" height=\"25\"/>";
        gv_chat.lv_emoticonText[lv_i] = " :yes";
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    autoA4802E08_g = gf_returnPlayerGroup(PlayerGroupAll(), true, false, false);
    autoA4802E08_var = -1;
    while (true) {
        autoA4802E08_var = PlayerGroupNextPlayer(autoA4802E08_g, autoA4802E08_var);
        if (autoA4802E08_var < 0) { break; }
        gv_chat.lv_dialog[autoA4802E08_var] = DialogLastCreated();
        gv_player[autoA4802E08_var].lv_nickname = PlayerName(autoA4802E08_var);
        gv_player[autoA4802E08_var].lv_currentColour = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoA4802E08_var, false));
    }
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 30, 45, c_anchorBottomRight, 105, 280, StringToText("Toggle Ally Chat"), StringToText("E"), "");
    gv_chat.lv_chatToggle = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupCustomChatUI_Init () {
    gt_SetupCustomChatUI = TriggerCreate("gt_SetupCustomChatUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup CurrencyBar
//--------------------------------------------------------------------------------------------------
bool gt_SetupCurrencyBar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_cB_PlayerGroup;

    // Automatic Variable Declarations
    playergroup auto063EC244_g;
    int auto063EC244_var;
    playergroup autoE89D7BFA_g;
    int autoE89D7BFA_var;

    // Variable Initialization
    lv_cB_PlayerGroup = PlayerGroupActive();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_player[0].lv_defaultColour = Color(32.55, 32.55, 32.55);
    gv_player[0].lv_currentColour = Color(32.55, 32.55, 32.55);
    PlayerGroupAdd(lv_cB_PlayerGroup, 0);
    auto063EC244_g = lv_cB_PlayerGroup;
    auto063EC244_var = -1;
    while (true) {
        auto063EC244_var = PlayerGroupNextPlayer(auto063EC244_g, auto063EC244_var);
        if (auto063EC244_var < 0) { break; }
        gv_player[auto063EC244_var].lv_defaultColour = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto063EC244_var, false));
        gv_player[auto063EC244_var].lv_currentColour = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto063EC244_var, false));
        DialogCreate(500, gv_currencyBar.lv_height, c_anchorTopRight, 50, 45, true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 500, gv_currencyBar.lv_height, c_anchorCenter, 0, 0, StringToText(""), gv_currencyBar.lv_image, c_triggerImageTypeNormal, true, Color(31.76, 31.76, 15.69), c_triggerBlendModeNormal);
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto063EC244_var), true);
        gv_currencyBar.lv_dialog[auto063EC244_var] = DialogLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1, gv_currencyBar.lv_height, c_anchorLeft, 0, 0, StringToText(""), gv_currencyBar.lv_image, c_triggerImageTypeNormal, true, Color(56.08, 56.08, 27.84), c_triggerBlendModeNormal);
        gv_currencyBar.lv_items[auto063EC244_var] = DialogControlLastCreated();
    }
    autoE89D7BFA_g = gf_returnPlayerGroup(PlayerGroupAll(), true, true, false);
    autoE89D7BFA_var = -1;
    while (true) {
        autoE89D7BFA_var = PlayerGroupNextPlayer(autoE89D7BFA_g, autoE89D7BFA_var);
        if (autoE89D7BFA_var < 0) { break; }
        if ((gv_gameInfo.lv_anonymous == ge_Anonymous_Enabled)) {
            gf_RandomizePlayerColour();
            gf_ChangeNickName(autoE89D7BFA_var, StringToText("Anonymous"));
        }
        else {
            gf_ChangeNickName(autoE89D7BFA_var, PlayerName(autoE89D7BFA_var));
        }
        gf_SetCurrentColour(autoE89D7BFA_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupCurrencyBar_Init () {
    gt_SetupCurrencyBar = TriggerCreate("gt_SetupCurrencyBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TutorialMode
//--------------------------------------------------------------------------------------------------
bool gt_TutorialMode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAllianceOneWay(1, 15, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceOneWay(15, 1, libNtve_ge_AllianceSetting_Neutral);
    VisEnable(c_visTypeMask, true);
    VisExploreArea(1, RegionEntireMap(), true, false);
    gv_gameInfo.lv_victoryConditionType = ge_WinConditions_Disabled;
    gv_gameInfo.lv_victoryConditionPercentage = 110;
    gv_gameInfo.lv_incomePeriod = 45;
    gv_gameInfo.lv_card = ge_Cards_Enabled;
    gv_gameInfo.lv_anonymous = ge_Anonymous_Disabled;
    DialogControlSetEnabled(gv_infoPanel.lv_mainMenuButtons[0], PlayerGroupAll(), true);
    Wait(0.0, c_timeGame);
    gf_ChatMessage(1, (StringToText("<c val=\"CCCC33\">Tutorial</c> - Welcome to Risk Legacy's tutorial guide!") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    gf_ChatMessage(1, (StringToText("Follow the Instructions on the Objetive Panel on the Top Right Corner.") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    VisExploreArea(1, RegionFromId(4), true, false);
    CameraSetBounds(PlayerGroupAll(), RegionFromId(4), true);
    RegionPlayableMapSet(RegionFromId(4));
    gf_SetupBaseOwnership(1, FixedToInt(UnitGetCustomValue(UnitFromId(131), 11)));
    ObjectiveCreate(StringToText("Produce 4 Marines"), StringToText(""), c_objectiveStateActive, true);
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(131)), "HaloStart");
    while (!((UnitGroupCount(UnitGroup("Marine", 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 5))) {
        Wait(1.0, c_timeGame);
    }
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(131)), "HaloStop");
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(130)), "HaloStart");
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(130)), 2.0, Color(100.00, 0.00, 0.00));
    gf_SetupBaseOwnership(2, FixedToInt(UnitGetCustomValue(UnitFromId(130), 11)));
    gf_ChatMessage(1, (StringToText("<c val=\"CCCC33\">Tutorial</c> - For every 3 enemy unit's you kill, 1 currency is given to you.") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateCompleted);
    ObjectiveCreate(StringToText("Conquer Lithuania"), StringToText(""), c_objectiveStateActive, true);
    while (!((UnitGetOwner(UnitFromId(130)) == 1))) {
        Wait(1.0, c_timeGame);
    }
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(130)), "HaloStop");
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(126)), "HaloStart");
    gf_SetupCountryOwnership(2, FixedToInt(UnitGetCustomValue(UnitFromId(126), 10)));
    gf_ChatMessage(1, (StringToText("<c val=\"CCCC33\">Tutorial</c> - Controlling a country allows you to use spawns") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    gf_ChatMessage(1, (StringToText("that appear until you reach the limit.") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateCompleted);
    ObjectiveCreate(StringToText("Conquer Kalingrad"), StringToText(""), c_objectiveStateActive, true);
    while (!((gv_country[FixedToInt(UnitGetCustomValue(UnitFromId(126), 10))].lv_owner == 1))) {
        Wait(1.0, c_timeGame);
    }
    gf_ChatMessage(1, (StringToText("<c val=\"CCCC33\">Tutorial</c> - For every enemy base you conquer, you gain 1 card.") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    gf_ChatMessage(1, (StringToText("3 Cards equate to 5 Currency when you press the Card Button.") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    gf_ChatMessage(1, (StringToText("It glows yellow when it can be used.") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(126)), "HaloStop");
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateCompleted);
    ObjectiveCreate(StringToText("Use the Card Button"), StringToText(""), c_objectiveStateActive, true);
    while (!((PlayerGetPropertyInt(1, c_playerPropVespene) == 0))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateCompleted);
    VisExploreArea(1, RegionFromId(2), true, false);
    CameraSetBounds(PlayerGroupAll(), RegionFromId(2), true);
    RegionPlayableMapSet(RegionFromId(2));
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(312368496)), "HaloStart");
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(129)), "HaloStart");
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(128)), "HaloStart");
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(127)), "HaloStart");
    gf_SetupCountryOwnership(2, FixedToInt(UnitGetCustomValue(UnitFromId(129), 10)));
    gf_SetupCountryOwnership(2, FixedToInt(UnitGetCustomValue(UnitFromId(128), 10)));
    ObjectiveCreate(StringToText("Conquer Latvia and Estonia"), StringToText(""), c_objectiveStateActive, true);
    gf_ChatMessage(1, (StringToText("<c val=\"CCCC33\">Tutorial</c> - Each unit has their own counters which can be viewed on their") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    gf_ChatMessage(1, (StringToText("tooltip.") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    gf_ChatMessage(1, (StringToText("Examples: Hellions beat Marines. Marauders beat Tanks and Hellions.") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    UnitCreate(5, "Marine", 0, 2, PointWithOffset(UnitGetPosition(UnitFromId(129)), 0.0, -2.3), 225.0);
    UnitCreate(5, "Marine", 0, 2, PointWithOffset(UnitGetPosition(UnitFromId(312368496)), 0.0, -2.3), 225.0);
    UnitCreate(5, "Marine", 0, 2, PointWithOffset(UnitGetPosition(UnitFromId(128)), 0.0, -2.3), 225.0);
    UnitCreate(1, "Hellion", 0, 2, PointWithOffset(UnitGetPosition(UnitFromId(128)), 0.0, -2.0), 225.0);
    UnitCreate(2, "Medic", 0, 2, PointWithOffset(UnitGetPosition(UnitFromId(128)), 0.0, -1.8), 225.0);
    while (!((gv_country[FixedToInt(UnitGetCustomValue(UnitFromId(129), 10))].lv_owner == 1) && (gv_country[FixedToInt(UnitGetCustomValue(UnitFromId(128), 10))].lv_owner == 1))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateCompleted);
    VisExploreArea(1, RegionFromId(3), true, false);
    CameraSetBounds(PlayerGroupAll(), RegionFromId(3), true);
    RegionPlayableMapSet(RegionFromId(3));
    ObjectiveCreate(StringToText("Produce 1 Hercules"), StringToText(""), c_objectiveStateActive, true);
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(127)), "HaloStart");
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(127)), 2.0, Color(100.00, 0.00, 0.00));
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(126)), "HaloStart");
    while (!((UnitGroupCount(UnitGroup("Hercules", 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1))) {
        Wait(1.0, c_timeGame);
    }
    gf_ChatMessage(1, (StringToText("<c val=\"CCCC33\">Tutorial</c> - You can load your troops in the Hercules to travel through the sea.") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    gf_ChatMessage(1, (StringToText("You can only load and unload troops in the areas near the Starports.") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(167)), 2.0, Color(100.00, 0.00, 0.00));
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateCompleted);
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(127)), "HaloStop");
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(126)), "HaloStop");
    ObjectiveCreate(StringToText("Conquer Southern Sweden"), StringToText(""), c_objectiveStateActive, true);
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(167)), "HaloStart");
    gf_SetupBaseOwnership(2, FixedToInt(UnitGetCustomValue(UnitFromId(167), 11)));
    UnitCreate(5, "Marine", 0, 2, PointWithOffset(UnitGetPosition(UnitFromId(167)), 0.0, -2.3), 225.0);
    while (!((UnitGetOwner(UnitFromId(167)) == 1))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateCompleted);
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(167)), "HaloStop");
    VisExploreArea(1, RegionFromId(7), true, false);
    CameraSetBounds(PlayerGroupAll(), RegionFromId(7), true);
    RegionPlayableMapSet(RegionFromId(7));
    ObjectiveCreate(StringToText("Conquer the rest of Sweden"), StringToText(""), c_objectiveStateActive, true);
    gf_SetupBaseOwnership(2, FixedToInt(UnitGetCustomValue(UnitFromId(1810338160), 11)));
    gf_SetupBaseOwnership(2, FixedToInt(UnitGetCustomValue(UnitFromId(165), 11)));
    gf_SetupBaseOwnership(2, FixedToInt(UnitGetCustomValue(UnitFromId(164), 11)));
    gf_SetupBaseOwnership(2, FixedToInt(UnitGetCustomValue(UnitFromId(163), 11)));
    UnitCreate(10, "Marine", 0, 2, PointWithOffset(UnitGetPosition(UnitFromId(165)), -1.8, -2.3), 225.0);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(2285)), 2.0, Color(100.00, 0.00, 0.00));
    while (!((gv_country[FixedToInt(UnitGetCustomValue(UnitFromId(163), 10))].lv_owner == 1))) {
        Wait(1.0, c_timeGame);
    }
    RegionPlayableMapSet(RegionFromId(8));
    VisExploreArea(1, RegionFromId(8), true, false);
    CameraSetBounds(PlayerGroupAll(), RegionFromId(8), true);
    gf_ChatMessage(1, (StringToText("<c val=\"CCCC33\">Tutorial</c> - Use choke points (forest lines) to your advantage.") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    gf_ChatMessage(1, (StringToText("Lure the enemy's army into the choke point to minimize his damage output.") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    gf_ChatMessage(1, (StringToText("Another tip is to target enemy Tanks with a small group of Marauders") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    gf_ChatMessage(1, (StringToText(" if you have a chance to.") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateCompleted);
    ObjectiveCreate(StringToText("Conquer Finland"), StringToText(""), c_objectiveStateActive, true);
    UnitCreate(10, "Marine", 0, 2, PointWithOffset(UnitGetPosition(UnitFromId(161)), -1.8, -2.3), 225.0);
    UnitCreate(3, "Medic", 0, 2, PointWithOffset(UnitGetPosition(UnitFromId(161)), -1.8, -1.8), 225.0);
    UnitCreate(2, "Marauder", 0, 2, PointWithOffset(UnitGetPosition(UnitFromId(161)), -1.8, -2.7), 225.0);
    UnitCreate(1, "SiegeTank", 0, 2, PointWithOffset(UnitGetPosition(UnitFromId(161)), -1.3, -2.3), 225.0);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(2284)), 2.0, Color(100.00, 0.00, 0.00));
    while (!((gv_country[FixedToInt(UnitGetCustomValue(UnitFromId(161), 10))].lv_owner == 1))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateCompleted);
    ObjectiveCreate(StringToText("Produce 3 Banshees"), StringToText(""), c_objectiveStateActive, true);
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(127)), "HaloStart");
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(18758739)), "HaloStart");
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(126)), "HaloStart");
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(167)), "HaloStart");
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(158)), "HaloStart");
    while (!((UnitGroupCount(UnitGroup("Banshee", 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 3))) {
        Wait(1.0, c_timeGame);
    }
    RegionPlayableMapSet(RegionFromId(6));
    VisExploreArea(1, RegionFromId(6), true, false);
    CameraSetBounds(PlayerGroupAll(), RegionFromId(6), true);
    UnitCreate(2, "Banshee", 0, 2, Point(112.0, 150.0), 225.0);
    gf_SetupCountryOwnership(2, FixedToInt(UnitGetCustomValue(UnitFromId(142), 10)));
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateCompleted);
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(127)), "HaloStop");
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(126)), "HaloStop");
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(167)), "HaloStop");
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(158)), "HaloStop");
    ObjectiveCreate(StringToText("Conquer Denmark"), StringToText(""), c_objectiveStateActive, true);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(2298)), 2.0, Color(100.00, 0.00, 0.00));
    while (!((gv_country[FixedToInt(UnitGetCustomValue(UnitFromId(142), 10))].lv_owner == 1))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateCompleted);
    ObjectiveCreate(StringToText("Change Denmark Barrack's Defender"), StringToText(""), c_objectiveStateActive, true);
    gf_ChatMessage(1, (StringToText("<c val=\"CCCC33\">Tutorial</c> - Each base has a Swap Defender ability.") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    gf_ChatMessage(1, (StringToText("Which can save very expensive units such as tanks") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    gf_ChatMessage(1, (StringToText("while defending your base or on the move.") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    while (!(true)) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateCompleted);
    gf_ChatMessage(1, (StringToText("<c val=\"CCCC33\">Tutorial</c> - You have finished the Tutorial!") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    gf_ChatMessage(1, (StringToText("You have learned the basics of Risk Legacy and") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    gf_ChatMessage(1, (StringToText("should be ready play against others!") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    gf_ChatMessage(1, (StringToText("For more strategies and tips, go to risk.udmod.com") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 2);
    gv_player[1].lv_playedTutorial = true;
    gf_BankSave(1, false);
    gf_InfoPanelUpdateStatsAchievements(0);
    TriggerStop(gt_Refresh);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialMode_Init () {
    gt_TutorialMode = TriggerCreate("gt_TutorialMode_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CheckSettings
//--------------------------------------------------------------------------------------------------
bool gt_CheckSettings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_setting;
    int lv_settingOption;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((gv_customSetting.lv_string_Header[lv_setting] != "")) {
        while ((gv_customSetting.lv_string_Value[lv_setting][lv_settingOption] != "")) {
            if ((gv_customSetting.lv_dialog_Item_CheckBox[lv_setting][lv_settingOption] == EventDialogControl())) {
                gf_UpdateUI(EventPlayer(), lv_setting, lv_settingOption);
                return true;
            }

            lv_settingOption = (lv_settingOption + 1);
        }
        lv_settingOption = 0;
        lv_setting = (lv_setting + 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckSettings_Init () {
    gt_CheckSettings = TriggerCreate("gt_CheckSettings_Func");
    TriggerAddEventDialogControl(gt_CheckSettings, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check No Defender
//--------------------------------------------------------------------------------------------------
bool gt_CheckNoDefender_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_circle;
    int lv_circlePlayer;
    int lv_baseValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_circle = libNtve_gf_ClosestUnitToPoint(UnitGetPosition(EventUnit()), UnitGroup("Beacon_TerranSmall", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 0.5), UnitFilter(0, 0, 0, 0), 0));
    lv_baseValue = FixedToInt(UnitGetCustomValue(lv_circle, 11));
    if ((UnitGetType(gv_base[lv_baseValue].lv_defender) == null)) {
        lv_circlePlayer = UnitGetOwner(lv_circle);
        gv_player[UnitGetOwner(EventUnit())].lv_bases = (gv_player[UnitGetOwner(EventUnit())].lv_bases + 1);
        gv_player[UnitGetOwner(lv_circle)].lv_bases = (gv_player[UnitGetOwner(lv_circle)].lv_bases - 1);
        gf_DefenderSettings(EventUnit(), lv_circle, true);
        gf_CountryConquestSequence(UnitGetOwner(EventUnit()), lv_circlePlayer, gf_getCustomUnitValue(lv_circle, 10));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckNoDefender_Init () {
    gt_CheckNoDefender = TriggerCreate("gt_CheckNoDefender_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Dialog Used
//--------------------------------------------------------------------------------------------------
bool gt_GameDialogUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameInfo.lv_gameStarted == true)) {
        gf_Scoreboard_Listener(EventPlayer(), EventDialogControl());
        gf_OverlayListener(EventDialogControl(), EventPlayer());
        gf_ProfileListener(EventDialogControl(), EventPlayer());
        gf_SettingsListener(EventDialogControl(), EventPlayer());
        gf_LogListener(EventDialogControl(), EventPlayer());
        gf_AchievementListener2(EventDialogControl(), EventPlayer());
        gf_TeamBoard_Listener(EventDialogControl(), EventPlayer());
    }

    gf_OtherListener(EventDialogControl(), EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameDialogUsed_Init () {
    gt_GameDialogUsed = TriggerCreate("gt_GameDialogUsed_Func");
    TriggerAddEventDialogControl(gt_GameDialogUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
    TriggerAddEventDialogControl(gt_GameDialogUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_GameDialogUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key Used
//--------------------------------------------------------------------------------------------------
bool gt_KeyUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_key;
    int lv_key2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((((gv_player[EventPlayer()].lv_cardKey == 999) && (gv_player[EventPlayer()].lv_configCard == true)) || ((gv_player[EventPlayer()].lv_cardKey == (EventKeyPressed())))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_player[EventPlayer()].lv_cardKey == 999) && (gv_player[EventPlayer()].lv_configCard == true)) {
        gv_player[EventPlayer()].lv_cardKey = (EventKeyPressed());
        gf_ChatMessage(EventPlayer(), (StringToText("<c val=\"CCCC33\">Private</c> - Your card key has been set") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 1);
        gf_BankSave(EventPlayer(), false);
    }
    else {
        if ((gv_player[EventPlayer()].lv_cardKey == (EventKeyPressed())) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) >= 3)) {
            SoundPlayForPlayer(SoundLink("UI_ActionButtonSelect", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            libNtve_gf_SetDialogItemUnit(DialogControlLastCreated(), null, PlayerGroupAll());
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSubtract, 3);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 5);
            gf_UserConfigKeys(lv_key);
            if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) >= 3)) {
                libNtve_gf_SetDialogItemImage(gv_infoPanel.lv_mainMenuButtons[5], "risk\\Flag\\tgacardyellownormalpressed1.tga", PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemImage2(gv_infoPanel.lv_mainMenuButtons[5], "risk\\Flag\\tgacardyellowhoverpressed1.tga", PlayerGroupSingle(EventPlayer()));
            }
            else {
                libNtve_gf_SetDialogItemImage(gv_infoPanel.lv_mainMenuButtons[5], "risk\\Flag\\tgacardnormalpressed1.tga", PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemImage2(gv_infoPanel.lv_mainMenuButtons[5], "risk\\Flag\\tgacardhoverpressed1.tga", PlayerGroupSingle(EventPlayer()));
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KeyUsed_Init () {
    gt_KeyUsed = TriggerCreate("gt_KeyUsed_Func");
    TriggerAddEventKeyPressed(gt_KeyUsed, c_playerAny, c_keyNone, true, c_keyModifierStateIgnore, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Menu
//--------------------------------------------------------------------------------------------------
bool gt_Menu_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Menu_Init () {
    gt_Menu = TriggerCreate("gt_Menu_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Profile
//--------------------------------------------------------------------------------------------------
bool gt_Profile_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Profile_Init () {
    gt_Profile = TriggerCreate("gt_Profile_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Log
//--------------------------------------------------------------------------------------------------
bool gt_Log_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Log_Init () {
    gt_Log = TriggerCreate("gt_Log_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cards
//--------------------------------------------------------------------------------------------------
bool gt_Cards_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Cards_Init () {
    gt_Cards = TriggerCreate("gt_Cards_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chat
//--------------------------------------------------------------------------------------------------
bool gt_Chat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    text lv_newMessage;
    text lv_updatedTotal;
    string lv_untitledVariable001;
    int lv_i2;

    // Automatic Variable Declarations
    playergroup auto2640240C_g;
    int auto2640240C_var;
    string auto44D32698_val;
    string auto447FC06F_val;
    playergroup auto538C28B6_g;
    int auto538C28B6_var;
    string auto2A69D796_val;
    playergroup autoDFAF922E_g;
    int autoDFAF922E_var;

    // Variable Initialization
    lv_i = 1;
    lv_i2 = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringSub(EventChatMessage(false), 1, 1) == "-") && (StringSub(EventChatMessage(false), 1, 2) != "-.")) {
        if (((gv_player[EventPlayer()].lv_iDStatus == ge_PlayerStatus_Admin))) {
            auto44D32698_val = StringWord(EventChatMessage(false), 1);
            if (auto44D32698_val == "-setwin") {
                while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                    if ((lv_i == StringToInt(StringWord(EventChatMessage(false), 2)))) {
                        gv_player[lv_i].lv_win = StringToInt(StringWord(EventChatMessage(false), 3));
                        gf_BankSave(lv_i, false);
                        gf_InfoPanelUpdateStatsAchievements(0);
                        gf_SkinsUpdateStats();
                        break;
                    }

                    lv_i = (lv_i + 1);
                }
            }
            else if (auto44D32698_val == "-setlose") {
                while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                    if ((lv_i == StringToInt(StringWord(EventChatMessage(false), 2)))) {
                        gv_player[lv_i].lv_loses = StringToInt(StringWord(EventChatMessage(false), 3));
                        gf_BankSave(lv_i, false);
                        gf_InfoPanelUpdateStatsAchievements(0);
                        gf_SkinsUpdateStats();
                        break;
                    }

                    lv_i = (lv_i + 1);
                }
            }
            else if (auto44D32698_val == "-setkill") {
                while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                    if ((lv_i == StringToInt(StringWord(EventChatMessage(false), 2)))) {
                        gv_player[lv_i].lv_kills = StringToInt(StringWord(EventChatMessage(false), 3));
                        gf_BankSave(lv_i, false);
                        gf_InfoPanelUpdateStatsAchievements(0);
                        gf_SkinsUpdateStats();
                        break;
                    }

                    lv_i = (lv_i + 1);
                }
            }
            else if (auto44D32698_val == "-setdeath") {
                while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                    if ((lv_i == StringToInt(StringWord(EventChatMessage(false), 2)))) {
                        gv_player[lv_i].lv_deaths = StringToInt(StringWord(EventChatMessage(false), 3));
                        gf_BankSave(lv_i, false);
                        gf_InfoPanelUpdateStatsAchievements(0);
                        gf_SkinsUpdateStats();
                        break;
                    }

                    lv_i = (lv_i + 1);
                }
            }
            else if (auto44D32698_val == "-setkilled") {
                while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                    if ((lv_i == StringToInt(StringWord(EventChatMessage(false), 2)))) {
                        gv_player[lv_i].lv_killed = StringToInt(StringWord(EventChatMessage(false), 3));
                        gv_player[lv_i].lv_tempKilled = StringToInt(StringWord(EventChatMessage(false), 3));
                        gf_BankSave(lv_i, false);
                        gf_InfoPanelUpdateStatsAchievements(0);
                        gf_SkinsUpdateStats();
                        break;
                    }

                    lv_i = (lv_i + 1);
                }
            }
            else if (auto44D32698_val == "-setlost") {
                while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                    if ((lv_i == StringToInt(StringWord(EventChatMessage(false), 2)))) {
                        gv_player[lv_i].lv_lost = StringToInt(StringWord(EventChatMessage(false), 3));
                        gv_player[lv_i].lv_tempLost = StringToInt(StringWord(EventChatMessage(false), 3));
                        gf_BankSave(lv_i, false);
                        gf_InfoPanelUpdateStatsAchievements(0);
                        gf_SkinsUpdateStats();
                        break;
                    }

                    lv_i = (lv_i + 1);
                }
            }
            else {
            }
        }

    }
    else {
        auto2640240C_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
        auto2640240C_var = -1;
        while (true) {
            auto2640240C_var = PlayerGroupNextPlayer(auto2640240C_g, auto2640240C_var);
            if (auto2640240C_var < 0) { break; }
            gf_ChatManagement(auto2640240C_var, EventPlayer(), EventChatMessage(false));
        }
    }
    if ((StringSub(EventChatMessage(false), 1, 1) == "-") && (StringSub(EventChatMessage(false), 1, 2) != "-.")) {
        auto447FC06F_val = StringWord(EventChatMessage(false), 1);
        if (auto447FC06F_val == "-resetkey") {
            while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                if (true) {
                    gv_player[EventPlayer()].lv_cardKey = 999;
                    gv_player[EventPlayer()].lv_configCard = true;
                    gf_ChatMessage(EventPlayer(), (StringToText("<c val=\"CCCC33\">Private</c> - Press the desired key to be your card hotkey.") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 1);
                    gf_BankSave(EventPlayer(), false);
                    break;
                }

                lv_i = (lv_i + 1);
            }
        }
        else {
        }
    }
    else {
        auto538C28B6_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
        auto538C28B6_var = -1;
        while (true) {
            auto538C28B6_var = PlayerGroupNextPlayer(auto538C28B6_g, auto538C28B6_var);
            if (auto538C28B6_var < 0) { break; }
        }
    }
    if ((StringSub(EventChatMessage(false), 1, 1) == "g") && (gv_gameInfo.lv_mode == ge_Mode__1v1) && (gv_typedGG == false)) {
        auto2A69D796_val = StringWord(EventChatMessage(false), 1);
        if (auto2A69D796_val == "gg") {
            gv_typedGG = true;
            gf_ChatMessage(1, (StringToText("<c val=\"CCCC33\">Announcement</c> - ") + PlayerName(EventPlayer()) + StringExternal("Param/Value/02763EBA") + StringToText("") + StringToText("")), 2);
            gf_ResetMap();
            while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
                if (true) {
                    break;
                }

                lv_i = (lv_i + 1);
            }
        }
        else {
        }
    }
    else {
        autoDFAF922E_g = gf_returnPlayerGroup(PlayerGroupActive(), true, false, false);
        autoDFAF922E_var = -1;
        while (true) {
            autoDFAF922E_var = PlayerGroupNextPlayer(autoDFAF922E_g, autoDFAF922E_var);
            if (autoDFAF922E_var < 0) { break; }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Chat_Init () {
    gt_Chat = TriggerCreate("gt_Chat_Func");
    TriggerAddEventChatMessage(gt_Chat, c_playerAny, "", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refresh
//--------------------------------------------------------------------------------------------------
bool gt_Refresh_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_uGDeath;
    int lv_i;

    // Automatic Variable Declarations
    playergroup auto4367273A_g;
    int auto4367273A_var;
    playergroup autoBAC736F4_g;
    int autoBAC736F4_var;

    // Variable Initialization
    lv_i = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameInfo.lv_currentTime = (gv_gameInfo.lv_currentTime - 1);
    if ((gv_gameInfo.lv_currentTime < 1)) {
        lv_uGDeath = UnitGroupCount(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
        if ((lv_uGDeath >= 1000)) {
            gv_gameInfo.lv_deathAnimation = false;
        }
        else {
            gv_gameInfo.lv_deathAnimation = true;
        }
        gv_gameInfo.lv_turns = (gv_gameInfo.lv_turns + 1);
        gv_gameInfo.lv_currentTime = gv_gameInfo.lv_incomePeriod;
        if ((gv_gameInfo.lv_turns == 1)) {
            gv_typedGG = false;
        }

        auto4367273A_g = PlayerGroupActive();
        auto4367273A_var = -1;
        while (true) {
            auto4367273A_var = PlayerGroupNextPlayer(auto4367273A_g, auto4367273A_var);
            if (auto4367273A_var < 0) { break; }
            PlayerModifyPropertyInt(auto4367273A_var, c_playerPropCustom, c_playerPropOperSetTo, gv_gameInfo.lv_turns);
        }
        gf_RefreshIncome();
        if ((gv_gameInfo.lv_mode == ge_Mode_Solo)) {
            gf_CreateTeamDialog();
        }

        gf_RefreshKilledandLost();
        gf_RefreshAddIncome();
        gf_RefreshConscriptManager();
        gv_teamMajority = false;
        while ((lv_i <= gv_gameInfo.lv_maxPlayers)) {
            if ((PlayerStatus(lv_i) != c_playerStatusUnused)) {
                gv_player[lv_i].lv_bases = (TechTreeUnitCount(lv_i, "Barracks", c_techCountCompleteOnly) + TechTreeUnitCount(lv_i, "Starport", c_techCountCompleteOnly));
                gf_RefreshNotification(lv_i);
            }

            lv_i = (lv_i + 1);
        }
        lv_i = 1;
        gf_RefreshWinCondition();
        gf_InfoPanelCheckMinimapHistory();
        if ((gv_gameInfo.lv_visibility == ge_Visibility_FogofWar)) {
            gf_RefreshShowBases();
        }

        gf_RefreshSortScoreboard();
    }
    else if ((gv_gameInfo.lv_currentTime < 4)) {
        SoundPlay(SoundLink("UI_BnetCountdown", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    autoBAC736F4_g = PlayerGroupAll();
    autoBAC736F4_var = -1;
    while (true) {
        autoBAC736F4_var = PlayerGroupNextPlayer(autoBAC736F4_g, autoBAC736F4_var);
        if (autoBAC736F4_var < 0) { break; }
        PlayerModifyPropertyInt(autoBAC736F4_var, c_playerPropTerrazine, c_playerPropOperSetTo, gv_gameInfo.lv_currentTime);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Refresh_Init () {
    gt_Refresh = TriggerCreate("gt_Refresh_Func");
    TriggerAddEventTimer(gt_Refresh, gv_gameInfo.lv_timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refresh CurrencyBar
//--------------------------------------------------------------------------------------------------
bool gt_RefreshCurrencyBar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ii;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) != 0)) {
        if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) > gv_currencyBar.lv_limit)) {
            gf_ChatMessage(EventPlayer(), (StringToText("<c val=\"CCCC33\">Private</c> - You hit your currency cap!") + StringToText("") + StringToText("") + StringToText("") + StringToText("")), 1);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, gv_currencyBar.lv_limit);
        }

        DialogControlSetVisible(gv_currencyBar.lv_items[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
        lv_ii = ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) * gv_currencyBar.lv_length) / gv_currencyBar.lv_limit);
        DialogControlSetSize(gv_currencyBar.lv_items[EventPlayer()], PlayerGroupSingle(EventPlayer()), lv_ii, gv_currencyBar.lv_height);
        libNtve_gf_SetDialogItemTooltip(gv_currencyBar.lv_items[EventPlayer()], StringToText((IntToString(PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals)) + " / 750")), PlayerGroupSingle(EventPlayer()));
    }
    else {
        DialogControlSetVisible(gv_currencyBar.lv_items[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefreshCurrencyBar_Init () {
    gt_RefreshCurrencyBar = TriggerCreate("gt_RefreshCurrencyBar_Func");
    TriggerAddEventPlayerPropChange(gt_RefreshCurrencyBar, 1, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_RefreshCurrencyBar, 2, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_RefreshCurrencyBar, 3, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_RefreshCurrencyBar, 4, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_RefreshCurrencyBar, 5, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_RefreshCurrencyBar, 6, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_RefreshCurrencyBar, 7, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_RefreshCurrencyBar, 8, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_RefreshCurrencyBar, 9, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_RefreshCurrencyBar, 10, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_RefreshCurrencyBar, 11, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_RefreshCurrencyBar, 12, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    playergroup lv_pG;

    // Automatic Variable Declarations
    playergroup autoF2382E5E_g;
    int autoF2382E5E_var;
    playergroup auto18888A77_g;
    int auto18888A77_var;

    // Variable Initialization
    lv_i = 1;
    lv_pG = gv_gameInfo.lv_startingPlayers;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ChatMessage(EventPlayer(), (StringToText("<c val=\"CCCC33\">Game</c> - ") + TextWithColor(gv_player[EventPlayer()].lv_nickname, gv_player[EventPlayer()].lv_currentColour) + StringToText(" has left the game!")), 2);
    if ((TriggerIsEnabled(gt_Refresh) == true)) {
        gf_RefreshPlayerStatus(EventPlayer(), ge_Status_Left);
    }

    gf_RefreshScoreboard(EventPlayer(), ge_ScoreboardColumn_Status, StringToText(""));
    PlayerGroupRemove(gv_gameInfo.lv_playingPlayers, EventPlayer());
    if ((gv_gameInfo.lv_gameOver == true) && (PlayerGroupCount(gf_returnPlayerGroup(PlayerGroupActive(), true, false, true)) <= 1)) {
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_gameInfo.lv_winParty, lv_pG);
        autoF2382E5E_g = gv_gameInfo.lv_winParty;
        autoF2382E5E_var = -1;
        while (true) {
            autoF2382E5E_var = PlayerGroupNextPlayer(autoF2382E5E_g, autoF2382E5E_var);
            if (autoF2382E5E_var < 0) { break; }
            GameOver(autoF2382E5E_var, c_gameOverVictory, true, true);
        }
        auto18888A77_g = lv_pG;
        auto18888A77_var = -1;
        while (true) {
            auto18888A77_var = PlayerGroupNextPlayer(auto18888A77_g, auto18888A77_var);
            if (auto18888A77_var < 0) { break; }
            GameOver(auto18888A77_var, c_gameOverDefeat, true, true);
        }
    }

    while (((gv_scoreboard.lv_getRowIDViaPlayer[EventPlayer()] < PlayerGroupCount(PlayerGroupAll())) && (PlayerStatus(gv_scoreboard.lv_getPlayerIDviaRow[(gv_scoreboard.lv_getRowIDViaPlayer[EventPlayer()] + 1)]) == c_playerStatusActive))) {
        gf_RefreshSwapScoreboardRows(EventPlayer(), gv_scoreboard.lv_getPlayerIDviaRow[(gv_scoreboard.lv_getRowIDViaPlayer[EventPlayer()] + 1)]);
        gf_RefreshUpdateSwappedRows(EventPlayer());
        gf_RefreshUpdateSwappedRows(gv_scoreboard.lv_getPlayerIDviaRow[(gv_scoreboard.lv_getRowIDViaPlayer[EventPlayer()] - 1)]);
    }
    gf_RefreshScoreBoardColour();
    gf_SetCurrentColour(EventPlayer(), true);
    gf_RefreshUpdateSwappedRows(EventPlayer());
    libNtve_gf_SetDialogItemText(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[EventPlayer()]][gv_scoreboard.lv_income], StringExternal("Param/Value/25BE88A7"), PlayerGroupAll());
    gf_RefreshChangeScoreBoardRowColor(EventPlayer(), Color(50.20, 50.20, 50.20));
    if ((gv_gameInfo.lv_ranked1v1 == ge_Ranked_Enabled) && (PlayerGroupCount(gf_returnPlayerGroup(libNtve_gf_UnionOfPlayerGroups(GameAttributePlayersForTeam(1), GameAttributePlayersForTeam(2)), true, false, false)) == 1)) {
        gf_VictoryPercentage(0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeaves_Init () {
    gt_PlayerLeaves = TriggerCreate("gt_PlayerLeaves_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeaves, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: unit cap
//--------------------------------------------------------------------------------------------------
bool gt_unitcap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitControlGroupAddUnits(1, 1, UnitLastCreatedGroup());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_unitcap_Init () {
    gt_unitcap = TriggerCreate("gt_unitcap_Func");
    TriggerAddEventCommandError(gt_unitcap, c_playerAny, c_cmdNotEnoughFood, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitTransport
//--------------------------------------------------------------------------------------------------
bool gt_UnitUnload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5CE9C512_g;
    int auto5CE9C512_u;
    unit auto5CE9C512_var;
    unitgroup auto199486C9_g;
    int auto199486C9_u;
    unit auto199486C9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnitCargo(), UnitGetPosition(EventUnit()), false);
    auto5CE9C512_g = UnitGroup(null, EventPlayer(), RegionCircle(UnitGetPosition(EventUnit()), 3.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5CE9C512_u = UnitGroupCount(auto5CE9C512_g, c_unitCountAll);
    for (;; auto5CE9C512_u -= 1) {
        auto5CE9C512_var = UnitGroupUnitFromEnd(auto5CE9C512_g, auto5CE9C512_u);
        if (auto5CE9C512_var == null) { break; }
        if (((WorldHeight(c_heightMapGround, UnitGetPosition(EventUnitCargo())) < 7.6) || (PointPathingPassable(UnitGetPosition(EventUnitCargo())) == false) || (PathingType(UnitGetPosition(EventUnitCargo())) == c_pathingUnpathable))) {
            UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("HerculesTransport", 0), EventUnitCargo()), c_orderQueueReplace);
        }

    }
    auto199486C9_g = UnitLastCreatedGroup();
    auto199486C9_u = UnitGroupCount(auto199486C9_g, c_unitCountAll);
    for (;; auto199486C9_u -= 1) {
        auto199486C9_var = UnitGroupUnitFromEnd(auto199486C9_g, auto199486C9_u);
        if (auto199486C9_var == null) { break; }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitUnload_Init () {
    gt_UnitUnload = TriggerCreate("gt_UnitUnload_Func");
    TriggerAddEventUnitCargo(gt_UnitUnload, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Dies
//--------------------------------------------------------------------------------------------------
bool gt_UnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_damagingUnit;
    unit lv_triggeringUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damagingUnit = EventUnitDamageSourceUnit();
    lv_triggeringUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameInfo.lv_deathAnimation == false)) {
        libNtve_gf_RemoveDeathModelsinRegion(RegionEntireMap());
    }

    if ((UnitGetType(lv_triggeringUnit) != "UnbuildableRocksDestructible")) {
        if ((gv_gameInfo.lv_ranked == ge_Ranked_Enabled)) {
            gv_player[UnitGetOwner(EventUnitDamageSourceUnit())].lv_kills = (gv_player[EventUnitDamageSourcePlayer()].lv_kills + 1);
            gv_player[EventPlayer()].lv_deaths = (gv_player[EventPlayer()].lv_deaths + 1);
        }

        gf_RefreshScoreboard(UnitGetOwner(EventUnit()), ge_ScoreboardColumn_Death, StringToText(""));
        gf_RefreshScoreboard(UnitGetOwner(EventUnitDamageSourceUnit()), ge_ScoreboardColumn_Kills, StringToText(""));
        gf_BountyAddition(EventUnit(), UnitGetPosition(EventUnit()), EventPlayer(), EventUnitDamageSourcePlayer());
        gf_BaseConquestSequence(lv_damagingUnit, lv_triggeringUnit);
        gf_RefreshScoreboard(EventPlayer(), ge_ScoreboardColumn_Status, StringToText(""));
    }
    else {
        gf_RespawnTree(UnitGetPosition(EventUnit()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitDies_Init () {
    gt_UnitDies = TriggerCreate("gt_UnitDies_Func");
    TriggerAddEventUnitDamaged(gt_UnitDies, null, c_unitDamageTypeAny, c_unitDamageFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Dies 2
//--------------------------------------------------------------------------------------------------
bool gt_UnitDies2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_damagingUnit;
    unit lv_triggeringUnit;

    // Automatic Variable Declarations
    unitgroup autoB0EE81DA_g;
    int autoB0EE81DA_u;
    unit autoB0EE81DA_var;

    // Variable Initialization
    lv_damagingUnit = libNtve_gf_KillingUnit();
    lv_triggeringUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_triggeringUnit) == "Hercules")) {
        if (((UnitGetType(lv_triggeringUnit) == "Hercules") && (!(((PointPathingPassable(UnitGetPosition(EventUnit())) == false) || (PathingType(UnitGetPosition(EventUnit())) == c_pathingUnpathable) || (WorldHeight(c_heightMapGround, UnitGetPosition(EventUnit())) < 7.6)))))) {
            autoB0EE81DA_g = UnitCargoGroup(lv_triggeringUnit);
            autoB0EE81DA_u = UnitGroupCount(autoB0EE81DA_g, c_unitCountAll);
            for (;; autoB0EE81DA_u -= 1) {
                autoB0EE81DA_var = UnitGroupUnitFromEnd(autoB0EE81DA_g, autoB0EE81DA_u);
                if (autoB0EE81DA_var == null) { break; }
                UnitKill(autoB0EE81DA_var);
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitDies2_Init () {
    gt_UnitDies2 = TriggerCreate("gt_UnitDies2_Func");
    TriggerAddEventUnitDied(gt_UnitDies2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Train
//--------------------------------------------------------------------------------------------------
bool gt_UnitTrain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitCreatedUnit(), "Loadable", EventUnitCreatedUnit(), 1);
    gf_AnonymizeUnit(EventUnitCreatedUnit());
    gf_AchieveChangeUnit(UnitGetOwner(EventUnitCreatedUnit()), EventUnitCreatedUnit());
    if ((gv_gameInfo.lv_mode == ge_Mode__1v1)) {
        UnitGroupAdd(gv_gameInfo.lv_allArmy, EventUnitCreatedUnit());
    }

    if ((UnitRallyPointTargetPoint(EventUnit(), 1, 1) == null)) {
    }
    else {
        UnitIssueOrder(EventUnitCreatedUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitRallyPointTargetPoint(EventUnit(), 1, 1)), c_orderQueueReplace);
    }
    if ((UnitGetType(EventUnit()) == "SpawnZone")) {
        UnitGroupAdd(gv_country[FixedToInt(UnitGetCustomValue(EventUnit(), 10))].lv_spawnGroup, EventUnitCreatedUnit());
    }

    gv_player[UnitGetOwner(EventUnit())].lv_numberOfTrainedUnits = (gv_player[UnitGetOwner(EventUnit())].lv_numberOfTrainedUnits + 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitTrain_Init () {
    gt_UnitTrain = TriggerCreate("gt_UnitTrain_Func");
    TriggerAddEventUnitCreated(gt_UnitTrain, null, "BarracksTrain", null);
    TriggerAddEventUnitCreated(gt_UnitTrain, null, "StarportTrain", null);
    TriggerAddEventUnitCreated(gt_UnitTrain, null, "BarracksTrain2", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Property Changes
//--------------------------------------------------------------------------------------------------
bool gt_UnitPropertyChanges_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_health;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_health = UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(gv_selectedUnits[EventPlayer()], EventUnit()) == true)) {
        TextExpressionSetToken("Param/Expression/41629283", "A", FixedToText(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent), 0));
        TextExpressionSetToken("Param/Expression/41629283", "B", StringExternal("Param/Value/E54B2B31"));
        TextExpressionSetToken("Param/Expression/41629283", "C", FixedToText(UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent), 0));
        libNtve_gf_SetDialogItemText(gv_unitVitals[0][EventPlayer()], TextExpressionAssemble("Param/Expression/41629283"), PlayerGroupAll());
        TextExpressionSetToken("Param/Expression/9982FB08", "A", FixedToText(UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent), 0));
        TextExpressionSetToken("Param/Expression/9982FB08", "B", StringExternal("Param/Value/550E7516"));
        TextExpressionSetToken("Param/Expression/9982FB08", "C", FixedToText(UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyMax, c_unitPropCurrent), 0));
        libNtve_gf_SetDialogItemText(gv_unitVitals[1][EventPlayer()], TextExpressionAssemble("Param/Expression/9982FB08"), PlayerGroupAll());
        TextExpressionSetToken("Param/Expression/60DA16F3", "A", StringToText("Kills: "));
        TextExpressionSetToken("Param/Expression/60DA16F3", "B", FixedToText(UnitGetPropertyFixed(EventUnit(), c_unitPropKills, c_unitPropCurrent), 0));
        libNtve_gf_SetDialogItemText(gv_unitVitals[2][EventPlayer()], TextExpressionAssemble("Param/Expression/60DA16F3"), PlayerGroupAll());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitPropertyChanges_Init () {
    gt_UnitPropertyChanges = TriggerCreate("gt_UnitPropertyChanges_Func");
    TriggerAddEventUnitProperty(gt_UnitPropertyChanges, null, c_unitPropLife);
    TriggerAddEventUnitProperty(gt_UnitPropertyChanges, null, c_unitPropEnergy);
    TriggerAddEventUnitProperty(gt_UnitPropertyChanges, null, c_unitPropKills);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Selected
//--------------------------------------------------------------------------------------------------
bool gt_UnitSelected_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    string[15] lv_unitAttributes;
    string[15] lv_unitAttributesText;
    string lv_unitAttributesCompilation;
    int lv_tempInt;
    int lv_damageAmountAndBonus;
    int lv_damageRandom;
    int lv_damageAmount;
    int lv_damageBonus;
    int lv_increment;
    text lv_tooltipText;
    int lv_offset;
    string lv_weaponvariable;
    fixed lv_health;
    string[6] lv_weapons;
    string lv_temp;
    string lv_temp2;

    // Automatic Variable Declarations
    unitgroup auto8E6521D1_g;
    int auto8E6521D1_u;
    unit auto8E6521D1_var;
    int autoFD3257C7_ae;
    int autoFD3257C7_var;
    const int auto977BC6FF_ae = 12;
    const int auto977BC6FF_ai = 1;
    string auto550A3BBC_val;
    int autoAC3B5C61_val;
    const int auto3C3D1C66_ae = 12;
    int auto3C3D1C66_var;
    int auto23FEB853_val;

    // Variable Initialization
    for (init_i = 0; init_i <= 14; init_i += 1) {
        lv_unitAttributes[init_i] = "";
    }
    for (init_i = 0; init_i <= 14; init_i += 1) {
        lv_unitAttributesText[init_i] = "";
    }
    lv_unitAttributesCompilation = "";
    lv_weaponvariable = UnitWeaponGet(EventUnit(), 1);
    lv_health = UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent);
    lv_temp = "";
    lv_temp2 = "";

    // Actions
    if (!runActions) {
        return true;
    }

    auto8E6521D1_g = gv_selectedUnits[EventPlayer()];
    auto8E6521D1_u = UnitGroupCount(auto8E6521D1_g, c_unitCountAll);
    for (;; auto8E6521D1_u -= 1) {
        auto8E6521D1_var = UnitGroupUnitFromEnd(auto8E6521D1_g, auto8E6521D1_u);
        if (auto8E6521D1_var == null) { break; }
        UnitGroupRemove(gv_selectedUnits[EventPlayer()], auto8E6521D1_var);
    }
    UnitGroupAdd(gv_selectedUnits[EventPlayer()], EventUnit());
    if ((DialogControlIsVisible(gv_infoPanel.lv_mainMenuButtons[10], EventPlayer()) == true)) {
        DialogDestroy(gv_selectedUnitDialog[EventPlayer()]);
        DialogCreate(400, 185, c_anchorBottomRight, 0, 118, true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 400, 185, c_anchorBottom, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glues_dialogbox_base.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(8.63, 61.57, 87.06), PlayerGroupAll());
        gv_selectedUnitDialog[EventPlayer()] = DialogLastCreated();
        DialogSetImageVisible(gv_selectedUnitDialog[EventPlayer()], false);
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorCenter, 0, -63, UnitGetName(EventUnit()), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BoardWarAppraiseMid", PlayerGroupAll());
        TextExpressionSetToken("Param/Expression/EDEA809F", "A", StringToText("Kills: "));
        TextExpressionSetToken("Param/Expression/EDEA809F", "B", FixedToText(UnitGetPropertyFixed(EventUnit(), c_unitPropKills, c_unitPropCurrent), c_fixedPrecisionAny));
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, 0, -23, TextExpressionAssemble("Param/Expression/EDEA809F"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "UnitAttributesText", PlayerGroupAll());
        gv_unitVitals[2][EventPlayer()] = DialogControlLastCreated();
        TextExpressionSetToken("Param/Expression/304F90F4", "A", FixedToText(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/304F90F4", "B", StringExternal("Param/Value/A84D65B4"));
        TextExpressionSetToken("Param/Expression/304F90F4", "C", FixedToText(UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropNormal), c_fixedPrecisionAny));
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, -50, -3, TextExpressionAssemble("Param/Expression/304F90F4"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "UnitLife", PlayerGroupAll());
        gv_unitVitals[0][EventPlayer()] = DialogControlLastCreated();
        TextExpressionSetToken("Param/Expression/0714E90A", "A", FixedToText(UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent), 0));
        TextExpressionSetToken("Param/Expression/0714E90A", "B", StringExternal("Param/Value/DE98C82A"));
        TextExpressionSetToken("Param/Expression/0714E90A", "C", FixedToText(UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyMax, c_unitPropNormal), 0));
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, 50, -3, TextExpressionAssemble("Param/Expression/0714E90A"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemAlphaMask(DialogControlLastCreated(), "Assets\\Textures\\aciddeath2purple2.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "UnitEnergy", PlayerGroupAll());
        gv_unitVitals[1][EventPlayer()] = DialogControlLastCreated();
        lv_tempInt = UnitWeaponCount(EventUnit());
        lv_tempInt = (lv_tempInt + 1);
        if (true) {
            if ((UnitGetType(EventUnit()) == "Goliath")) {
                lv_tempInt = 4;
            }

        }

        lv_offset = (-38 * (lv_tempInt - 1));
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorCenter, lv_offset, 27, StringToText(""), (CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(EventUnit()), "LifeArmorIcon", c_playerAny)), c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        lv_tooltipText = StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "LifeArmorName", c_playerAny));
        lv_tooltipText = TextWithColor(lv_tooltipText, Color(50.0, 100.0, 100.0));
        lv_tooltipText = (lv_tooltipText + gf_TooltipLineFunc("Armor", "UnitWeaponLineStartTip", FixedToString(UnitGetPropertyFixed(EventUnit(), c_unitPropLifeArmor, c_unitPropCurrent), 0), "ABChoiceResearchPoints_Zerg"));
        lv_tooltipText = (lv_tooltipText + gf_TooltipLineFunc("Move Speed", "UnitWeaponLineStartTip", CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "Speed", c_playerAny), "ABChoiceResearchPoints_Zerg"));
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltipText, PlayerGroupAll());
        lv_offset += 76;
        autoFD3257C7_ae = UnitWeaponCount(EventUnit());
        autoFD3257C7_var = 1;
        for ( ; autoFD3257C7_var <= autoFD3257C7_ae; autoFD3257C7_var += 1 ) {
            if ((UnitGetType(EventUnit()) == "Goliath") && ((autoFD3257C7_var == 1) || (autoFD3257C7_var == 4) || (autoFD3257C7_var == 6))) {
            }
            else {
                lv_weapons[0] = UnitWeaponGet(EventUnit(), autoFD3257C7_var);
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorCenter, lv_offset, 27, StringToText(""), (CatalogFieldValueGet(c_gameCatalogWeapon, lv_weapons[0], "Icon", c_playerAny)), c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ObjectiveDisplay", PlayerGroupAll());
                lv_tooltipText = StringExternal(CatalogFieldValueGet(c_gameCatalogWeapon, lv_weapons[0], "Name", c_playerAny));
                lv_tooltipText = TextWithColor(lv_tooltipText, Color(50.0, 100.0, 100.0));
                lv_temp = CatalogFieldValueGet(c_gameCatalogWeapon, lv_weapons[autoFD3257C7_var], "DisplayEffect", c_playerAny);
                lv_temp2 = CatalogFieldValueGet(c_gameCatalogWeapon, UnitWeaponGet(EventUnit(), autoFD3257C7_var), "DisplayEffect", c_playerAny);
                lv_damageRandom = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, lv_temp2, "Random", c_playerAny));
                lv_damageAmount = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, lv_temp2, "Amount", c_playerAny));
                lv_tooltipText = (lv_tooltipText + gf_TooltipLineFunc("Damage", "UnitWeaponLineStartTip", (IntToString(lv_damageAmount) + ("-" + IntToString((lv_damageAmount + lv_damageRandom)))), "ABChoiceResearchPoints_Zerg"));
                lv_increment = 0;
                for ( ; ( (auto977BC6FF_ai >= 0 && lv_increment <= auto977BC6FF_ae) || (auto977BC6FF_ai < 0 && lv_increment >= auto977BC6FF_ae) ) ; lv_increment += auto977BC6FF_ai ) {
                    lv_damageBonus = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, lv_temp2, "AttributeBonus[" + IntToString(lv_increment) + "]", c_playerAny));
                    lv_damageAmountAndBonus = (lv_damageAmount + lv_damageBonus);
                    lv_tempInt = (lv_damageAmount + lv_damageRandom);
                    if ((lv_damageBonus != 0)) {
                        lv_tooltipText = (lv_tooltipText + gf_TooltipLineFunc(("vs " + gf_AttributeBonusString(lv_increment)), "UnitWeaponLineStartTip", (IntToString(lv_damageAmountAndBonus) + ("-" + IntToString((lv_damageAmountAndBonus + lv_damageRandom)))), "ABChoiceResearchPoints_Zerg"));
                    }

                }
                lv_tempInt = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, lv_temp2, "PeriodCount", c_playerAny));
                if ((UnitGetType(EventUnit()) == "Goliath") && (autoFD3257C7_var == 5)) {
                    lv_tooltipText = (lv_tooltipText + gf_TooltipLineFunc("Attacks", "UnitWeaponLineStartTip", CatalogFieldValueGet(c_gameCatalogWeapon, "SpartanCompanyA", "DisplayAttackCount", c_playerAny), "ABChoiceResearchPoints_Zerg"));
                }

                lv_tooltipText = (lv_tooltipText + gf_TooltipLineFunc("Range", "UnitWeaponLineStartTip", CatalogFieldValueGet(c_gameCatalogWeapon, lv_weapons[0], "Range", c_playerAny), "ABChoiceResearchPoints_Zerg"));
                lv_tooltipText = (lv_tooltipText + gf_TooltipLineFunc("Weapon Speed", "UnitWeaponLineStartTip", CatalogFieldValueGet(c_gameCatalogWeapon, lv_weapons[0], "Period", c_playerAny), "ABChoiceResearchPoints_Zerg"));
                auto550A3BBC_val = UnitGetType(EventUnit());
                if (auto550A3BBC_val == "Goliath") {
                    autoAC3B5C61_val = autoFD3257C7_var;
                    if (autoAC3B5C61_val == 2) {
                        lv_tooltipText = (lv_tooltipText + gf_TooltipLineFunc("Targets", "UnitWeaponLineStartTip", "Ground", "ABChoiceResearchPoints_Zerg"));
                    }
                    else if (autoAC3B5C61_val == 3) {
                        lv_tooltipText = (lv_tooltipText + gf_TooltipLineFunc("Targets", "UnitWeaponLineStartTip", "Navy", "ABChoiceResearchPoints_Zerg"));
                    }
                    else if (autoAC3B5C61_val == 5) {
                        lv_tooltipText = (lv_tooltipText + gf_TooltipLineFunc("Targets", "UnitWeaponLineStartTip", "Battlecruiser", "ABChoiceResearchPoints_Zerg"));
                    }
                    else {
                    }
                }
                else {
                }
                if (true) {
                }

                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltipText, PlayerGroupAll());
                lv_offset += 76;
            }
        }
        lv_health = UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent);
        lv_tempInt = 0;
        auto3C3D1C66_var = 0;
        for ( ; auto3C3D1C66_var <= auto3C3D1C66_ae; auto3C3D1C66_var += 1 ) {
            lv_unitAttributes[auto3C3D1C66_var] = CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "Attributes[" + IntToString(auto3C3D1C66_var) + "]", c_playerAny);
            if ((lv_unitAttributes[auto3C3D1C66_var] == "1")) {
                lv_tempInt += 1;
                auto23FEB853_val = auto3C3D1C66_var;
                if (auto23FEB853_val == 0) {
                    lv_unitAttributesText[lv_tempInt] = "Light";
                }
                else if (auto23FEB853_val == 1) {
                    lv_unitAttributesText[lv_tempInt] = "Armored";
                }
                else if (auto23FEB853_val == 2) {
                    lv_unitAttributesText[lv_tempInt] = "Biological";
                }
                else if (auto23FEB853_val == 3) {
                    lv_unitAttributesText[lv_tempInt] = "Mechanical";
                }
                else if (auto23FEB853_val == 4) {
                    lv_unitAttributesText[lv_tempInt] = "Robotic";
                }
                else if (auto23FEB853_val == 5) {
                    lv_unitAttributesText[lv_tempInt] = "Psionic";
                }
                else if (auto23FEB853_val == 6) {
                    lv_unitAttributesText[lv_tempInt] = "Massive";
                }
                else if (auto23FEB853_val == 7) {
                    lv_unitAttributesText[lv_tempInt] = "Structure";
                }
                else if (auto23FEB853_val == 8) {
                    lv_unitAttributesText[lv_tempInt] = "Hover";
                }
                else if (auto23FEB853_val == 9) {
                    lv_unitAttributesText[lv_tempInt] = "Heroic";
                }
                else if (auto23FEB853_val == 10) {
                    lv_unitAttributesText[lv_tempInt] = "Summoned";
                }
                else if (auto23FEB853_val == 11) {
                    lv_unitAttributesText[lv_tempInt] = "Map Object";
                }
                else if (auto23FEB853_val == 12) {
                    lv_unitAttributesText[lv_tempInt] = "Map Boss";
                }
                else {
                }
            }

        }
        lv_increment = 1;
        while ((lv_increment <= lv_tempInt)) {
            if ((lv_increment < lv_tempInt)) {
                lv_unitAttributesCompilation = (lv_unitAttributesCompilation + (lv_unitAttributesText[lv_increment] + " - "));
            }
            else {
                lv_unitAttributesCompilation = (lv_unitAttributesCompilation + (lv_unitAttributesText[lv_increment] + ""));
            }
            lv_increment += 1;
        }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 30, c_anchorBottom, 0, 0, StringToText(lv_unitAttributesCompilation), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "UnitAttributesText", PlayerGroupAll());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitSelected_Init () {
    gt_UnitSelected = TriggerCreate("gt_UnitSelected_Func");
    TriggerAddEventUnitClick(gt_UnitSelected, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Units Selected
//--------------------------------------------------------------------------------------------------
bool gt_UnitsSelected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroupSelected(1), c_unitCountAlive) > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_selectedUnitDialog[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitsSelected_Init () {
    gt_UnitsSelected = TriggerCreate("gt_UnitsSelected_Func");
    TriggerAddEventUnitSelected(gt_UnitsSelected, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change Defender
//--------------------------------------------------------------------------------------------------
bool gt_ChangeDefender_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_newOwner;
    int lv_country;
    int lv_base;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_newOwner = UnitGetOwner(EventUnitTargetUnit());
    lv_country = gf_getCustomUnitValue(EventUnit(), 10);
    lv_base = gf_getCustomUnitValue(EventUnit(), 11);

    // Conditions
    if (testConds) {
        if (!((PointPathingPassable(UnitGetPosition(EventUnitTargetUnit())) == true))) {
            return false;
        }

        if (!((EventUnitTargetUnit() != null))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnitTargetUnit(), "Defender") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnitTargetUnit(), "WaterUnit") == true) && (UnitGetType(EventUnit()) == "Barracks") && (UnitGetType(EventUnit()) == "Factory")) {
        return true;
    }
    else {
        if ((UnitHasBehavior(gv_base[lv_base].lv_defender, "WaterUnit") == true) && (WorldHeight(c_heightMapGround, UnitGetPosition(EventUnitTargetUnit())) > 7.8)) {
            libNtve_gf_UIErrorMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), StringToText("Cannot be moved on land!"), SoundLink("Alert_TerranBuildError", -1));
            return true;
        }

    }
    gf_ChangeDefender(EventUnitTargetUnit(), gv_base[gf_getCustomUnitValue(EventUnit(), 11)].lv_defender);
    if ((UnitGetOwner(EventUnit()) != UnitGetOwner(EventUnitTargetUnit()))) {
        gf_SetupBaseOwnership(UnitGetOwner(EventUnitTargetUnit()), FixedToInt(UnitGetCustomValue(EventUnit(), 11)));
        gf_CountryConquestSequence(UnitGetOwner(EventUnitTargetUnit()), UnitGetOwner(EventUnit()), gf_getCustomUnitValue(EventUnit(), 10));
        if ((gv_player[lv_newOwner].lv_showHideNationality == true)) {
            gf_ShowHideIndvFlag(true, gf_getCustomUnitValue(EventUnit(), 11));
        }
        else {
            gf_ShowHideIndvFlag(false, gf_getCustomUnitValue(EventUnit(), 11));
        }
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeDefender_Init () {
    gt_ChangeDefender = TriggerCreate("gt_ChangeDefender_Func");
    TriggerAddEventUnitAbility(gt_ChangeDefender, null, AbilityCommand("SelectDefender2", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Homeland
//--------------------------------------------------------------------------------------------------
bool gt_SelectHomeland_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_country;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_country = gf_getCustomUnitValue(EventUnit(), 10);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_AnyoneElseHasNationality(EventPlayer(), lv_country) == false)) {
        if ((gv_player[EventPlayer()].lv_homeCountry == lv_country)) {
            if ((gv_player[EventPlayer()].lv_showHideNationality == false)) {
                gf_ShowHideAllFlag(EventPlayer(), true);
                gv_player[EventPlayer()].lv_homeCountry = lv_country;
                DialogControlSetVisible(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[EventPlayer()]][gv_scoreboard.lv_flag], PlayerGroupAll(), true);
                DialogControlSetPosition(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[EventPlayer()]][gv_scoreboard.lv_username], PlayerGroupAll(), c_anchorTopLeft, 50, DialogControlGetOffsetY(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[EventPlayer()]][gv_scoreboard.lv_username], 1));
            }
            else {
                gf_ShowHideAllFlag(EventPlayer(), false);
                gf_ChangeNickName(EventPlayer(), StringToText("Anonymous"));
                gv_player[EventPlayer()].lv_homeCountry = 0;
                DialogControlSetVisible(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[EventPlayer()]][gv_scoreboard.lv_flag], PlayerGroupAll(), false);
                DialogControlSetPosition(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[EventPlayer()]][gv_scoreboard.lv_username], PlayerGroupAll(), c_anchorTopLeft, 18, DialogControlGetOffsetY(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[EventPlayer()]][gv_scoreboard.lv_username], 1));
            }
        }
        else {
            gf_ShowHideAllFlag(EventPlayer(), true);
            gv_player[EventPlayer()].lv_homeCountry = lv_country;
            DialogControlSetVisible(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[EventPlayer()]][gv_scoreboard.lv_flag], PlayerGroupAll(), true);
            DialogControlSetPosition(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[EventPlayer()]][gv_scoreboard.lv_username], PlayerGroupAll(), c_anchorTopLeft, 50, DialogControlGetOffsetY(gv_scoreboard.lv_items[gv_scoreboard.lv_getRowIDViaPlayer[EventPlayer()]][gv_scoreboard.lv_username], 1));
        }
        gf_RefreshAllFlag(UnitGetOwner(EventUnit()), lv_country);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectHomeland_Init () {
    gt_SelectHomeland = TriggerCreate("gt_SelectHomeland_Func");
    TriggerAddEventUnitAbility(gt_SelectHomeland, null, AbilityCommand("SelectCountry", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_SetupGame_Init();
    gt_SetupID_Init();
    gt_SetupBank_Init();
    gt_SetupUnits_Init();
    gt_SetupCountries_Init();
    gt_SetupBases_Init();
    gt_SetupUI_Init();
    gt_SetupPlayer_Init();
    gt_SetupScreenFade_Init();
    gt_SetupGameMode_Init();
    gt_GameInitialization_Init();
    gt_SetupScoreboard_Init();
    gt_SetupVictoryPercentageDisplay_Init();
    gt_SetupCustomChatUI_Init();
    gt_SetupCurrencyBar_Init();
    gt_TutorialMode_Init();
    gt_CheckSettings_Init();
    gt_CheckNoDefender_Init();
    gt_GameDialogUsed_Init();
    gt_KeyUsed_Init();
    gt_Menu_Init();
    gt_Profile_Init();
    gt_Log_Init();
    gt_Cards_Init();
    gt_Chat_Init();
    gt_Refresh_Init();
    gt_RefreshCurrencyBar_Init();
    gt_PlayerLeaves_Init();
    gt_unitcap_Init();
    gt_UnitUnload_Init();
    gt_UnitDies_Init();
    gt_UnitDies2_Init();
    gt_UnitTrain_Init();
    gt_UnitPropertyChanges_Init();
    gt_UnitSelected_Init();
    gt_UnitsSelected_Init();
    gt_ChangeDefender_Init();
    gt_SelectHomeland_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
