trigger gt_SwapDefenderAbility;

bool SwapDefenderAbility (bool testConds, bool runActions) {
    int newOwner;
    int currentOwner;
    int countryID;
    int baseID;

    newOwner = UnitGetOwner(EventUnitTargetUnit());
    currentOwner = UnitGetOwner(EventUnit());
    countryID = GetCountryIDOfUnit(EventUnit());
    baseID = GetBaseIDOfUnit(EventUnit());

    if (testConds) {
        if (EventUnitTargetUnit() == null 
        || PointPathingPassable(UnitGetPosition(EventUnitTargetUnit())) == false
        ||UnitHasBehavior(EventUnitTargetUnit(), "Defender") == true) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnitTargetUnit(), "WaterUnit") == true) && ((UnitGetType(EventUnit()) == "Barracks") || (UnitGetType(EventUnit()) == "Starport"))) {
        return true;
    }
    else if ((UnitHasBehavior(allBases[baseID].defender, "WaterUnit") == true) && (WorldHeight(c_heightMapGround, UnitGetPosition(EventUnitTargetUnit())) > 7.8)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(currentOwner), StringToText("Cannot be moved on land!"), SoundLink("Alert_TerranBuildError", -1));
        return true;
    }
    
    SwapDefender(EventUnitTargetUnit(), baseID);
    if (currentOwner != newOwner) {
        SetBaseOwnership(baseID, newOwner);
        //if ((gv_player[newOwner].lv_showHideNationality == true)) {
        //    gf_ShowHideIndvFlag(true, baseID);
        //}
        //else {
        //    gf_ShowHideIndvFlag(false, baseID);
        //}
    }

    TriggerAddEventUnitDamaged(gt_BaseCapture, UnitRefFromUnit(allBases[baseID].defender), c_unitDamageTypeAny, c_unitDamageFatal, null);

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwapDefender_Init () {
    gt_SwapDefenderAbility = TriggerCreate("SwapDefenderAbility");
    TriggerAddEventUnitAbility(gt_SwapDefenderAbility, null, AbilityCommand("SelectDefender2", 0), c_unitAbilStageExecute, false);
}
