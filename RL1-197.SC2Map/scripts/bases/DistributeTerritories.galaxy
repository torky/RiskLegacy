
struct PickedPlayer{
    int player;
    bool picked;
};
typedef PickedPlayer[15] PlayerArray;

void GeneratePickedPlayers(playergroup players, int count, arrayref<PlayerArray> pickedPlayers){
    int i;
    int p;
    for(i = 1; i <= count; i += 1){
        p = PlayerGroupPlayer(players, i);

        pickedPlayers[i-1].player = p;
        pickedPlayers[i-1].picked = false;
    }
}

int GetNextPlayer(arrayref<PlayerArray> players, int i){
    int j = 0;
    while(i > 0){
        while(players[j].picked){ j+=1; }
        j+=1;
        i-=1;
    }
    return j;
}

void DistributeTerritories(playergroup players) {
    int x;
    int count;
    int i;
    int j;
    int r;
    int p;
    PlayerArray pickedPlayers;

    count = PlayerGroupCount(players);
    j = 0;
    for(i = 0; i < totalBases; i+=1){
        if(j == 0){
            j = count-1;
            GeneratePickedPlayers(players, count, pickedPlayers);
        }

        r = RandomInt(0, j);
        p = GetNextPlayer(pickedPlayers, r);
        pickedPlayers[p].picked = true;
        p = pickedPlayers[p].player;
        SetBaseOwnership(allBases[i], p);
        j-=1;
    }
    
}








