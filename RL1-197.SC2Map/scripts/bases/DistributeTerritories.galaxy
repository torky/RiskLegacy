
struct Picked{
    int value;
    bool picked;
};

typedef Picked[16] PlayerArray;

void GeneratePickedPlayers(playergroup players, int count, arrayref<PlayerArray> pickedPlayers){
    int i;
    int p;
    for(i = 1; i <= count; i += 1){
        pickedPlayers[i-1].value = PlayerGroupPlayer(players, i);;
        pickedPlayers[i-1].picked = false;
    }
}

void DistributeTerritories(playergroup players) {
    int i;
    int count;
    int r;
    int p;
    int j;
    int c;
    structref<Base> b;
    int bi;
    PlayerArray pickedPlayers;

    count = PlayerGroupCount(players);
    j = -1;
    c = 0;
    i = 0;
    while(i < totalCountries){
        if(j == -1){
            j = count-1;
            GeneratePickedPlayers(players, count, pickedPlayers);
        }
        bi = countries[i].baseIDs[c];
        b = allBases[bi];

        if(b.structure == null){
            c = 0;
            i+=1;
            bi = countries[i].baseIDs[c];
            b = allBases[bi];
        }

        r = RandomInt(0, j);

        while(pickedPlayers[r].picked) {
            r+=1;
        }

        pickedPlayers[r].picked = true;
        p = pickedPlayers[r].value;
        
        SetBaseOwnership(b, p);
        c+=1;
        j-=1;
    }
    
}




