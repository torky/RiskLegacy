
struct Picked{
    int value;
    bool picked;
};

typedef Picked[16] PlayerArray;

unit gf_SetBaseOwnership(int baseID, int owner);

void GeneratePickedPlayers(playergroup players, int count, arrayref<PlayerArray> pickedPlayers){
    int i;
    int p;
    for(i = 1; i <= count; i += 1){
        pickedPlayers[i-1].value = PlayerGroupPlayer(players, i);;
        pickedPlayers[i-1].picked = false;
    }
}

int nextRandomPick(int pickablePlayers, arrayref<PlayerArray> pickedPlayers, int previousPick, bool dontMatchPrevious, int totalPicks){
    int pickableIndexMax = pickablePlayers - 1;
    int randomIndex = RandomInt(0, pickableIndexMax);
    int[2] randomPick;
    while(pickedPlayers[randomIndex].picked) {
        randomIndex+=1;
    }

    while(dontMatchPrevious && randomIndex == previousPick && totalPicks != 1){
        randomIndex = RandomInt(0, pickableIndexMax);
        while(pickedPlayers[randomIndex].picked) {
            randomIndex+=1;
        }
    }

    pickedPlayers[randomIndex].picked = true;
    return randomIndex;
}

void DistributeTerritories(playergroup players, funcref<gf_SetBaseOwnership> SetBaseOwnerShipFunc) {
    int countryID;
    int baseInCountry;
    structref<Country> country;
    int countryStructures;
    int baseID;
    PlayerArray picked;
    int totalPicks;
    int picksRemaining; 
    int nextPick;
    int nextPlayer;
    bool dontMatchPrevious;
    unitref u;
    int previousPick = -1; //Defaulted to -1 so first run will be successful
    int previousCountryID = -1; //Defaulted to -1 so first run will be successful

    picksRemaining = 0;
    totalPicks = PlayerGroupCount(players);
    for(countryID = 0; countryID < totalCountries; countryID += 1){

        country = allCountries[countryID];
        countryStructures = UnitGroupCount(country.structures, c_unitCountAll);
        if(countryStructures == 1) { continue; }
        for(baseInCountry = 0; baseInCountry < countryStructures; baseInCountry += 1){
            baseID = country.baseIDs[baseInCountry];
            if(picksRemaining <= 0){
                picksRemaining = totalPicks;
                GeneratePickedPlayers(players, totalPicks, picked);
            }

            dontMatchPrevious = countryID == previousCountryID;
            nextPick = nextRandomPick(picksRemaining, picked, previousPick, dontMatchPrevious, totalPicks);
            nextPlayer = picked[nextPick].value;
            
            SetBaseOwnerShipFunc(baseID, nextPlayer);

            previousPick = nextPick;
            previousCountryID = countryID;
            picksRemaining-=1;
        }
    }

    actualBases = 0;
    for(baseID = 0; baseID < totalBases; baseID+=1){
        if(allBases[baseID].defender != null){
            actualBases+=1;
            u = UnitRefFromUnit(allBases[baseID].defender);
            TriggerAddEventUnitDamaged(gt_BaseCapture, u, c_unitDamageTypeAny, c_unitDamageFatal, null);
        }
    }
}  




