trigger gt_SwapDefenderAbility;

void SwapDefender (unit newUnit, int baseID) {
    //Variable Declarations
    point swapPoint;
    int countryID;
    unit oldUnit;

    oldUnit = allBases[baseID].defender;
    countryID = GetCountryIDOfUnit(oldUnit);
    swapPoint = UnitGetPosition(newUnit);

    //Implementation
    //Move old Unit
    if(oldUnit != null && UnitIsAlive(oldUnit)){
        UnitSetPosition(oldUnit, swapPoint, false);
        UnitBehaviorRemove(oldUnit, "Defender", 1);
        UnitBehaviorAdd(oldUnit, "Loadable", oldUnit, 1);
        //Assign game values
        SetCountryIDOfUnit(oldUnit, -1);
        SetBaseIDOfUnit(oldUnit, -1);
    }
    
    //Move new Unit
    UnitSetPosition(newUnit, allBases[baseID].position, false);
    UnitBehaviorRemove(newUnit, "Loadable", 1);
    UnitBehaviorAdd(newUnit, "Defender", newUnit, 1);
    UnitSetPropertyFixed(newUnit, c_unitPropLife, (UnitGetPropertyFixed(newUnit, c_unitPropLife, c_unitPropCurrent) - 20.0));
    
    //Assign game values
    SetCountryIDOfUnit(newUnit, countryID);
    SetBaseIDOfUnit(newUnit, baseID);

    allBases[baseID].defender = newUnit;
}

bool SwapDefenderAbility (bool testConds, bool runActions) {
    int newOwner;
    int currentOwner;
    int countryID;
    int baseID;

    newOwner = UnitGetOwner(EventUnitTargetUnit());
    currentOwner = UnitGetOwner(EventUnit());
    countryID = GetCountryIDOfUnit(EventUnit());
    baseID = GetBaseIDOfUnit(EventUnit());

    if (testConds) {
        if (EventUnitTargetUnit() == null 
        || PointPathingPassable(UnitGetPosition(EventUnitTargetUnit())) == false
        ||UnitHasBehavior(EventUnitTargetUnit(), "Defender") == true) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnitTargetUnit(), "WaterUnit") == true) && ((UnitGetType(EventUnit()) == "Barracks") || (UnitGetType(EventUnit()) == "Starport"))) {
        return true;
    }
    else if ((UnitHasBehavior(allBases[baseID].defender, "WaterUnit") == true) && (WorldHeight(c_heightMapGround, UnitGetPosition(EventUnitTargetUnit())) > 7.8)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(currentOwner), StringToText("Cannot be moved on land!"), SoundLink("Alert_TerranBuildError", -1));
        return true;
    }
    
    SwapDefender(EventUnitTargetUnit(), baseID);
    if (currentOwner != newOwner) {
        SetBaseOwnership(baseID, newOwner);
        //if ((gv_player[newOwner].lv_showHideNationality == true)) {
        //    gf_ShowHideIndvFlag(true, baseID);
        //}
        //else {
        //    gf_ShowHideIndvFlag(false, baseID);
        //}
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwapDefender_Init () {
    gt_SwapDefenderAbility = TriggerCreate("SwapDefenderAbility");
    TriggerAddEventUnitAbility(gt_SwapDefenderAbility, null, AbilityCommand("SelectDefender2", 0), c_unitAbilStageExecute, false);
}
