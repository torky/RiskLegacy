struct Base {
    unit flag;
    unit defender;
    unit beacon;
    unit structure;
    point position;
};

int actualBases;
const int totalBases = 250; //250 is arbitrary. Just needs to be larger than the number of total bases
Base[totalBases] allBases; 

void InitializeBase (int player, int baseID, unit structure) {
    // Variable Declarations
    point basePosition;
    structref<Base> base;

    base = allBases[baseID];

    base.structure = structure;
    basePosition = UnitGetPosition(base.structure);

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_TerranSmall", 0, player, PointWithOffsetPolar(basePosition, 1.5, 320.0));
    base.beacon = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "NoDefenderAura", UnitLastCreated(), 1);
    base.position = UnitGetPosition(base.beacon);
    
    UnitCreate(1, "DestructibleKorhalFlag", c_unitCreateIgnorePlacement, player, PointWithOffsetPolar(basePosition, 0.8, 60.0), 90.0);
    base.flag = UnitLastCreated();
    ActorSend(libNtve_gf_MainActorofUnit(base.flag), libNtve_gf_TextureSelectByID("Nothing"));
    
    UnitCreate(1, "Marine", 0, player, PointWithOffsetPolar(basePosition, 1.5, 320.0), 0);
    base.defender = UnitLastCreated();
    UnitBehaviorAdd(base.defender, "Defender", base.defender, 1);
    
    SetBaseIDOfUnit(base.structure, baseID);
    SetBaseIDOfUnit(base.defender, baseID);
    SetBaseIDOfUnit(base.beacon, baseID);
}

void SetBaseOwnership(int baseID, int player) {
    structref<Base> b;
    b = allBases[baseID];
    UnitSetOwner(b.defender, player, true);
    UnitSetOwner(b.structure, player, true);
    UnitSetOwner(b.flag, player, true);
    
    if(UnitGetType(b.structure) == "Barracks"){
        SwapUnitModel(b.structure, allPlayers[player].skins[c_barracksSkinID]);
    }else{
        SwapUnitModel(b.structure, allPlayers[player].skins[c_starportSkinID]);
    }

    SetFlag(b.flag, allPlayers[player].flag);
}

void SetBaseOwnership1v1(int baseID, int player) {
    playergroup team1 = GameAttributePlayersForTeam(1);
    playergroup team2 = GameAttributePlayersForTeam(1);
    if(PlayerGroupHasPlayer(team1, player) || PlayerGroupHasPlayer(team2, player)){
        SetBaseOwnership(baseID, player);
    }
}

void SwapDefender (unit newUnit, int baseID) {
    point swapPoint;
    int countryID;
    unit oldUnit;

    oldUnit = allBases[baseID].defender;
    countryID = GetCountryIDOfUnit(oldUnit);
    swapPoint = UnitGetPosition(newUnit);

    //Move old Unit
    if(oldUnit != null && UnitIsAlive(oldUnit)){
        UnitSetPosition(oldUnit, swapPoint, false);
        UnitBehaviorRemove(oldUnit, "Defender", 1);
        UnitBehaviorAdd(oldUnit, "Loadable", oldUnit, 1);
        //Assign game values
        SetCountryIDOfUnit(oldUnit, -1);
        SetBaseIDOfUnit(oldUnit, -1);
    }
    
    //Move new Unit
    UnitSetPosition(newUnit, allBases[baseID].position, false);
    UnitBehaviorRemove(newUnit, "Loadable", 1);
    UnitBehaviorAdd(newUnit, "Defender", newUnit, 1);
    UnitSetPropertyFixed(newUnit, c_unitPropLife, (UnitGetPropertyFixed(newUnit, c_unitPropLife, c_unitPropCurrent) - 20.0));
    
    //Assign game values
    SetCountryIDOfUnit(newUnit, countryID);
    SetBaseIDOfUnit(newUnit, baseID);

    allBases[baseID].defender = newUnit;
}