struct Base {
    unit flag;
    unit defender;
    unit beacon;
    unit structure;
    point position;
};

const int totalBases = 250; //250 is arbitrary. Just needs to be larger than the number of total bases
Base[totalBases] allBases; 

void InitializeBase (int player, int baseID, unit structure) {
    // Variable Declarations
    point basePosition;
    structref<Base> base;

    base = allBases[baseID];

    base.structure = structure;
    basePosition = UnitGetPosition(base.structure);

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_TerranSmall", 0, player, PointWithOffsetPolar(basePosition, 1.5, 320.0));
    base.beacon = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "NoDefenderAura", UnitLastCreated(), 1);
    base.position = UnitGetPosition(base.beacon);
    
    UnitCreate(1, "DestructibleKorhalFlag", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(basePosition, 0.8, 60.0), 90.0);
    base.flag = UnitLastCreated();
    ActorSend(libNtve_gf_MainActorofUnit(base.flag), libNtve_gf_TextureSelectByID("Nothing"));
    libNtve_gf_ShowHideUnit(base.flag, false);
    
    UnitCreate(1, "Marine", 0, player, PointWithOffsetPolar(basePosition, 1.5, 320.0), 0);
    base.defender = UnitLastCreated();
    UnitBehaviorAdd(base.defender, "Defender", base.defender, 1);
    
    SetBaseIDOfUnit(base.structure, baseID);
    SetBaseIDOfUnit(base.defender, baseID);
    SetBaseIDOfUnit(base.beacon, baseID);
}

void SetBaseOwnership(int baseID, int player) {
    structref<Base> b;
    b = allBases[baseID];
    UnitSetOwner(b.defender, player, true);
    UnitSetOwner(b.structure, player, true);
    
    if(UnitGetType(b.structure) == "Barracks"){
        SwapUnitModel(b.structure, allPlayers[player].skins[c_barracksSkinID]);
    }else{
        SwapUnitModel(b.structure, allPlayers[player].skins[c_starportSkinID]);
    }
}