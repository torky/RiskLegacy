// Radius 6.0

unitgroup NearbyUnits(point position, int player, fixed radius){
    unitfilter filter;
    filter = UnitFilter(0, 
        0, 
        (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), 
        (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))
    );

    return UnitGroup(null, player, RegionCircle(position, radius), filter, 0);
}

//Prioritizes finding a unit the player owns in a 1.6 radius. If it doesn't find one, it returns a random unit within that 1.6 radius. If there are no units, it returns null.
unit FindUnitNearBaseNotOwnedByPlayer(int baseID, int player){
    fixed radius = 1.6;
    int count;
    unitgroup potentialDefenders;
    unit newDefender;
    unit allyUnit;
    unitfilter filter;
    structref<Base> base;
    unit previous;

    newDefender = null;
    base = allBases[baseID];
    potentialDefenders = NearbyUnits(base.position, c_playerAny, radius);

    count = UnitGroupCount(potentialDefenders, c_unitCountAll);
    for (;; count -= 1) {
        if(newDefender == null || player != UnitGetOwner(newDefender)){
            previous = newDefender;
        }
        newDefender = UnitGroupUnitFromEnd(potentialDefenders, count);
        if (newDefender == null) { return previous; }
        if (UnitGetOwner(newDefender) == UnitGetOwner(base.structure)){
            return newDefender;
        }
    }

    return null;
}

unit FindNewAttackerDefender(unit killingUnit){
    fixed radius = 6.0;
    unitgroup potentialDefenders;
    unitgroup surroundingUnits;
    unit current;
    fixed currentHealth;
    fixed lowestHealth;
    fixed maxHealth;
    fixed currentMaxHealth;
    unit newDefender;
    int count;
    unitfilter filter;
    point killingUnitPosition;
    int killingPlayer;

    killingUnitPosition = UnitGetPosition(killingUnit);
    killingPlayer = UnitGetOwner(killingUnit);
    potentialDefenders = NearbyUnits(killingUnitPosition, killingPlayer, radius);
    newDefender = killingUnit;
    lowestHealth = UnitGetPropertyFixed(killingUnit, c_unitPropLife, c_unitPropCurrent);
    maxHealth = UnitGetPropertyFixed(killingUnit, c_unitPropLifeMax, c_unitPropCurrent);

    count = UnitGroupCount(potentialDefenders, c_unitCountAll);
    for(;;count-=1){
        current = UnitGroupUnitFromEnd(potentialDefenders, count);
        if(current == null) {break;}
        currentHealth = UnitGetPropertyFixed(current, c_unitPropLife, c_unitPropCurrent);
        currentMaxHealth = UnitGetPropertyFixed(current, c_unitPropLifeMax, c_unitPropCurrent);

        if(!UnitHasBehavior2(current, "Defender") && 
        (
            (
                currentHealth < lowestHealth &&
                currentHealth > 0 &&
                currentMaxHealth == maxHealth
            )
            ||
            (
                currentMaxHealth < maxHealth
            )
        )){
            newDefender = current;
            lowestHealth = currentHealth;
            maxHealth = currentMaxHealth;
        }
    }

    if(UnitHasBehavior2(newDefender, "WaterUnit")){
        UnitCreate(1, "Marine", c_unitCreateIgnorePlacement, UnitGetOwner(killingUnit), UnitGetPosition(killingUnit), 0);
        newDefender = UnitLastCreated();
    }

    return newDefender;
}

void ChangeBaseOwner(int baseID, unit newDefender){
    structref<Base> base;
    int newOwner;
    int oldOwner;

    base = allBases[baseID];

    newOwner = UnitGetOwner(newDefender);
    oldOwner = UnitGetOwner(base.structure);

    SwapDefender(newDefender, baseID);
    SetBaseOwnership(baseID, newOwner);

    if(newOwner != oldOwner){
        IncrementCards(newOwner, base.structure);
        UpdateCountry(GetCountryIDOfUnit(base.defender));
    }

    UpdatePlayerSpawnControlGroup(newOwner);
    UpdatePlayerSpawnControlGroup(oldOwner);
    
    libNtve_gf_AttachActorToUnit(base.defender, "TimeWarpLaunch", "Ref_Origin");
}

trigger gt_EmptyBaseCapture;

bool EmptyBaseCapture(bool testConds, bool runActions){
    unitgroup baseBeacons;
    region nearby;
    unitfilter filter;
    unitfilter noBeacons;
    unit newDefender;
    unit beacon;
    int baseID;

    nearby = RegionCircle(UnitGetPosition(EventUnit()), 1);
    filter = UnitFilter(0, 0, 0, 0);
    newDefender = EventUnit();
    noBeacons = UnitFilter(0, 
        0, 
        (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), 
        (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))
    );

    if(UnitFilterMatch(newDefender, UnitGetOwner(newDefender), noBeacons)){
        baseBeacons = UnitGroup("Beacon_TerranSmall", c_playerAny, nearby, filter, 0);

        beacon = UnitGroupClosestToPoint(baseBeacons, UnitGetPosition(newDefender));
        baseID = GetBaseIDOfUnit(beacon);
    
        ChangeBaseOwner(baseID, newDefender);
    }

    return true;
}

void gt_EmptyBaseCapture_Init(){
    gt_EmptyBaseCapture = TriggerCreate("EmptyBaseCapture");
}

trigger gt_BaseCapture;

bool BaseCapture(bool testConds, bool runActions){
    unit dyingUnit;
    unit killingUnit;
    unit newDefender;
    int baseID;
    int oldOwner;
    int newOwner;
    unitgroup spawns;
    structref<Base> base;

    dyingUnit = EventUnit();
    killingUnit = EventUnitDamageSourceUnit();
    baseID = GetBaseIDOfUnit(dyingUnit);
    base = allBases[baseID];
    oldOwner = UnitGetOwner(base.structure);

    if(dyingUnit == base.defender){
        newDefender = FindUnitNearBaseNotOwnedByPlayer(baseID, UnitGetOwner(killingUnit));
        if(newDefender == null){
            newDefender = FindNewAttackerDefender(killingUnit);
        //If the new defender isn't the previous owner, choose no defender.
        }else if(UnitGetOwner(newDefender) != oldOwner){
            TriggerAddEventUnitRegion(gt_EmptyBaseCapture, null, RegionCircle(base.position, 0.25), true);
            return true;
        }

        ChangeBaseOwner(baseID, newDefender);
    }

    return true;
}

void gt_BaseCapture_Init () {
    gt_BaseCapture = TriggerCreate("BaseCapture");
    TriggerAddEventUnitDamaged(gt_BaseCapture, null, c_unitDamageTypeAny, c_unitDamageFatal, null);

}