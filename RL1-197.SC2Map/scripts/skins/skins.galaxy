const string c_requirementKills = "Kills";
const string c_requirementWins = "Wins";
const string c_requirementPrizes = "Prizes";

struct Skin{
    string model;
    string buttonPath;
    string value;
};

const int totalSkinsToEarn = 5;
const int totalRequirements = 3;

const int c_killRequirement = 0;
const int c_winRequirement = 1;
const int c_prizeRequirement = 2;

struct SkinType{
    string unitType;
    Skin[totalRequirements][totalSkinsToEarn] skins;
};

const int c_marineSkinID = 1;
const int c_medicSkinID = 2;
const int c_marauderSkinID = 3;
const int c_scvSkinID = 4;
const int c_hellionSkinID = 5;
const int c_vultureSkinID = 6;
const int c_goliathSkinID = 7;
const int c_tankSkinID = 8;
const int c_herculesSkinID = 9;
const int c_vikingSkinID = 10;
const int c_scienceVesselSkinID = 11;
const int c_bansheeSkinID = 12;
const int c_battleCruiserSkinID = 13;
const int c_barracksSkinID = 14;
const int c_starportSkinID = 15;

const int totalSkinTypes = 16;
SkinType[16] allSkinTypes;
typedef Skin[16] PlayerSkins;

void DeclareSkinTypes(){
    allSkinTypes[c_marineSkinID].unitType = "Marine";
    allSkinTypes[c_medicSkinID].unitType = "Medic";
    allSkinTypes[c_marauderSkinID].unitType = "Marauder";
    allSkinTypes[c_scvSkinID].unitType = "SCV";
    allSkinTypes[c_hellionSkinID].unitType = "Hellion";
    allSkinTypes[c_vultureSkinID].unitType = "Vulture";
    allSkinTypes[c_goliathSkinID].unitType = "Goliath";
    allSkinTypes[c_tankSkinID].unitType = "Siege Tank";
    allSkinTypes[c_herculesSkinID].unitType = "Hercules";
    allSkinTypes[c_vikingSkinID].unitType = "Viking";
    allSkinTypes[c_scienceVesselSkinID].unitType = "Science Vessel";
    allSkinTypes[c_bansheeSkinID].unitType = "Banshee";
    allSkinTypes[c_battleCruiserSkinID].unitType = "Battlecruiser";
    allSkinTypes[c_barracksSkinID].unitType = "Barracks";
    allSkinTypes[c_starportSkinID].unitType = "Starport";
}

void SetSkin(structref<Skin> oldSkin, structref<Skin> newSkin){
    oldSkin.buttonPath = newSkin.buttonPath;
    oldSkin.model = newSkin.model;
    oldSkin.value = newSkin.value;
}

trigger gt_Skins;

bool Skins(bool testConds, bool runActions){
    DeclareSkinTypes();

    return true;
}

void gt_Skins_Init(){
    gt_Skins = TriggerCreate("Skins");
    TriggerAddEventMapInit(gt_Skins);
}