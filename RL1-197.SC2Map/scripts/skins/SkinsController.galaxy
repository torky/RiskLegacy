struct SkinButton{
    Skin[totalPlayers] skins;
    int id;
    int innerImage;
    int requirement;
};

struct SkinButtonKey{
    int requirement;
    int column;
};

const int totalSkinButtonsPerRow = 5;
const int totalSkinButtonIDs = 60; //Just needs to be larger than 10 * requirements

struct SkinUI{
    int unitPulldown;
    SkinButton[totalRequirements][totalSkinButtonsPerRow] skinRows;
    SkinButtonKey[totalSkinButtonIDs] skinButtonKeys;
};

SkinUI skinUI; 

void HookupUnitPulldown(string path, structref<SkinUI> skinUI){
    int i;
    skinUI.unitPulldown = DialogControlHookupStandard(c_triggerControlTypePulldown, path  + "UnitSelect");
    for(i = 1; i < totalSkinTypes; i+=1){
        DialogControlAddItem(skinUI.unitPulldown, PlayerGroupActive(), StringToText(allSkinTypes[i].unitType));
    }
    DialogControlSelectItem(skinUI.unitPulldown, PlayerGroupActive(), c_marineSkinID);
}

void HookupSkinButtonRow(int requirementID, string path, int row){
    int i;
    int id;
    string buttonName;
    string buttonPath;
    string buttonImagePath;
    for(i = 0; i < totalSkinButtonsPerRow; i+=1){
        buttonPath = path + "Button" + IntToString(i);
        buttonImagePath = buttonPath + "/InnerImage";
        id = DialogControlHookupStandard(c_triggerControlTypeButton, buttonPath);
        skinUI.skinRows[requirementID][i].id = id;
        skinUI.skinRows[requirementID][i].innerImage = DialogControlHookupStandard(c_triggerControlTypeImage, buttonImagePath);
        skinUI.skinButtonKeys[id].requirement = requirementID;
        skinUI.skinButtonKeys[id].column = i;
    }
}

void HookupSkinUI(structref<SkinUI> skinUI, string path){
    HookupUnitPulldown(path, skinUI);
    HookupSkinButtonRow(c_killRequirement, path + "Kills/", 2);
    HookupSkinButtonRow(c_winRequirement, path + "Wins/", 12);
    HookupSkinButtonRow(c_winRateRequirement, path + "WinRate/", 22);
    HookupSkinButtonRow(c_prizeRequirement, path + "Prizes/", 32);
}

int GetUnitTypeIndexFromPulldown(int pulldown, int player){
    return DialogControlGetPropertyAsInt(pulldown, c_triggerControlPropertySelectionIndex, player) + 1;
}

bool PlayerMeetsRequirement(int player, int requirement, int skinIndex, int unitTypeId){
    int p = player;
    int r = requirement;
    int s = skinIndex;
    int u = unitTypeId;
    int value;
    string id;

    if(r == c_winRequirement || r == c_killRequirement){
        value = StringToInt(allSkinTypes[u].skins[r][s].value);
        if(r == c_winRequirement){
            return allPlayers[player].wins >= value;
        }else if(r == c_killRequirement){
            return allPlayers[player].kills >= value;
        }
    }else if(r == c_winRateRequirement){
        if(allPlayers[player].losses == 0) { return false; }
        return allPlayers[player].wins / allPlayers[player].losses >= StringToFixed(allSkinTypes[u].skins[r][s].value);
    }else if(r == c_prizeRequirement){
        return DataTableGetBool(true, PlayerHandle(player) + allSkinTypes[u].skins[r][s].model);
    }

    return false;
}

void UpdateSkinButtonImages(int player, int unitTypeID){
    int i;
    int r;
    int button;
    string image;
    bool playerMeetsRequirement;
    for(r = 0; r < totalRequirements; r+=1){
        for(i = 0; i < totalSkinButtonsPerRow; i+=1){
            SetSkin(skinUI.skinRows[r][i].skins[player], allSkinTypes[unitTypeID].skins[r][i]);
            image = allSkinTypes[unitTypeID].skins[r][i].buttonPath;
            if(image == null || image =="") { 
                image = "Assets/Textures/btn-no-image.dds"; 
                playerMeetsRequirement = false;
            }else{
                playerMeetsRequirement = PlayerMeetsRequirement(player, r, i, unitTypeID) || allPlayers[player].playerStatus == c_adminStatus;
            }
            button = skinUI.skinRows[r][i].innerImage;
            libNtve_gf_SetDialogItemImage(button, image, PlayerGroupSingle(player));
            DialogControlSetEnabled(button, PlayerGroupSingle(player), playerMeetsRequirement);
        }
    }}

trigger gt_SelectUnitType;

bool SelectUnitType(bool testConds, bool runActions){
    int pulldown = EventDialogControl();
    int requirement;
    int unitTypeID;
    int player = EventPlayer();

    unitTypeID = GetUnitTypeIndexFromPulldown(pulldown, player);

    UpdateSkinButtonImages(player, unitTypeID);
    
    return true;
}

void gt_SelectUnitType_Init(){
    int player;
    int r;

    gt_SelectUnitType = TriggerCreate("SelectUnitType");
    for(player = 0; player < totalPlayers; player += 1){
        for(r = 0; r < totalRequirements; r+=1){
            TriggerAddEventDialogControl(gt_SelectUnitType, player, skinUI.unitPulldown, c_triggerControlEventTypeSelectionChanged);
        }
    }
}

trigger gt_UpdatePlayerSkin;

bool UpdatePlayerSkin(bool testConds, bool runActions){
    int player;
    int skinButtonID;
    int requirementID;
    int column;
    int unitTypeID;
    int pulldown;
    string unitType;
    string model;
    structref<SkinButton> skinButton;

    player = EventPlayer();
    skinButtonID = EventDialogControl();
    
    requirementID = skinUI.skinButtonKeys[skinButtonID].requirement;
    column = skinUI.skinButtonKeys[skinButtonID].column;
    skinButton = skinUI.skinRows[requirementID][column];

    pulldown = skinUI.unitPulldown;
    unitTypeID = GetUnitTypeIndexFromPulldown(pulldown, player);
    unitType = allSkinTypes[unitTypeID].unitType;

    allPlayers[player].skins[unitTypeID] = skinButton.skins[player].model;
    model = allPlayers[player].skins[unitTypeID];
    UpdateSkins(unitType, model, player);
    SavePlayerBankSettings(player);

    return true;
}

void gt_UpdatePlayerSkin_Init(){
    int player;
    int r;
    int b;
    int control;
    gt_UpdatePlayerSkin = TriggerCreate("UpdatePlayerSkin");
    for(player = 0; player < totalPlayers; player +=1){
        for(r = 0; r < totalRequirements; r += 1){
            for(b = 0; b < totalSkinButtonsPerRow; b += 1){
                control = skinUI.skinRows[r][b].id;
                TriggerAddEventDialogControl(gt_UpdatePlayerSkin, player, control, c_triggerControlEventTypeClick);
            }
        }
    }
}

trigger gt_SkinPlayerUnits;

bool SkinPlayerUnits(bool testConds, bool runActions){
    unit unitCreated;
    int player;
    int unitTypeID;
    string unitType;
    string model;

    unitCreated = EventUnitCreatedUnit();
    player = EventPlayer();
    unitType = UnitGetType(unitCreated);
    unitTypeID = GetUnitTypeID(unitType);
    if(unitTypeID == -1) { return false; }
    model = allPlayers[player].skins[unitTypeID];
    
    SwapUnitModel(unitCreated, allPlayers[player].skins[unitTypeID]);

    return true;
}

void gt_SkinPlayerUnits_Init(){
    gt_SkinPlayerUnits = TriggerCreate("SkinPlayerUnits");
    TriggerAddEventUnitCreated(gt_SkinPlayerUnits, null, "BarracksTrain", null);
    TriggerAddEventUnitCreated(gt_SkinPlayerUnits, null, "StarportTrain", null);
    TriggerAddEventUnitCreated(gt_SkinPlayerUnits, null, "BarracksTrain2", null);
}

void SkinInitialUnits(){
    int p;
    int u;
    for(p = 1; p < totalPlayers; p+=1){
        for(u = c_unitSkinIndex0; u < totalSkinTypes; u+=1){
            UpdateSkins(allSkinTypes[u].unitType, allPlayers[p].skins[u], p);
        }
    }
}

void SetupSkinsUI(){
    InitializeSkinData();
    SkinInitialUnits();
    HookupSkinUI(skinUI, "UIContainer/SkinsUI/");
    gt_SkinPlayerUnits_Init();
    gt_SelectUnitType_Init();
    gt_UpdatePlayerSkin_Init();
}