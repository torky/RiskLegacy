struct SkinButton{
    Skin skin;
    int id;
    int innerImage;
    int requirementID;
};

const int totalSkinButtonsPerPanel = 5;

struct RequirementUI{
    int unitPulldown;
    int tabButton;
    SkinButton[totalSkinButtonsPerPanel] skinButtons;
};

struct SkinUI{
    RequirementUI[totalRequirements] requirements;
};

SkinUI skinUI; 

void HookupUnitPulldown(string path, structref<RequirementUI> requirement){
    int i;
    requirement.unitPulldown = DialogControlHookupStandard(c_triggerControlTypePulldown, path  + "UnitSelect");
    for(i = 1; i < totalSkinTypes; i+=1){
        DialogControlAddItem(requirement.unitPulldown, PlayerGroupActive(), StringToText(allSkinTypes[i].unitType));
    }
    DialogControlSelectItem(requirement.unitPulldown, PlayerGroupActive(), c_marineSkinID);

}

void HookupSkinButtons(string path, structref<RequirementUI> requirement){
    int i;
    string buttonName;
    string buttonPath;
    string buttonImagePath;
    for(i = 0; i < totalSkinButtonsPerPanel; i+=1){
        buttonName = "Button" + IntToString(i);
        buttonPath = path + buttonName;
        buttonImagePath = buttonPath + "/InnerImage";
        requirement.skinButtons[i].id = DialogControlHookupStandard(c_triggerControlTypeButton, buttonPath);
        requirement.skinButtons[i].innerImage = DialogControlHookupStandard(c_triggerControlTypeImage, buttonImagePath);
        requirement.skinButtons[i].requirementID = i;
    }
}

void HookupPanelControls(string path, structref<RequirementUI> requirement){
    HookupUnitPulldown(path, requirement);
    HookupSkinButtons(path, requirement);
}

void HookupRequirmentUI(structref<RequirementUI> requirement, string panelPath, string tabPath){
    requirement.tabButton = DialogControlHookupStandard(c_triggerControlTypeButton, tabPath);
    HookupPanelControls(panelPath, requirement);
}

int GetUnitTypeIndexFromPulldown(int pulldown, int player){
    return DialogControlGetPropertyAsInt(pulldown, c_triggerControlPropertySelectionIndex, player) + 1;
}

int GetRequirementIDByPulldown(int pulldown){
    int i;
    for(i = 0; i < totalRequirements; i+=1){
        if(pulldown == skinUI.requirements[i].unitPulldown){
            return i;
        }
    }
    return -1;
}

void UpdateSkinButtonImages(structref<RequirementUI> requirementUI, int requirementID, int unitTypeID, int player){
    int button;
    string image;
    int i;

    for(i = 0; i < totalSkinButtonsPerPanel; i+=1){
        SetSkin(requirementUI.skinButtons[i].skin, allSkinTypes[unitTypeID].skins[requirementID][i]);
        image = allSkinTypes[unitTypeID].skins[requirementID][i].buttonPath;
        if(image == null || image =="") { image = "Assets/Textures/btn-no-image.dds"; }
        button = requirementUI.skinButtons[i].innerImage;
        libNtve_gf_SetDialogItemImage(button, image, PlayerGroupSingle(player));
    }
}

trigger gt_SelectUnitType;

bool SelectUnitType(bool testConds, bool runActions){
    int active;
    int pulldown = EventDialogControl();
    int requirement;
    int unitTypeID;
    int i;
    int player = EventPlayer();
    structref<RequirementUI> requirementUI;

    requirement = GetRequirementIDByPulldown(pulldown);
    requirementUI = skinUI.requirements[requirement];
    unitTypeID = GetUnitTypeIndexFromPulldown(pulldown, player);

    UpdateSkinButtonImages(requirementUI, requirement, unitTypeID, player);
    
    return true;
}

void gt_SelectUnitType_Init(){
    int player;
    int r;

    gt_SelectUnitType = TriggerCreate("SelectUnitType");
    for(player = 0; player < totalPlayers; player += 1){
        for(r = 0; r < totalRequirements; r+=1){
            TriggerAddEventDialogControl(gt_SelectUnitType, player, skinUI.requirements[r].unitPulldown, c_triggerControlEventTypeSelectionChanged);
        }
    }
}

int GetSkinButton(structref<RequirementUI> requirement, int skinButtonID){
    int b;
    for(b = 0; b < totalSkinButtonsPerPanel; b += 1){
        if(requirement.skinButtons[b].id == skinButtonID){
            return b;
        }
    }
    return -1;
}

int GetRequirementByButtonID(int skinButtonID){
    int r;
    int b;
    for(r = 0; r < totalRequirements; r += 1){
        for(b = 0; b < totalSkinButtonsPerPanel; b += 1){
            if(skinUI.requirements[r].skinButtons[b].id == skinButtonID){
               return r;
            }
        }
    }
    return -1;
}

trigger gt_UpdatePlayerSkin;

bool UpdatePlayerSkin(bool testConds, bool runActions){
    int player;
    int skinButtonID;
    int requirementID;
    int unitTypeID;
    int skinButtonSpot;
    int pulldown;
    string unitType;
    string model;
    structref<SkinButton> skinButton;
    structref<RequirementUI> requirement;

    player = EventPlayer();
    skinButtonID = EventDialogControl();
    requirementID = GetRequirementByButtonID(skinButtonID);
    requirement = skinUI.requirements[requirementID];
    skinButtonSpot = GetSkinButton(requirement, skinButtonID);
    skinButton = requirement.skinButtons[skinButtonSpot];
    pulldown = requirement.unitPulldown;
    unitTypeID = GetUnitTypeIndexFromPulldown(pulldown, player);
    unitType = allSkinTypes[unitTypeID].unitType;

    allPlayers[player].skins[unitTypeID] = skinButton.skin.model;
    model = allPlayers[player].skins[unitTypeID];
    UpdateSkins(unitType, model, player);
    SavePlayerBankSettings(player);

    return true;
}

void gt_UpdatePlayerSkin_Init(){
    int player;
    int r;
    int b;
    int control;
    gt_UpdatePlayerSkin = TriggerCreate("UpdatePlayerSkin");
    for(player = 0; player < totalPlayers; player +=1){
        for(r = 0; r < totalRequirements; r += 1){
            for(b = 0; b < totalSkinButtonsPerPanel; b += 1){
                control = skinUI.requirements[r].skinButtons[b].id;
                TriggerAddEventDialogControl(gt_UpdatePlayerSkin, player, control, c_triggerControlEventTypeClick);
            }
        }
    }
}

trigger gt_SkinPlayerUnits;

bool SkinPlayerUnits(bool testConds, bool runActions){
    unit unitCreated;
    int player;
    int unitTypeID;
    string unitType;
    string model;

    unitCreated = EventUnitCreatedUnit();
    player = EventPlayer();
    unitType = UnitGetType(unitCreated);
    unitTypeID = GetUnitTypeID(unitType);
    if(unitTypeID == -1) { return false; }
    model = allPlayers[player].skins[unitTypeID];
    
    SwapUnitModel(unitCreated, allPlayers[player].skins[unitTypeID]);

    return true;
}

void gt_SkinPlayerUnits_Init(){
    gt_SkinPlayerUnits = TriggerCreate("SkinPlayerUnits");
    TriggerAddEventUnitCreated(gt_SkinPlayerUnits, null, "BarracksTrain", null);
    TriggerAddEventUnitCreated(gt_SkinPlayerUnits, null, "StarportTrain", null);
    TriggerAddEventUnitCreated(gt_SkinPlayerUnits, null, "BarracksTrain2", null);
}

void SkinInitialUnits(){
    int p;
    int u;
    for(p = 1; p < totalPlayers; p+=1){
        for(u = c_unitSkinIndex0; u < totalSkinTypes; u+=1){
            UpdateSkins(allSkinTypes[u].unitType, allPlayers[p].skins[u], p);
        }
    }
}

void SetupSkinsUI(){
    InitializeSkinData();
    SkinInitialUnits();
    HookupRequirmentUI(skinUI.requirements[c_killRequirement], "UIContainer/SkinsUI/KillSkinPanel/", "UIContainer/SkinsUI/KillSkinTab");
    HookupRequirmentUI(skinUI.requirements[c_winRequirement], "UIContainer/SkinsUI/WinSkinPanel/", "UIContainer/SkinsUI/WinSkinTab");
    HookupRequirmentUI(skinUI.requirements[c_prizeRequirement], "UIContainer/SkinsUI/PrizeSkinPanel/", "UIContainer/SkinsUI/PrizeSkinTab");
    gt_SkinPlayerUnits_Init();
    gt_SelectUnitType_Init();
    gt_UpdatePlayerSkin_Init();
}