struct SkinButton{
    Skin skin;
    int id;
    int innerImage;
};

const int totalSkinButtonsPerPanel = 5;

struct RequirementUI{
    int unitPulldown;
    int tabButton;
    string requirementType;
    SkinButton[totalSkinButtonsPerPanel] skinTypeButtons;
};

struct SkinUI{
    RequirementUI kills;
    RequirementUI wins;
    RequirementUI prizes;
};

SkinUI skinUI; 

void HookupUnitPulldown(string path, structref<RequirementUI> requirement){
    int i;
    requirement.unitPulldown = DialogControlHookupStandard(c_triggerControlTypePulldown, path  + "UnitSelect");
    for(i = 1; i < totalSkinTypes; i+=1){
        DialogControlAddItem(requirement.unitPulldown, PlayerGroupActive(), StringToText(allSkinTypes[i].unitType));
    }
    DialogControlSelectItem(requirement.unitPulldown, PlayerGroupActive(), c_marineSkinID);

}

void HookupSkinButtons(string path, structref<RequirementUI> requirement){
    int i;
    string buttonName;
    string buttonPath;
    string buttonImagePath;
    for(i = 0; i < totalSkinButtonsPerPanel; i+=1){
        buttonName = "Button" + IntToString(i);
        buttonPath = path + buttonName;
        buttonImagePath = buttonPath + "/InnerImage";
        requirement.skinTypeButtons[i].id = DialogControlHookupStandard(c_triggerControlTypeButton, buttonPath);
        requirement.skinTypeButtons[i].innerImage = DialogControlHookupStandard(c_triggerControlTypeImage, buttonImagePath);
    }
}

void HookupPanelControls(string path, structref<RequirementUI> requirement){
    HookupUnitPulldown(path, requirement);
    HookupSkinButtons(path, requirement);
}

void HookupRequirmentUI(structref<RequirementUI> requirement, string panelPath, string tabPath, string requirementType){
    requirement.requirementType = requirementType;
    requirement.tabButton = DialogControlHookupStandard(c_triggerControlTypeButton, tabPath);
    HookupPanelControls(panelPath, requirement);
}

trigger gt_UpdateCurrentRequirementUI;

bool UpdateCurrentRequirementUI(bool testConds, bool runActions){
    int active;
    int pulldown = EventDialogControl();
    int requirement;
    int selected;
    int i;
    int button;
    int player = EventPlayer();
    string image;
    structref<RequirementUI> requirementUI;
    
    //Get RequirementUI
    if(pulldown == skinUI.kills.unitPulldown){
        requirement = c_killRequirement;
        requirementUI = skinUI.kills;
    }else if(pulldown == skinUI.wins.unitPulldown){
        requirement = c_winRequirement;
        requirementUI = skinUI.wins;
    }else if(pulldown == skinUI.prizes.unitPulldown){
        requirement = c_prizeRequirement;
        requirementUI = skinUI.prizes;
    }

    //Update RequirementUI
    selected = DialogControlGetPropertyAsInt(pulldown, c_triggerControlPropertySelectionIndex, player) + 1;
    for(i = 0; i < totalSkinButtonsPerPanel; i+=1){
        SetSkin(requirementUI.skinTypeButtons[i].skin, allSkinTypes[selected].skins[requirement][i]);
        image = allSkinTypes[selected].skins[requirement][i].buttonPath;
        if(image == null) { image = ""; }
        button = requirementUI.skinTypeButtons[i].innerImage;
        libNtve_gf_SetDialogItemImage(button, image, PlayerGroupSingle(player));
    }
    
    return true;
}

void gt_UpdateCurrentRequirementUI_Init(){
    int player;

    gt_UpdateCurrentRequirementUI = TriggerCreate("UpdateCurrentRequirementUI");
    for(player = 0; player < totalPlayers; player += 1){
        TriggerAddEventDialogControl(gt_UpdateCurrentRequirementUI, player, skinUI.kills.unitPulldown, c_triggerControlEventTypeSelectionChanged);
        TriggerAddEventDialogControl(gt_UpdateCurrentRequirementUI, player, skinUI.wins.unitPulldown, c_triggerControlEventTypeSelectionChanged);
        TriggerAddEventDialogControl(gt_UpdateCurrentRequirementUI, player, skinUI.prizes.unitPulldown, c_triggerControlEventTypeSelectionChanged);
    }
}



void SetupSkinsUI(){
    InitializeMarineSkins();
    HookupRequirmentUI(skinUI.kills, "UIContainer/SkinsUI/KillSkinPanel/", "UIContainer/SkinsUI/KillSkinTab", c_requirementKills);
    HookupRequirmentUI(skinUI.wins, "UIContainer/SkinsUI/WinSkinPanel/", "UIContainer/SkinsUI/WinSkinTab", c_requirementWins);
    HookupRequirmentUI(skinUI.prizes, "UIContainer/SkinsUI/PrizeSkinPanel/", "UIContainer/SkinsUI/PrizeSkinTab", c_requirementPrizes);
    gt_UpdateCurrentRequirementUI_Init();
}