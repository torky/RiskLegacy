const string c_sectionPlayer = "328977";
const string c_Win2 = "98541";
const string c_Win23 = "13495";
const string c_Win24 = "98635";
const string c_Win25 = "65326";
const string c_Win27 = "25715";
const string c_Win26 = "23214";
const string c_Win252 = "45762";
const string c_playerCardKey = "126395";
const string c_playerFastestWin = "269664";
const string c_sectionSettingAchieve = "978127";
const string c_Win2522 = "34645";
const string c_Win2523 = "29474";
const string c_pingBases = "42346";
const string c_showProfile = "67365";
const string c_showFlags = "87666";
const string c_showKillValue = "78865";
const string c_autoCards = "AutoCards";
const string c_marineSkin = "marine";
const string c_scvSkin = "scv";
const string c_goliathSkin = "goliath";
const string c_vultureSkin = "vulture";
const string c_marauderSkin = "marauder";
const string c_hellionSkin = "hellion";
const string c_medicSkin = "medic";
const string c_vikingSkin = "viking";
const string c_tankSkin = "tank";
const string c_herculesSkin = "hercules";
const string c_scienceVesselSkin = "scienceVessel";
const string c_bansheeSkin = "banshee";
const string c_battleCruiserSkin = "battlecruiser";
const string c_barracksSkin = "barracks";
const string c_starportSkin = "starport";
const string c_Win2531 = "43357";
const string c_Win2535 = "45689";
const string c_sectionRanking = "973423";
const string c_Win22 = "78245";

const string c_bankName = "RiskRevulsionv3";

void LoadBankForPlayer(int player){
    bank b;
    if(player == 1){
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText(libNtve_gf_ConvertBooleanToString(BankExists(c_bankName, player))));
    }
    b = BankLoad(c_bankName, player);
    BankOptionSet(b, c_bankOptionSignature, true);
    allPlayers[player].infoBank = b;
}
void SetPlayerValuesDefault(int playerID){
    structref<Player> player = allPlayers[playerID];
    
    player.wins = 0;
    player.losses = 0;
    player.kills = 0;
    player.deaths = 0;
    player.rekt = 0;
    player.lost = 0;
    player.fastestWin = -1;
    player.pingBases = 1;
    player.showProfile = 1;
    player.showFlags = 1;
    player.showKillValue = 1;
    player.autoCards = 1;
    player.skins[c_marineSkinID] = "";
    player.skins[c_medicSkinID] = "";
    player.skins[c_marauderSkinID] = "";
    player.skins[c_scvSkinID] = "";
    player.skins[c_hellionSkinID] = "";
    player.skins[c_vultureSkinID] = "";
    player.skins[c_goliathSkinID] = "";
    player.skins[c_tankSkinID] = "";
    player.skins[c_herculesSkinID] = "";
    player.skins[c_vikingSkinID] = "";
    player.skins[c_scienceVesselSkinID] = "";
    player.skins[c_bansheeSkinID] = "";
    player.skins[c_battlecruiserSkinID] = "";
}

void SetPlayerValuesFromBank(int playerID){
    structref<Player> player = allPlayers[playerID];
    bank playerBank = player.infoBank;

    player.wins = BankValueGetAsInt(playerBank, c_sectionPlayer, c_Win2);
    player.losses = BankValueGetAsInt(playerBank, c_sectionPlayer, c_Win23);
    player.kills = BankValueGetAsInt(playerBank, c_sectionPlayer, c_Win24);
    player.deaths = BankValueGetAsInt(playerBank, c_sectionPlayer, c_Win25);
    player.rekt = BankValueGetAsInt(playerBank, c_sectionPlayer, c_Win27);
    player.lost = BankValueGetAsInt(playerBank, c_sectionPlayer, c_Win26);
    player.fastestWin = BankValueGetAsInt(playerBank, c_sectionPlayer, c_playerFastestWin);
    player.pingBases = BankValueGetAsInt(playerBank, c_sectionSettingAchieve, c_pingBases);
    player.showProfile = BankValueGetAsInt(playerBank, c_sectionSettingAchieve, c_showProfile);
    player.showFlags = BankValueGetAsInt(playerBank, c_sectionSettingAchieve, c_showFlags);
    player.showKillValue = BankValueGetAsInt(playerBank, c_sectionSettingAchieve, c_showKillValue);
    player.autoCards = BankValueGetAsInt(playerBank, c_sectionSettingAchieve, c_autoCards);
    player.skins[c_marineSkinID] = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_marineSkin);
    player.skins[c_medicSkinID] = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_medicSkin);
    player.skins[c_marauderSkinID] = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_marauderSkin);
    player.skins[c_scvSkinID] = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_scvSkin);
    player.skins[c_hellionSkinID] = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_hellionSkin);
    player.skins[c_vultureSkinID] = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_vultureSkin);
    player.skins[c_goliathSkinID] = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_goliathSkin);
    player.skins[c_tankSkinID] = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_tankSkin);
    player.skins[c_herculesSkinID] = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_herculesSkin);
    player.skins[c_vikingSkinID] = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_vikingSkin);
    player.skins[c_scienceVesselSkinID] = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_scienceVesselSkin);
    player.skins[c_bansheeSkinID] = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_bansheeSkin);
    player.skins[c_battlecruiserSkinID] = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_battleCruiserSkin);
    player.skins[c_barracksSkinID] = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_barracksSkin);
    player.skins[c_starportSkinID] = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_starportSkin);
}

void SavePlayerBankSettings (int playerID) {
    structref<Player> player = allPlayers[playerID];
    bank playerBank = player.infoBank;

    BankValueSetFromInt(playerBank, c_sectionSettingAchieve, c_pingBases, player.pingBases);
    BankValueSetFromInt(playerBank, c_sectionSettingAchieve, c_showProfile, player.showProfile);
    BankValueSetFromInt(playerBank, c_sectionSettingAchieve, c_showFlags, player.showFlags);
    BankValueSetFromInt(playerBank, c_sectionSettingAchieve, c_showKillValue, player.showKillValue);
    BankValueSetFromInt(playerBank, c_sectionSettingAchieve, c_autoCards, player.autoCards);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_marineSkin, player.skins[c_marineSkinID]);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_medicSkin, player.skins[c_medicSkinID]);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_marauderSkin, player.skins[c_marauderSkinID]);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_scvSkin, player.skins[c_scvSkinID]);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_hellionSkin, player.skins[c_hellionSkinID]);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_vultureSkin, player.skins[c_vultureSkinID]);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_goliathSkin, player.skins[c_goliathSkinID]);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_tankSkin, player.skins[c_tankSkinID]);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_herculesSkin, player.skins[c_herculesSkinID]);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_vikingSkin, player.skins[c_vikingSkinID]);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_scienceVesselSkin, player.skins[c_scienceVesselSkinID]);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_bansheeSkin, player.skins[c_bansheeSkinID]);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_battleCruiserSkin, player.skins[c_battlecruiserSkinID]);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_barracksSkin, player.skins[c_barracksSkinID]);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_starportSkin, player.skins[c_starportSkinID]);
    BankValueSetFromString(playerBank, c_sectionPlayer, c_Win252, player.name);

    BankOptionSet(playerBank, c_bankOptionSignature, true);
    BankSave(playerBank);
}

void UpdatePlayerBankStats(int playerID){
    structref<Player> player = allPlayers[playerID];
    bank playerBank = player.infoBank;

    BankValueSetFromInt(playerBank, c_sectionPlayer, c_Win24, player.kills + GetPlayerKills(playerID));
    BankValueSetFromInt(playerBank, c_sectionPlayer, c_Win25, player.deaths + GetPlayerDeaths(playerID));
    BankValueSetFromInt(playerBank, c_sectionPlayer, c_Win27, player.rekt + GetPlayerKillValue(playerID));
    BankValueSetFromInt(playerBank, c_sectionPlayer, c_Win26, player.lost + GetPlayerLostValue(playerID));

    BankOptionSet(playerBank, c_bankOptionSignature, true);
    BankSave(playerBank);
}

void UpdatePlayerBankWinLoss(int playerID, int numberOfTurns){
    structref<Player> player = allPlayers[playerID];
    bank playerBank = player.infoBank;

    BankValueSetFromInt(playerBank, c_sectionPlayer, c_Win2, player.wins + 1);
    BankValueSetFromInt(playerBank, c_sectionPlayer, c_Win23, player.losses - 1);

    if (numberOfTurns < player.fastestWin){
        BankValueSetFromInt(playerBank, c_sectionPlayer, c_playerFastestWin, numberOfTurns);
    }

    BankOptionSet(playerBank, c_bankOptionSignature, true);
    BankSave(playerBank);
}

void PresetPlayerAsLoser(int playerID){
    structref<Player> player = allPlayers[playerID];
    bank playerBank = player.infoBank;

    BankValueSetFromInt(playerBank, c_sectionPlayer, c_Win23, player.losses + 1);

    BankOptionSet(playerBank, c_bankOptionSignature, true);
    BankSave(playerBank);
}

void LoadBankInfoForPlayers(){
    int i;
    bool bankExists;

    for(i = 1; i < totalPlayers; i+=1){
        bankExists = BankExists(c_bankName, i);
        LoadBankForPlayer(i);
        if(bankExists && BankVerify(allPlayers[i].infoBank)){
            SetPlayerValuesFromBank(i);
        }else{
            SetPlayerValuesDefault(i);
        }

    }
}