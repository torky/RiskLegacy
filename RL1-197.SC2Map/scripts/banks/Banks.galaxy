const string c_sectionPlayer = "328977";
const string c_Win2 = "98541";
const string c_Win23 = "13495";
const string c_Win24 = "98635";
const string c_Win25 = "65326";
const string c_Win27 = "25715";
const string c_Win26 = "23214";
const string c_Win252 = "45762";
const string c_playerCardKey = "126395";
const string c_playerFastestWin = "269664";
const string c_sectionSettingAchieve = "978127";
const string c_Win2522 = "34645";
const string c_Win2523 = "29474";
const string c_pingBases = "42346";
const string c_showProfile = "67365";
const string c_showFlags = "87666";
const string c_showKillValue = "78865";
const string c_marineSkin = "marine";
const string c_scvSkin = "scv";
const string c_goliathSkin = "goliath";
const string c_vultureSkin = "vulture";
const string c_marauderSkin = "marauder";
const string c_hellionSkin = "hellion";
const string c_medicSkin = "medic";
const string c_vikingSkin = "viking";
const string c_tankSkin = "tank";
const string c_herculesSkin = "hercules";
const string c_scienceVesselSkin = "scienceVessel";
const string c_bansheeSkin = "banshee";
const string c_battleCruiserSkin = "battleCruiser";
const string c_Win2531 = "43357";
const string c_Win2535 = "45689";
const string c_sectionRanking = "973423";
const string c_Win22 = "78245";

void LoadBankForPlayer(int player){
    bank b;
    b = BankLoad("RiskRevulsionv3", player);
    BankOptionSet(b, c_bankOptionSignature, true);
    allPlayers[player].infoBank = b;
}

void SetPlayerValuesFromBank(int playerID){
    structref<Player> player = allPlayers[playerID];
    bank playerBank = player.infoBank;

    player.wins = BankValueGetAsInt(playerBank, c_sectionPlayer, c_Win2);
    player.losses = BankValueGetAsInt(playerBank, c_sectionPlayer, c_Win23);
    player.kills = BankValueGetAsInt(playerBank, c_sectionPlayer, c_Win24);
    player.deaths = BankValueGetAsInt(playerBank, c_sectionPlayer, c_Win25);
    player.rekt = BankValueGetAsInt(playerBank, c_sectionPlayer, c_Win27);
    player.lost = BankValueGetAsInt(playerBank, c_sectionPlayer, c_Win26);
    player.cardsKey = BankValueGetAsInt(playerBank, c_sectionPlayer, c_playerCardKey);
    player.fastestWin = BankValueGetAsInt(playerBank, c_sectionPlayer, c_playerFastestWin);
    player.pingBases = BankValueGetAsInt(playerBank, c_sectionSettingAchieve, c_pingBases);
    player.showProfile = BankValueGetAsInt(playerBank, c_sectionSettingAchieve, c_showProfile);
    player.showFlags = BankValueGetAsInt(playerBank, c_sectionSettingAchieve, c_showFlags);
    player.showKillValue = BankValueGetAsInt(playerBank, c_sectionSettingAchieve, c_showKillValue);
    player.skins.marine.model = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_marineSkin);
    player.skins.medic.model = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_medicSkin);
    player.skins.marauder.model = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_marauderSkin);
    player.skins.scv.model = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_scvSkin);
    player.skins.hellion.model = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_hellionSkin);
    player.skins.vulture.model = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_vultureSkin);
    player.skins.goliath.model = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_goliathSkin);
    player.skins.tank.model = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_tankSkin);
    player.skins.hercules.model = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_herculesSkin);
    player.skins.viking.model = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_vikingSkin);
    player.skins.scienceVessel.model = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_scienceVesselSkin);
    player.skins.banshee.model = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_bansheeSkin);
    player.skins.battleCruiser.model = BankValueGetAsString(playerBank, c_sectionSettingAchieve, c_battleCruiserSkin);
}

void SavePlayerBankSettings (int playerID) {
    structref<Player> player = allPlayers[playerID];
    bank playerBank = player.infoBank;

    BankValueSetFromInt(playerBank, c_sectionPlayer, c_playerCardKey, player.cardsKey);
    BankValueSetFromInt(playerBank, c_sectionSettingAchieve, c_pingBases, player.pingBases);
    BankValueSetFromInt(playerBank, c_sectionSettingAchieve, c_showProfile, player.showProfile);
    BankValueSetFromInt(playerBank, c_sectionSettingAchieve, c_showFlags, player.showFlags);
    BankValueSetFromInt(playerBank, c_sectionSettingAchieve, c_showKillValue, player.showKillValue);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_marineSkin, player.skins.marine.model);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_medicSkin, player.skins.medic.model);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_marauderSkin, player.skins.marauder.model);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_scvSkin, player.skins.scv.model);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_hellionSkin, player.skins.hellion.model);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_vultureSkin, player.skins.vulture.model);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_goliathSkin, player.skins.goliath.model);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_tankSkin, player.skins.tank.model);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_herculesSkin, player.skins.hercules.model);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_vikingSkin, player.skins.viking.model);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_scienceVesselSkin, player.skins.scienceVessel.model);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_bansheeSkin, player.skins.banshee.model);
    BankValueSetFromString(playerBank, c_sectionSettingAchieve, c_battleCruiserSkin, player.skins.battleCruiser.model);
    BankValueSetFromString(playerBank, c_sectionPlayer, c_Win252, player.name);

    BankOptionSet(playerBank, c_bankOptionSignature, true);
    BankSave(playerBank);
}

void UpdatePlayerBankStats(int playerID){
    structref<Player> player = allPlayers[playerID];
    bank playerBank = player.infoBank;


    BankValueSetFromInt(playerBank, c_sectionPlayer, c_Win24, player.kills + GetPlayerKills(playerID));
    BankValueSetFromInt(playerBank, c_sectionPlayer, c_Win25, player.deaths + GetPlayerDeaths(playerID));
    BankValueSetFromInt(playerBank, c_sectionPlayer, c_Win27, player.rekt + GetPlayerKillValue(playerID));
    BankValueSetFromInt(playerBank, c_sectionPlayer, c_Win26, player.lost + GetPlayerLostValue(playerID));

    BankOptionSet(playerBank, c_bankOptionSignature, true);
    BankSave(playerBank);
}

void UpdatePlayerBankWinLoss(int playerID, int numberOfTurns){
    structref<Player> player = allPlayers[playerID];
    bank playerBank = player.infoBank;

    BankValueSetFromInt(playerBank, c_sectionPlayer, c_Win2, player.wins + 1);
    BankValueSetFromInt(playerBank, c_sectionPlayer, c_Win23, player.losses);

    if (numberOfTurns < player.fastestWin){
        BankValueSetFromInt(playerBank, c_sectionPlayer, c_playerFastestWin, numberOfTurns);
    }

    BankOptionSet(playerBank, c_bankOptionSignature, true);
    BankSave(playerBank);
}

void PresetPlayerAsLoser(int playerID){
    structref<Player> player = allPlayers[playerID];
    bank playerBank = player.infoBank;

    BankValueSetFromInt(playerBank, c_sectionPlayer, c_Win23, player.losses + 1);

    BankOptionSet(playerBank, c_bankOptionSignature, true);
    BankSave(playerBank);
}

void LoadBankInfoForPlayers(){
    int i;

    for(i = 1; i < totalPlayers; i+=1){
        LoadBankForPlayer(i);
        SetPlayerValuesFromBank(i);
    }
}