typedef string[16] PlayerSkins;

struct Player{
    int income;
    int wins;
    int losses;
    int kills;
    int deaths;
    int rekt;
    int lost;
    bank infoBank;
    int fastestWin;
    string name;
    string flag;
    bool showHomeland;
    PlayerSkins skins;
    int pingBases;
    int showFlags;
    int showProfile;
    int showKillValue;
    int autoCards;
    int playerStatus;
};

const int totalPlayers = 16;
Player[totalPlayers] allPlayers;

trigger gt_SetupPlayers;

bool SetupPlayers(bool TestConds, bool RunActions){
    playergroup players;
    int player;
    int i;

    players = PlayerGroupActive();

    for(i = 1; i <= PlayerGroupCount(players); i += 1){
        player = PlayerGroupPlayer(players, i);
        PlayerModifyPropertyInt(player, c_playerPropSuppliesMade, c_playerPropOperSetTo, 1750);
    }

    return true;
}

void gt_SetupPlayers_Init () {
    gt_SetupPlayers = TriggerCreate("SetupPlayers");
    TriggerAddEventMapInit(gt_SetupPlayers);
}

void UpdatePlayerSpawnControlGroup(int player){
    unitgroup spawns;
    spawns = UnitGroup("SpawnZone", player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitControlGroupClear(player, 9);
    UnitControlGroupAddUnits(player, 9, spawns);
}

void UpdatePlayerSpawnControlGroups(){
    int i;
    
    for(i = 0; i < totalPlayers; i+=1){
        UpdatePlayerSpawnControlGroup(i);
    }
}

int GetPlayerKills(int player){
    return PlayerScoreValueGetAsInt(player, "UnitsKilledCount");
}

int GetPlayerKillValue(int player){
    return PlayerScoreValueGetAsInt(player, "UnitsKilledValue");
}

int GetPlayerDeaths(int player){
    return PlayerScoreValueGetAsInt(player, "UnitsLostCount");
}

int GetPlayerLostValue(int player){
    return PlayerScoreValueGetAsInt(player, "UnitsLostValue");
}

void SetInGamePlayerData(){
    int player;
    int i;
    int admin;
    int count;
    playergroup players;

    players = PlayerGroupActive();
    count = PlayerGroupCount(players);
    for(i = 1; i <= count; i+=1){
        player = PlayerGroupPlayer(players, i);
        for(admin = 0; admin < totalAdmins; admin+=1){
            if(PlayerHandle(player) == allAdmins[admin].sc2ID){
                allPlayers[player].playerStatus = allAdmins[admin].status;
                allPlayers[player].flag = allAdmins[admin].flagTexture;
            }
        }
        if(allPlayers[player].playerStatus < c_adminStatus){
            allPlayers[player].flag = "Nothing";
        }
        allPlayers[player].showHomeland = false;
    }
}